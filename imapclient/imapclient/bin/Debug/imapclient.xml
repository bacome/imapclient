<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imapclient</name>
    </assembly>
    <members>
        <member name="T:work.bacome.apidocumentation.cAPIDocumentationTemplate">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.#ctor">
            <summary>
            Initialises a new instance.
            </summary>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are the same.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.apidocumentation.cAPIDocumentationTemplate,work.bacome.apidocumentation.cAPIDocumentationTemplate)">
            <summary>
            Determines whether two instances are the same.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.apidocumentation.cAPIDocumentationTemplate,work.bacome.apidocumentation.cAPIDocumentationTemplate)">
            <summary>
            Determines whether two instances are the different.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.apidocumentation.cAPIDocumentationTemplate.Count">
            <summary>Gets the number of items in the set.</summary>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetEnumerator">
            <summary>Returns an enumerator that iterates through the items in the set.</summary>
        </member>
        <member name="T:work.bacome.apidocumentation.cAPIDocumentationExample1">
            <summary>
            Contains ...
            </summary>
        </member>
        <member name="F:work.bacome.apidocumentation.cAPIDocumentationExample1.Constant">
            <summary>fred</summary>
        </member>
        <member name="T:work.bacome.apidocumentation.eAPIDocumentationExample">
            <summary>
            The ...
            </summary>
        </member>
        <member name="F:work.bacome.apidocumentation.eAPIDocumentationExample.fred">
            <summary>The ...</summary>
        </member>
        <member name="T:work.bacome.apidocumentation.cAPIDocumentationExample2">
            <summary>
            Represents a ...
            A ... collection.
            A ... list.
            </summary>
            <inheritdoc cref="T:work.bacome.apidocumentation.cAPIDocumentationTemplate" select="remarks"/>
        </member>
        <member name="F:work.bacome.apidocumentation.cAPIDocumentationExample2.PSR">
            <summary>An apidocumentation that represents ...</summary>
        </member>
        <member name="F:work.bacome.apidocumentation.cAPIDocumentationExample2.Field1">
            <summary>
            The field1.
            </summary>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance {so it ... | with the specified ... }
            </summary>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.Contains(System.String)">
            <summary>
            Determines whether the { collection | list } contains ...
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.AMethod">
            <summary>
            Returns ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.op_Implicit(System.String)~work.bacome.apidocumentation.cAPIDocumentationExample2">
            <summary>
            Returns a new instance containing [a copy of] ...
            </summary>
            <param name="pParam"></param>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.#ctor">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.#ctor"/>
        </member>
        <member name="P:work.bacome.apidocumentation.cAPIDocumentationExample2.Count">
            <inheritdoc cref="P:work.bacome.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.GetEnumerator">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.Equals(System.Object)">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.GetHashCode">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.ToString">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.ToString"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.op_Equality(work.bacome.apidocumentation.cAPIDocumentationExample2,work.bacome.apidocumentation.cAPIDocumentationExample2)">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.apidocumentation.cAPIDocumentationTemplate,work.bacome.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.apidocumentation.cAPIDocumentationExample2.op_Inequality(work.bacome.apidocumentation.cAPIDocumentationExample2,work.bacome.apidocumentation.cAPIDocumentationExample2)">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.apidocumentation.cAPIDocumentationTemplate,work.bacome.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eConnectionState">
            <summary>
            The state of an IMAP connection.
            </summary>
            <remarks>
            In the <see cref="F:work.bacome.imapclient.eConnectionState.disconnected"/> state some <see cref="T:work.bacome.imapclient.cIMAPClient"/> properties retain their values from when the instance was connecting/ was connected.
            For example the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> property may have a value in this state, whereas it definitely won't have one in the <see cref="F:work.bacome.imapclient.eConnectionState.notconnected"/> state.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notconnected">
            <summary>The instance is not connected and never has been.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.connecting">
            <summary>The instance is in the process of connecting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notauthenticated">
            <summary>The instance is in the process of connecting, it is currently not authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.authenticated">
            <summary>The instance is in the process of connecting, it is authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.enabled">
            <summary>The instance is in the process of connecting, it has enabled all the server features it is going to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notselected">
            <summary>The instance connected, there is no mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.selected">
            <summary>The instance connected, there is a mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.disconnected">
            <summary>The instance is not connected, but it was connected, or tried to connect, once.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient">
            <summary>
            Instances of this class can interact with an IMAP server.
            </summary>
            <remarks>
            <para>
            An instance may connect many times, possibly to different IMAP servers, but can only have one active connection at a time.
            </para>
            <para>
            To connect to an IMAP server use the <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> method.
            Before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> set the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> properties at a minimum.
            Also consider setting the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/> property.
            </para>
            <para>Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.Version">
            <summary>The version number of the library. Used in the default <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> value.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.ReleaseDate">
            <summary>The release date of the library. Used in the default <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> value.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.TraceSourceName">
            <summary>The trace source name used when tracing. See <see cref="T:work.bacome.trace.cTrace"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pInstanceName">The tracing instance name to use. See <see cref="T:work.bacome.trace.cTrace"/>.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.InstanceName">
            <summary>
            Gets the instance name used in the tracing done by the instance.
            </summary>
            <seealso cref="T:work.bacome.trace.cTrace"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext">
            <summary>
            Gets and sets the <see cref="T:System.Threading.SynchronizationContext"/> on which callbacks and events are invoked. May be set to <see langword="null"/>.
            </summary>
            <remarks>
            If this property is not <see langword="null"/>, callbacks and events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>, otherwise they are invoked directly by the initiating library thread. 
            Defaults to the <see cref="T:System.Threading.SynchronizationContext"/> of the instantiating thread.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.PropertyChanged">
            <summary>
            Fired when a property value of the instance changes.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.ResponseText">
            <summary>
            Fired when the server sends response text.
            </summary>
            <remarks>
            <para>The IMAP spec says that <see cref="F:work.bacome.imapclient.eResponseTextCode.alert"/> text MUST be brought to the user's attention. See <see cref="F:work.bacome.imapclient.cResponseTextEventArgs.Text"/>.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkReceive">
            <summary>
            Fired when the server sends a response.
            </summary>
            <remarks>
            <para>This event is provided to aid in the debugging of the library.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkSend">
            <summary>
            Fired when the client sends an IMAP command.
            </summary>
            <remarks>
            <para>This event is provided to aid in the debugging of the library.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged">
            <summary>
            Fired when the server notifies the client of a property value change that affects a mailbox.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery">
            <summary>
            Fired when the server notifies the client that messages have arrived in a mailbox.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged">
            <summary>
            Fired when the server notifies the client of a property value change that affects a message.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.CallbackException">
            <summary>
            Fired when an exception is raised by external code in a callback or event handler.
            </summary>
            <remarks>
            <para>The library ignores the exception other than raising this event. This event is provided to aid in the debugging of external code.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler of this event the exception is completely ignored.
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Timeout">
            <summary>
            Gets and sets the timeout for library calls where no operation specific value for a timeout can be (or has been) specified.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.CancellableCount">
            <summary>
            Gets the current number of cancellable operations.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Cancel"/>
            <seealso cref="T:work.bacome.async.cCancellationManager"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Cancel">
            <summary>
            Cancels the current cancellable operations.
            </summary>
            <seealso cref="M:work.bacome.async.cCancellationManager.Cancel(work.bacome.trace.cTrace.cContext)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectionState">
            <summary>
            Gets the connection state of the instance.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsUnconnected">
            <summary>
            Indicates if the instance is currently unconnected.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsConnected">
            <summary>
            Indicates if the instance is currently connected.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Capabilities">
            <summary>
            Gets the capabilities of the connected (or most recently connected) server. May be <see langword="null"/>.
            </summary>
            <remarks>
            The capabilities reflect the server capabilities less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions">
            <summary>
            Gets the extensions that the library has enabled on the connected (or most recently connected) server.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId">
            <summary>
            Gets the accountid of the current (or most recent) connection. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral">
            <summary>
            Gets the login referral (RFC 2221), if received. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities">
            <summary>
            Gets and sets the server capabilities that the instance should ignore.
            </summary>
            <remarks>
            Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Useful for testing or if your server (or the library) has a bug in its implementation of an IMAP extension.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Server">
            <summary>
            Gets and sets the server to connect to. 
            </summary>
            <remarks>
            Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, defaulting the port to 143 and SSL to <see langword="false"/>. 
            </summary>
            <param name="pHost"></param>
            <remarks>
            Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, defaulting the port to 143 (no SSL) or 993 otherwise.
            </summary>
            <param name="pHost"></param>
            <param name="pSSL">Indicates if TLS should be established immediately upon TCP connect (see <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>).</param>
            <remarks>
            Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>.
            </summary>
            <param name="pHost"></param>
            <param name="pPort"></param>
            <param name="pSSL">Indicates if TLS should be established immediately upon TCP connect (see <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>).</param>
            <remarks>
            Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Credentials">
            <summary>
            Gets and sets the credentials to be used by <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <remarks>
            Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. 
            Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to no credentials. 
            </summary>
            <remarks>
            Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Useful to retrieve the property values set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> without actually connecting.
            Also useful when there is external authentication.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to anonymous credentials. 
            </summary>
            <param name="pTrace">The trace information sent to the server.</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try the SASL ANONYMOUS mechanism even if it isn't advertised by the server.</param>
            <remarks>
            Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            May fall back to IMAP LOGIN if SASL ANONYMOUS isn't available.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to plain credentials.
            </summary>
            <param name="pUserId">The userid to use.</param>
            <param name="pPassword">The password to use.</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try the SASL PLAIN mechanism even if it isn't advertised by the server.</param>
            <remarks>
             Can only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
             May fall back to IMAP LOGIN if SASL PLAIN isn't available.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals">
            <summary>
            Gets and sets whether mailbox referrals will be handled for the instance.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            If this is set to <see langword="false"/> the instance will not return remote mailboxes in mailbox lists.
            Handling mailbox referrals means handling the exceptions that may be raised by the library when accessing remote mailboxes.
            See RFC 2193 for details.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
            <seealso cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>
            <seealso cref="F:work.bacome.imapclient.cResponseText.Strings"/>
            <seealso cref="T:work.bacome.imapclient.cURL"/>
            <seealso cref="T:work.bacome.imapclient.cURI"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData">
            <summary>
            Gets and sets the set of optional mailbox attributes that are requested from the server.
            </summary>
            <remarks>
            The default value is <see cref="F:work.bacome.imapclient.fMailboxCacheData.messagecount"/> | <see cref="F:work.bacome.imapclient.fMailboxCacheData.unseencount"/>.
            Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration">
            <summary>
            Gets and sets the network-write batch-size configuration. You might want to limit this to increase the speed with which you can terminate the instance. Can only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <remarks>
            Limits the size of the buffer used when sending data to the server. Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration">
            <summary>
            Gets and sets the instance idle configuration. May be <see langword="null"/>.
            </summary>
            <remarks>
            For details of the idling process, see <see cref="T:work.bacome.imapclient.cIdleConfiguration"/>.
            Set to <see langword="null"/> to prevent the instance from idling.
            The default value is not <see langword="null"/> with the default configuration (see <see cref="T:work.bacome.imapclient.cIdleConfiguration"/> for the values).
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration">
            <summary>
            Gets and sets the default append-stream-read batch-size configuration. You might want to limit this to increase the speed with which you can terminate the instance.
            </summary>
            <remarks>
            Limits the size of the buffer when reading from the client-side stream (e.g. when reading an attachment from local disk). Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration">
            <summary>
            Gets and sets the fetch-cache-items batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the number of messages per batch when requesting cache-items from the server. Measured in number of messages.
            The default value is min=1 message, max=1000 messages, maxtime=10s, initial=1 message.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration">
            <summary>
            Gets and sets the fetch-body-read batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the size of the section parts when requesting body sections from the server. Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration">
            <summary>
            Gets and sets the fetch-body-write batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the size of the buffer when writing to the client-side stream (e.g. when writing to the local disk). Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Encoding">
            <summary>
            Gets and sets the encoding to use when <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> is not enabled. The default value is <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <remarks>
            Only affects filtering by character data - see <see cref="T:work.bacome.imapclient.cFilter"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientId">
            <summary>
            Gets and sets the ASCII ID (RFC 2971) details. 
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Id"/> is in use, these details are sent to the server during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            If <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> has been enabled and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> is not <see langword="null"/>, then <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> will be used in preference to this property.
            The default details in this property are those of the library.
            Set this and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> to <see langword="null"/> to send nothing to the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8">
            <summary>
            Gets and sets the UTF8 ID (RFC 2971) details.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> has not been enabled then <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> is used instead.
            The default value of this property is <see langword="null"/>.
            See <see cref="T:work.bacome.imapclient.cClientId"/> and/ or <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> for more details.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ServerId">
            <summary>
            Gets the ID (RFC 2971) details of the connected (or last connected) server, if they were sent. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Namespaces">
            <summary>
            Gets the namespace details for the connected (or last connected) account.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. Will be set to something even if <see cref="P:work.bacome.imapclient.cCapabilities.Namespace"/> is not in use.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Inbox">
            <summary>
            Gets the inbox of the connected (or last connected) account.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails">
            <summary>
            Gets the details of the currently selected mailbox, or <see langword="null"/> if there is no mailbox currently selected.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> to select a mailbox.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox">
            <summary>
            Gets an object that represents the currently selected mailbox, or <see langword="null"/> if there is no mailbox currently selected.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> to select a mailbox.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)">
            <summary>
            Gets an object that represents the named mailbox.
            </summary>
            <param name="pMailboxName"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts">
            <summary>
            Gets a report on the number of subscriptions to the events of this instance.
            </summary>
            <remarks>
            This report is provided to aid in the debugging of external code.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Connect">
            <summary>
            Connects to the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> using the <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
            Can only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Will throw if an authenticated IMAP connection cannot be established.
            </summary>
            <remarks>
            <para>
            TLS is established if possible before authentication is attempted.
            TLS will be established immediately upon TCP connect if the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> specifies <see cref="F:work.bacome.imapclient.cServer.SSL"/>,
            otherwise the library will use the IMAP STARTTLS command if both the server and client support it (see <see cref="P:work.bacome.imapclient.cCapabilities.StartTLS"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>).
            </para>
            <para>
            During the authentication part of connecting the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> will be set (most likely more than once).
            The <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/> value is used to determine what capabilities offered by the server are actually used by the client.
            It is possible that the <see cref="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral"/> will be set during authentication: this indicates that the connected server suggests that we disconnect and try a different server.
            If authentication is successful then the <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId"/> will be set.
            </para>
            <para>
            After authentication, depending on what the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> allow;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> is enabled (see <see cref="P:work.bacome.imapclient.cCapabilities.UTF8Accept"/>, <see cref="P:work.bacome.imapclient.cCapabilities.UTF8Only"/>); this sets the <see cref="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions"/> property.</item>
            <item>ID (RFC 2971) information is exchanged with the server; this sends the <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> (or <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/>) and sets the <see cref="P:work.bacome.imapclient.cIMAPClient.ServerId"/> property.</item>
            <item>Namespace (RFC 2342) information is retrieved from the server; this sets the <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/> property.</item>
            <item>A special syntax IMAP LIST command is used to discover the hierarchy delimiter and one personal namespace may be generated using it (setting the <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/> property).</item>
            </list>
            </para>
            <para>
            Normally only one of Namespace and LIST are used during connect, but under some strange circumstances both may be required.
            (The specific case is when the personal namespaces retrieved from the server do not contain the INBOX.)
            Once the <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/> are known the <see cref="P:work.bacome.imapclient.cIMAPClient.Inbox"/> property is set.
            </para>
            <para>
            At the end of a successful connect the <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/> will be <see cref="F:work.bacome.imapclient.eConnectionState.notselected"/>,
            at the end of a failed connect the <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/> will be <see cref="F:work.bacome.imapclient.eConnectionState.disconnected"/> and this method will throw.
            </para>
            <para>Some of the exceptions that might be thrown and why;
            <list type="bullet">
            <item>
              <term><see cref="T:work.bacome.imapclient.cConnectByeException"/></term>
              <description>
              The server actively rejected the connection.
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cCredentialsException"/></term>
              <description>
              The client was able to try credentials from <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>, but they didn't work.
              If the server explicitly rejected the credentials using one of the 
              <see cref="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed"/>, <see cref="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed"/> or <see cref="F:work.bacome.imapclient.eResponseTextCode.expired"/> codes,
              then the <see cref="F:work.bacome.imapclient.cCredentialsException.ResponseText"/> will contain the details (otherwise the <see cref="F:work.bacome.imapclient.cCredentialsException.ResponseText"/> will be <see langword="null"/>).
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cAuthenticationMechanismsException"/></term>
              <description>
              The client was not able to try any credentials from <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
              If the TLS state was to blame for this then <see cref="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue"/> will be set to <see langword="true"/>.
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cHomeServerReferralException"/></term>
              <description>
              While connecting the server either refused to connect or refused to authenticate and suggested that we try a different server instead
              (see <see cref="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText"/> and the contained <see cref="F:work.bacome.imapclient.cResponseText.Strings"/>).
              </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.ConnectAsync">
            <summary>
            Ansynchronously connects to the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> using the <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
            Can only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Will throw if an authenticated IMAP connection cannot be established.
            </summary>
            <returns></returns>
            <remarks>
            Please see <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> for details.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.CreateAsync(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Ansynchronously creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems">
            <summary>
            Gets and sets the cache items that are fetched by default when message lists are generated.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultSort">
            <summary>
            Gets and sets the sort that is used by default when message lists are generated using <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Disconnect">
            <summary>
            Disconnects gracefully from the connected server.
            Can only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.
            </summary>
            <remarks>
            Long running operations that are in progress will fail.
            (The gracefully refers to the IMAP protocol.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.DisconnectAsync">
            <summary>
            Disconnects gracefully and asynchronously from the connected server.
            Can only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.
            </summary>
            <returns></returns>
            <remarks>
            Long running operations that are in progress will fail.
            (The gracefully refers to the IMAP protocol.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a set of messages. The mailbox that the messages are in must be selected.
            </summary>
            <param name="pMessages"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            Individual messages should have their stores failed by the server if they have been modified since the specified modseq.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a set of messages. The mailbox that the messages are in must be selected.
            </summary>
            <param name="pMessages"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            Individual messages should have their stores failed by the server if they have been modified since the specified modseq.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Ensures that the specified items are cached in the internal message cache for the specified messages.
            </summary>
            <param name="pMessages"></param>
            <param name="pItems"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where something went wrong and the cache was not populated.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.FetchAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously ensures that the specified items are cached in the internal message cache for the specified messages.
            </summary>
            <param name="pMessages"></param>
            <param name="pItems"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where something went wrong and the cache was not populated.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets a list subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pHasSubscribedChildren">Specifies if mailboxes that are not themselves subscribed, but that have subscribed children, are included in the returned list.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            <para>
            The IMAP wildcards are;
            <list type="bullet">
            <item><token>*</token><description>Matches zero or more characters</description></item>
            <item><token>%</token><description>Matches zero or more characters but not the hierarchy delimiter</description></item>
            </list>
            </para>
            <para>
            The <paramref name="pDelimiter"/> is used in preparing the <paramref name="pListMailbox"/> for sending to the server.
            It should be correctly specified.
            The value specified does not affect what characters are matched by the % wildcard.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SubscribedAsync(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets a list subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pHasSubscribedChildren">Specifies if mailboxes that are not themselves subscribed, but that have subscribed children, are included in the returned list.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            <para>
            The IMAP wildcards are;
            <list type="bullet">
            <item><token>*</token><description>Matches zero or more characters</description></item>
            <item><token>%</token><description>Matches zero or more characters but not the hierarchy delimiter</description></item>
            </list>
            </para>
            <para>
            The <paramref name="pDelimiter"/> is used in preparing the <paramref name="pListMailbox"/> for sending to the server.
            It should be correctly specified.
            The value specified does not affect what characters are matched by the % wildcard.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets a list of mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            <para>
            The IMAP wildcards are;
            <list type="bullet">
            <item><token>*</token><description>Matches zero or more characters</description></item>
            <item><token>%</token><description>Matches zero or more characters but not the hierarchy delimiter</description></item>
            </list>
            </para>
            <para>
            The <paramref name="pDelimiter"/> is used in preparing the <paramref name="pListMailbox"/> for sending to the server.
            It should be correctly specified.
            The value specified does not affect what characters are matched by the % wildcard.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.MailboxesAsync(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets a list of mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            <para>
            The IMAP wildcards are;
            <list type="bullet">
            <item><token>*</token><description>Matches zero or more characters</description></item>
            <item><token>%</token><description>Matches zero or more characters but not the hierarchy delimiter</description></item>
            </list>
            </para>
            <para>
            The <paramref name="pDelimiter"/> is used in preparing the <paramref name="pListMailbox"/> for sending to the server.
            It should be correctly specified.
            The value specified does not affect what characters are matched by the % wildcard.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Poll">
            <summary>
            Polls the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for the client.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.PollAsync">
            <summary>
            Asynchronously polls the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for the client.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts">
            <summary>
            Counts of event subscriptions.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts"/>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.PropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.PropertyChanged"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.ResponseTextSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.ResponseText"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.NetworkReceiveSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkReceive"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.NetworkSendSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkSend"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MailboxPropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MailboxMessageDeliverySubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MessagePropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMessage"/> with some <see cref="E:work.bacome.imapclient.cMessage.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.CallbackExceptionSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.ToString">
            <summary>Returns a string that represents the counts.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient._Tests(work.bacome.trace.cTrace.cContext)">
            <summary>
            Internal library tests.
            </summary>
            <param name="pParentContext"></param>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataSets">
            <summary>
            Sets of data that can be requested about a mailbox. The exact data items requested depend on the value of <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            </summary>
            <remarks>
            <para>
            <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.list"/> data affects the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item>
            Always;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.Exists"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.CanHaveChildren"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsMarked"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsRemote"/></item>
              </list>
            </item>
            <item>
            If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.children"/>;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/></item>
              </list>
            </item>
            <item>
            If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/>;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
              </list>
            </item>
            </list>
            </para>
            <para>
            <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub"/> data always affects <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>. 
            </para>
            <para>
            <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.status"/> data affects the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.messagecount"/>: <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/></item>
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.recentcount"/>: <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/></item>
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidnext"/>: <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/></item>
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity"/>: <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/></item>
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.unseencount"/>: <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/></item>
            <item>If requesting <see cref="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq"/>: <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/></item>
            </list>
            </para>
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxParent.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxParent.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.list">
            <summary>Data returned by the IMAP LIST command.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub">
            <summary>Data returned by the IMAP LSUB command.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.status">
            <summary>Data returned by the IMAP STATUS command.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eStoreOperation">
            <summary>
            The type of store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.add">
            <summary>Add flags to the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.remove">
            <summary>Remove flags from the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.replace">
            <summary>Replace the flags.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fCacheAttributes">
            <summary>
            A set of IMAP message attributes that can be cached in the internal message cache.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCacheItems"/>
            <seealso cref="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)"/>
            <seealso cref="T:work.bacome.imapclient.cSortItem"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Attributes"/>
        </member>
        <member name="T:work.bacome.imapclient.kHeaderFieldName">
            <summary>
            Contains named message header field name constants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.InReplyTo">
            <summary>In-Reply-To</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.MessageId">
            <summary>Message-Id</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.References">
            <summary>References</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.Importance">
            <summary>Importance</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            A unique read-only header field name collection. Header field names are case insensitive.
            </summary>
            <remarks>
            Header field names have a limited grammar - see RFC 5322. 
            (Header field names must only include <see cref="F:work.bacome.imapclient.support.cCharset.FText"/> characters.)
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cSection"/>
            <seealso cref="T:work.bacome.imapclient.cCacheItems"/>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.None">
            <summary>An empty header field name collection.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.References">
            <summary>A header field name collection containing only <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.Importance">
            <summary>A header field name collection containing only <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])">
            <summary>
            Initalises a new instance with a duplicate free copy of the specified names. May throw if the specified names aren't valid header field names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Initialises a new instance with a copy of the specified names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String)">
            <summary>
            Determines whether the collection contains the name (case insensitive).
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])">
            <summary>
            Determines whether the collection contains all the specified names (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Union(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set union of this and the specified collection (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Intersect(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set intersection of this and the specified collection (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Except(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set difference of this and the specified collection (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNames.Count">
            <summary>Gets the number of names in the collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.ToString">
            <summary>Returns a string that represents the collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have the same names (case insensitive).
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.GetHashCode">
            <summary>
            Returns the hash code for this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Equality(work.bacome.imapclient.cHeaderFieldNames,work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines whether two instances contain the same names.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Inequality(work.bacome.imapclient.cHeaderFieldNames,work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines whether two instances do not contain the same names.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Implicit(work.bacome.imapclient.cHeaderFieldNameList)~work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            Returns a new instance containing a copy of the specified names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNameList">
            <summary>
            A unique header field name list. Header field names are case insensitive.
            </summary>
            <remarks>
            Header field names have a limited grammar - see RFC 5322. 
            (Header field names must only include <see cref="F:work.bacome.imapclient.support.cCharset.FText"/> characters.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor">
            <summary>
            Initialises a new empty instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(System.String[])">
            <summary>
            Initalises a new instance with a duplicate free copy of the specified names. May throw if the specified names aren't valid header field names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initalises a new instance with a duplicate free copy of the specified names. May throw if the specified names aren't valid header field names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Initialises a new instance with a copy of the specified names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String)">
            <summary>
            Determines whether the list contains the name (case insensitive).
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])">
            <summary>
            Determines whether the list contains all the names (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String)">
            <summary>Adds the name to the list if it isn't already there (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String[])">
            <summary>Adds each name if it isn't already in the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds each name if it isn't already in the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String)">
            <summary>Removes the name from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String[])">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Union(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Returns the set union of this and the specified list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Intersect(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Returns the set intersection of this and the specified list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Except(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Returns the set difference of this and the specified list (case insensitive).</summary>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNameList.Count">
            <summary>Gets the number of names in the list.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.GetEnumerator">
            <summary>Returns an enumerator that iterates through the list.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.ToString">
            <summary>Returns a string that represents the list.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object contain the same names (case insensitive).
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.GetHashCode">
            <summary>
            Returns the hash code for this list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.op_Equality(work.bacome.imapclient.cHeaderFieldNameList,work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Determines whether two instances contain the same names.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.op_Inequality(work.bacome.imapclient.cHeaderFieldNameList,work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Determines whether two instances do not contain the same names.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderField">
            <summary>
            Represents a message header field.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Name">
            <summary>
            The header field name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Value">
            <summary>
            The header field value.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderField.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgId">
            <summary>
            Represents a header field where the value is a message-id.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.MessageId"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgId.MsgId">
            <summary>
            The value of the field as a normalised (delimiters, quoting, comments and white space removed) message-id.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldMsgId.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgIds">
            <summary>
            Represents a header field where the value is a set of message-ids.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="P:work.bacome.imapclient.cHeaderFields.References"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.InReplyTo"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgIds.MsgIds">
            <summary>
            The value of the field as normalised (delimiters, quoting, comments and white space removed) message-ids.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldMsgIds.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldImportance">
            <summary>
            Represents a header field where the value is an importance.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="P:work.bacome.imapclient.cHeaderFields.Importance"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Low">
            <summary>The string constant for low importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Normal">
            <summary>The string constant for normal importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.High">
            <summary>The string constant for high importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Importance">
            <summary>The value of the field as an importance code.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.FieldValue(work.bacome.imapclient.eImportance)">
            <summary>Returns the string constant associated with the passed <paramref name="pImportance"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFields">
            <summary>
            A read-only collection of message header fields for a message.
            </summary>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.HeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFields.None">
            <summary>An empty collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(System.String)">
            <summary>
            Determines if the collection has been populated with all header fields of the name specified (case insensitive). <see langword="true"/> does not mean that there are header fields of the specified name in the collection.
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines if the collection has been populated with all header fields of all the names specified (case insensitive). <see langword="true"/> does not mean that there are any header fields of the specified names in the collection.
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ContainsNone(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines if the collection has not been populated with any header fields of the names specified (case insensitive). <see langword="false"/> does not mean that there are any header fields of the specified names in the collection.
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Missing(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the header field names from the specified collection that this instance has not been populated with (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns>T</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.FirstNamed(System.String)">
            <summary>
            Returns one header field of the name specified, or <see langword="null"/> if there are no header fields of that name in the collection (case insensitive). Throws if the collection has not been populated with header fields of the specified name.
            </summary>
            <param name="pName">The header field name.</param>
            <returns>A header field instance with the name specified or <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.AllNamed(System.String)">
            <summary>
            Returns all header fields of the name specified, or an empty set if there are no header fields of that name in the collection (case insensitive). Throws if the collection has not been populated with header fields of the specified name.
            </summary>
            <param name="pName">The header field name.</param>
            <returns>A header field instance with the name specified or <see langword="null"/>.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.References">
            <summary>
            Returns the normalised message-ids from the references header field, or <see langword="null"/>. Throws if the collection has not been populated with the references header field.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            Returns <see langword="null"/> if there was no references header field or if the references header field could not be parsed.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.Importance">
            <summary>
            Returns the importance value from the importance header field, or <see langword="null"/>. Throws if the collection has not been populated with the importance header field.
            </summary>
            <remarks>
            Returns <see langword="null"/> if there was no importance header field or if the importance header field could not be parsed.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ToString">
            <summary>Returns a string that represents the list.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.op_Addition(work.bacome.imapclient.cHeaderFields,work.bacome.imapclient.cHeaderFields)">
            <summary>
            Combines two header fields collections.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.eImportance">
            <summary>The message importance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedbackItem">
            <summary>
            Contains feedback on one message in a copy operation if the server provides an RFC 4315 UIDCOPY response.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCopyFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cCopyFeedbackItem.Source">
            <summary>The UID of the source message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCopyFeedbackItem.Destination">
            <summary>The UID of the copied message.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedbackItem.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedback">
            <summary>
            Contains feedback on copy operations if the server provides provides an RFC 4315 UIDCOPY response.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)"/>
        </member>
        <member name="P:work.bacome.imapclient.cCopyFeedback.Item(System.Int32)">
            <summary>
            Gets one item of feedback.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cCopyFeedback.Count">
            <summary>Gets the number of items of feedback in the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedback.GetEnumerator">
            <summary>Returns an enumerator that iterates through the items of feedback.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedback.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItemFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token and progress-increment callback. Intended for use when doing large message cache population operations.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Timeout">
            <summary>The timeout for the operation. May be <see cref="F:System.Threading.Timeout.Infinite"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation. May be <see cref="P:System.Threading.CancellationToken.None"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Increment">
            <summary>
            The progress-increment callback for the operation. May be <see langword="null"/>. Invoked possibly many times with an integer specifying the number of messages fetched since the last call.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItemFetchConfiguration.#ctor(System.Int32)">
            <summary>
            Initialises a new instance with a timeout only. Intended for use with synchronous APIs.
            </summary>
            <param name="pTimeout">May be <see cref="F:System.Threading.Timeout.Infinite"/>.</param>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItemFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32})">
            <summary>
            Initialises a new instance with a cancellation token and a progress-increment callback. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, then the callback is invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in the callback the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cBodyFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token, progress-increment callback and write-size configuration. Intended for use when fetching large message body parts into a stream.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Timeout">
            <summary>The timeout for the operation. May be <see cref="F:System.Threading.Timeout.Infinite"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation. May be <see cref="P:System.Threading.CancellationToken.None"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Increment">
            <summary>
            The progress-increment callback for the operation. May be <see langword="null"/>. Called many times with an integer specifying the number of bytes written into the associated stream.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Write">
            <summary>The configuration for controlling the size of the writes to the associated stream. May be <see langword="null"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyFetchConfiguration.#ctor(System.Int32,work.bacome.imapclient.cBatchSizerConfiguration)">
            <summary>
            Initialises a new instance with a timeout and write-size configuration. Intended for use with synchronous APIs.
            </summary>
            <param name="pTimeout">May be <see cref="F:System.Threading.Timeout.Infinite"/>.</param>
            <param name="pWrite">If <see langword="null"/> then the default <see cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/> will be used.</param>
        </member>
        <member name="M:work.bacome.imapclient.cBodyFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32},work.bacome.imapclient.cBatchSizerConfiguration)">
            <summary>
            Initialises a new instance with a cancellation token, progress-increment callback and write-size configuration. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
            <param name="pWrite">If <see langword="null"/> then the default <see cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/> will be used.</param>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, then the callback is invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in the callback the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token, progress-setcount callback and progress-increment callback.
            </summary>
            <remarks>
            Use this when the number of messages returned from a filter may be large.
            The progress-setcount callback should be used to initialise a progress bar so that the progress-increment callbacks give accurate operation progress feedback.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessageFetchConfiguration.SetCount">
            <summary>
            The progress-setcount callback for the operation. May be <see langword="null"/>. Called once, before any progress-increment callbacks, with an integer specifying the total number of messages to be fetched.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFetchConfiguration.#ctor(System.Int32)">
            <summary>
            Initialises a new instance with a timeout only. Intended for use with synchronous APIs.
            </summary>
            <param name="pTimeout"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            Initialises a new instance with a cancellation token, progress-setcount callback and a progress-increment callback. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pSetCount">May be <see langword="null"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, then the callbacks are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If exceptions are raised in the callbacks the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exceptions are ignored.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cMessageHandleList">
            <summary>
            A list of messages in the internal message cache.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageHandleList.ToString">
            <summary>Returns a string that represents the list.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cStrings">
            <summary>
            A read-only collection of strings.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Makes a read-only wrapper around the specified list.
            </summary>
            <param name="pStrings"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object contain the same strings in the same order.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.GetHashCode">
            <summary>
            Returns the hash code for this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.op_Equality(work.bacome.imapclient.cStrings,work.bacome.imapclient.cStrings)">
            <summary>
            Determines whether two instances contain the same strings in the same order.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.op_Inequality(work.bacome.imapclient.cStrings,work.bacome.imapclient.cStrings)">
            <summary>
            Determines whether two instances contain different strings or have then in a different order.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.eAccountType">
            <summary>
            The type of an IMAP account.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCredentials"/>
            <seealso cref="T:work.bacome.imapclient.cAccountId"/>
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.unknown">
            <summary>The library has no idea about the type of the account.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.anonymous">
            <summary>The account is an anonymous one.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.userid">
            <summary>The account has a userid.</summary>"
        </member>
        <member name="T:work.bacome.imapclient.cAccountId">
            <summary>
            Describes an IMAP account.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId"/>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Host">
            <summary>
            The host that contains the account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Type">
            <summary> 
            The account type. If the connection was IMAP PREAUTHed then this will be <see cref="F:work.bacome.imapclient.eAccountType.unknown"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.UserId">
            <summary>
            The account's userid, if any. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have the same values.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.op_Equality(work.bacome.imapclient.cAccountId,work.bacome.imapclient.cAccountId)">
            <summary>
            Determines whether two instances have the same values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.op_Inequality(work.bacome.imapclient.cAccountId,work.bacome.imapclient.cAccountId)">
            <summary>
            Determines whether two instances have different values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.fCapabilities">
            <summary>
            A set of capabilities that the library understands in some way.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCapabilities"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
            <seealso cref="T:work.bacome.imapclient.cProtocolErrorException"/>
            <seealso cref="T:work.bacome.imapclient.cUnexpectedServerActionException"/>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.logindisabled">
            <summary>IMAP LOGINDISABLED</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.starttls">
            <summary>IMAP STARTTLS</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.idle">
            <summary>RFC 2177 IDLE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.literalplus">
            <summary>RFC 7888 LITERAL+</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.literalminus">
            <summary>RFC 7888 LITERAL-</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.enable">
            <summary>RFC 5161 ENABLE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.utf8accept">
            <summary>RFC 6855 UTF8=ACCEPT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.utf8only">
            <summary>RFC 6855 UTF8=ONLY</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.listextended">
            <summary>RFC 5258 LIST extensions</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.children">
            <summary>RFC 3348 Child mailboxes</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sasl_ir">
            <summary>RFC 4959 SASL initial client response</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.loginreferrals">
            <summary>RFC 2221 Login referrals</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.mailboxreferrals">
            <summary>RFC 2193 Mailbox referrals</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.id">
            <summary>RFC 2971 Id</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.binary">
            <summary>RFC 3516 Binary content</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.namespaces">
            <summary>RFC 2342 Namespaces</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.liststatus">
            <summary>RFC 5819 STATUS information in LIST</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.specialuse">
            <summary>RFC 6154 Special use</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.esearch">
            <summary>RFC 4731 ESEARCH</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sort">
            <summary>RFC 5256 SORT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sortdisplay">
            <summary>RFC 5256 SORT=DISPLAY</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.esort">
            <summary>RFC 5267 ESORT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.condstore">
            <summary>RFC 7162 CONDSTORE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.qresync">
            <summary>RFC 7162 QRESYNC</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCapabilities">
            <summary>
            A set of capabilities.
            </summary>
            <remarks>
            The properties of this class reflect the flags set in <see cref="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities"/>.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.Capabilities">
            <summary>
            The capabilities as presented by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms">
            <summary>
            The authentication mechanisms as presented by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities">
            <summary>
            The set of server capabilities that are in use.
            </summary>
            <remarks>
            This value reflects the recognised elements of <see cref="F:work.bacome.imapclient.cCapabilities.Capabilities"/> less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginDisabled">
            <summary>Indicates if IMAP LOGIN is disabled.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.StartTLS">
            <summary>Indicates if IMAP STARTTLS can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Idle">
            <summary>Indicates if RFC 2177 IDLE can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralPlus">
            <summary>Indicates if RFC 7888 LITERAL+ can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralMinus">
            <summary>Indicates if RFC 7888 LITERAL- can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Enable">
            <summary>Indicates if RFC 5161 ENABLE can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Accept">
            <summary>Indicates if RFC 6855 UTF8=ACCEPT can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Only">
            <summary>Indicates if RFC 6855 UTF8=ONLY can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListExtended">
            <summary>Indicates if RFC 5258 LIST extensions can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Children">
            <summary>Indicates if RFC 3348 Child mailboxes can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SASL_IR">
            <summary>Indicates if RFC 4959 SASL initial client response can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginReferrals">
            <summary>Indicates if RFC 2221 Login referrals can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.MailboxReferrals">
            <summary>Indicates if RFC 2193 Mailbox referrals can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Id">
            <summary>Indicates if RFC 2971 Id can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Binary">
            <summary>Indicates if RFC 3516 Binary content can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Namespace">
            <summary>Indicates if RFC 2342 Namespaces can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListStatus">
            <summary>Indicates if RFC 5819 STATUS information in LIST can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SpecialUse">
            <summary>Indicates if RFC 6154 Special use can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESearch">
            <summary>Indicates if RFC 4731 ESEARCH can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Sort">
            <summary>Indicates if RFC 5256 SORT can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SortDisplay">
            <summary>Indicates if RFC 5256 SORT=DISPLAY can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESort">
            <summary>Indicates if RFC 5267 ESORT can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.CondStore">
            <summary>Indicates if RFC 7162 CONDSTORE can be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.QResync">
            <summary>Indicates if RFC 7162 QRESYNC can be used.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCapabilities.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentials">
            <summary>
            A set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Type">
            <summary>
            The account type that the credentials give access to.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.UserId">
            <summary>
            The userid for the credentials. May be <see langword="null"/> for <see cref="F:work.bacome.imapclient.eAccountType.anonymous"/> and <see cref="F:work.bacome.imapclient.eAccountType.unknown"/>; must not be <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Login">
            <summary>
            The parameters to use with the IMAP LOGIN command for these credentials.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.TryAllSASLs">
            <summary>
            Whether all the contained SASL authentication mechanisms should be tried regardless of whether they are advertised by the server or not.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.mSASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCredentials.SASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.None">
            <summary>
            An empty set of credentials. Useful for testing, getting the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> the server offers without connecting and for pre-authorised connections.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Anonymous(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns an anonymous set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
            <param name="pTrace">The trace information to use (should be a valid email address).</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try IMAP AUTHENTICATE ANONYMOUS even if it isn't advertised.</param>
            <returns>Anonymous credentials.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Plain(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns a plain set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try IMAP AUTHENTICATE PLAIN even if it isn't advertised.</param>
            <returns>Plain credentials.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cLogin">
            <summary>
            Parameters to use with the IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.TLSRequirement">
            <summary>
            The TLS requirement for the IMAP LOGIN command to be used with this userid and password.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cServer">
            <summary>
            An IMAP server to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Host">
            <summary>The host name.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Port">
            <summary>The port number.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.SSL">
            <summary>Indicates if TLS should be established immediately upon TCP connect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String)">
            <summary>
            Initialises a new instance with the port set to 143 and SSL set to <see langword="false"/>.
            </summary>
            <param name="pHost"></param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Boolean)">
            <summary>
            Initialises a new instance with the port set to 143 if <paramref name="pSSL"/> is <see langword="false"/>, otherwise set to 993.
            </summary>
            <param name="pHost"></param>
            <param name="pSSL">Indicates if TLS should be established immediately upon TCP connect.</param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pHost"></param>
            <param name="pPort"></param>
            <param name="pSSL">Indicates if TLS should be established immediately upon TCP connect.</param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eTLSRequirement">
            <summary>
            The TLS requirement for the components of <see cref="T:work.bacome.imapclient.cCredentials"/> to be used during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cLogin"/>
            <seealso cref="T:work.bacome.imapclient.cSASL"/>
            <seealso cref="T:work.bacome.imapclient.cSASLAnonymous"/>
            <seealso cref="T:work.bacome.imapclient.cSASLPlain"/>
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.indifferent">
            <summary>Don't care whether TLS is active or not.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.required">
            <summary>TLS must be active.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.disallowed">
            <summary>TLS must not be active.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.eDecodingRequired">
            <summary>
            The decoding required for message data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.unknown">
            <summary>The decoding required is unknown.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.none">
            <summary>No decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.quotedprintable">
            <summary>Quoted-printable decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.base64">
            <summary>BASE64 decoding is required.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fEnableableExtensions">
            <summary>
            A set of enableable IMAP extensions.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions"/>
        </member>
        <member name="F:work.bacome.imapclient.fEnableableExtensions.none">
            <summary>A constant representing no extensions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fEnableableExtensions.utf8">
            <summary>RFC 6855.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fEnableableExtensions.all">
            <summary>A mask representing all extensions.</summary>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheData">
            <summary>
            A set of optionally requested mailbox attributes.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.subscribed">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.children">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.specialuse">
            <summary>
            The backing data for;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
            </list>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.messagecount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.recentcount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidnext">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.unseencount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/>. Note that the server and/ or the mailbox may not support CONDSTORE (RFC 7162) so the value may not actually be requested.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.allstatus">
            <summary>
            The backing data retrieved by the IMAP STATUS command.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCallbackExceptionEventArgs">
            <summary>
            Carries exceptions raised by external code in callbacks and event handlers.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/>
        </member>
        <member name="F:work.bacome.imapclient.cCallbackExceptionEventArgs.Exception">
            <summary>
            The exception raised by external code.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCallbackExceptionEventArgs.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cNetworkReceiveEventArgs">
            <summary>
            Represents data received from a server.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.NetworkReceive"/>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkReceiveEventArgs.Lines">
            <summary>
            The data received.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNetworkReceiveEventArgs.ToString">
            <summary>Returns a string that represents the data received.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cNetworkSendEventArgs">
            <summary>
            Represents data sent to the server.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.NetworkSend"/>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkSendEventArgs.Bytes">
            <summary>
            The number of bytes sent (<see langword="null"/> if this can't be disclosed).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkSendEventArgs.Buffers">
            <summary>
            The bytes sent (sensitive data redacted).
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNetworkSendEventArgs.ToString">
            <summary>Returns a string that represents the data sent.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItemBase">
            <summary>
            Base class for feedback on one message in a store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cStoreFeedbackItem"/>
            <seealso cref="T:work.bacome.imapclient.cUIDStoreFeedbackItem"/>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.ReceivedFlagsUpdate">
            <summary>
            Indicates if a fetch response containing the flags was received for the message during the store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.WasNotUnchangedSince">
            <summary>
            Indicates if the message was mentioned in the RFC 7162 MODIFIED response code of the store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItem">
            <summary>
            Contains feedback on one message in a store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cStoreFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItem.Handle">
            <summary>The internal message cache item that this feedback relates to.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedbackItem.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedback">
            <summary>
            Contains feedback on a store operation.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback. Note that this may return a different value after a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cStoreFeedback.Item(System.Int32)">
            <summary>
            Gets one item of feedback.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cStoreFeedback.Count">
            <summary>Gets the number of items of feedback in the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.GetEnumerator">
            <summary>Returns an enumerator that iterates through the items of feedback.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.sStoreFeedbackSummary">
            <summary>
            Contains a summary of feeback on a store operation.
            </summary>
            <remarks>
            <para>Each message counts towards ONE of;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/></item>
            </list>
            </para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/> + <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> is the number of definite non-updates.</para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> > 0 indicates that a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may be worth trying to get any pending updates from the server (which should convert all the notreflects to expunged or reflects).</para>
            <para>Note that after a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> you should get the summary again using <see cref="M:work.bacome.imapclient.cStoreFeedback.Summary"/> or <see cref="M:work.bacome.imapclient.cUIDStoreFeedback.Summary"/></para>
            <para><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/> > 0 indicates that a blind store was done so there isn't enough information to say if the store happened or not.</para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount">
            <summary>The count where an IMAP FETCH for the message was received during the command execution and the message wasn't mentioned in the RFC 7162 MODIFIED response (=> the message was _likely_ to have been updated by the store).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount">
            <summary>The count where the message was mentioned in the RFC 7162 MODIFIED response (=> _NOT_ updated by the store).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount">
            <summary>The count where the message cache indicates that the message is expunged.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount">
            <summary>The count where the internal message cache item isn't known or the internal message cache item does not contain the flags.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount">
            <summary>The count where the flags in the internal message cache reflect the store operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount">
            <summary>The count where the flags in the internal message cache do not reflect the store operation.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyOKCount">
            <summary>Gets the count of messages that were likely to have been updated by the store.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyFailedCount">
            <summary>Gets the count of messages that most likely were NOT updated by the store.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyWorthPolling">
            <summary>Gets the count of messages for which doing a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may increase our knowledge of what happened.</summary>
        </member>
        <member name="M:work.bacome.imapclient.sStoreFeedbackSummary.ToString">
            <summary>Returns a string that represents the summary.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedbackItem">
            <summary>
            Contains feedback on one message in a UID store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cUIDStoreFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cUIDStoreFeedbackItem.UID">
            <summary>The UID that this feedback relates to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cUIDStoreFeedbackItem.Handle">
            <summary>The internal message cache item that this feedback relates to, if known. May be <see langword="null"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedbackItem.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedback">
            <summary>
            Contains feedback on a UID store operation.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback. Note that this may return a different value after a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> .
            </summary>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cUIDStoreFeedback.Item(System.Int32)">
            <summary>
            Gets one item of feedback.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cUIDStoreFeedback.Count">
            <summary>Gets the number of items of feedback in the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.GetEnumerator">
            <summary>Returns an enumerator that iterates through the items of feedback.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cListFlags">
            <summary>
            A set of IMAP mailbox flags.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.support.cListFlags.ToString">
            <summary>Returns a string that represents the set.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.iMailboxHandle">
            <summary>
            Represents a mailbox in the internal mailbox cache.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.Cache">
            <summary>Gets the cache that this mailbox handle belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.MailboxName">
            <summary>Gets the mailbox name associated with the handle, may be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.Exists">
            <summary>Indicates if the referenced mailbox on the server exists.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.ListFlags">
            <summary>Gets an object that contains the flags returned by the IMAP LIST command.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.LSubFlags">
            <summary>Gets an object that contains the flags returned by the IMAP LSUB command.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.MailboxStatus">
            <summary>Gets an object that contains the data returned by the IMAP STATUS command.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.SelectedProperties">
            <summary>Gets an object that contains data that the server sends when a mailbox is in the process of being selected.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cBinarySizes">
            <summary>
            A mapping from a message part that can be fetched using the BINARY (RFC 3516) command to the decoded size in bytes of that part.
            </summary>
            <remarks>
            Using the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> or <see cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/> methods may create values in this map.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBinarySizes.ToString">
            <summary>Returns a string that represents the map.</summary>
        </member>
        <member name="M:work.bacome.imapclient.support.cBinarySizes.op_Addition(work.bacome.imapclient.support.cBinarySizes,work.bacome.imapclient.support.cBinarySizes)">
            <summary>
            Combine two maps.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.iMessageHandle">
            <summary>
            Represents a message in the internal message cache.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Cache">
            <summary>Gets the cache that this message handle belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.CacheSequence">
            <summary>Gets the sequence of this message handle in the cache.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Expunged">
            <summary>Indicates if the server has informed the client that the message has been expunged.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Attributes">
            <summary>Gets the message attributes that the cache currently contains for this message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Body">
            <summary>Gets the IMAP BODY data - i.e. the <see cref="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure"/> data without the extension data (see <see cref="T:work.bacome.imapclient.cBodyPartExtensionData"/>) - if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure">
            <summary>Gets the IMAP BODYSTRUCTURE data if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Envelope">
            <summary>Gets the IMAP ENVELOPE data if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Flags">
            <summary>Gets the IMAP FLAGS data if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.ModSeq">
            <summary>Gets the RFC 7162 modification sequence if it is cached. This may be zero if the mailbox does not support CONDSTORE.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Received">
            <summary>Gets the IMAP INTERNALDATE data if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Size">
            <summary>Gets the IMAP RFC822.SIZE data if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.UID">
            <summary>Gets the UID of the message if it is cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.HeaderFields">
            <summary>Gets the set of header fields that are cached for the message, may be <see langword="null"/> if none have been cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes">
            <summary>Gets the binary part sizes that are cached for the message, may be <see langword="null"/> if none have been cached.</summary>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Contains(work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines if all the specified items are cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.ContainsNone(work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines if none of the specified items are cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Missing(work.bacome.imapclient.cCacheItems)">
            <summary>
            Returns those items from the specified items that are not cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cBytes">
            <summary>
            A read-only collection of bytes.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNetworkSendEventArgs"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBytes.ToString">
            <summary>Returns a string that represents the collection.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cBytesLine">
            <summary>
            Represents a line of bytes received from a server.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.cBytesLines"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBytesLine.ToString">
            <summary>Returns a string that represents the line.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cBytesLines">
            <summary>
            Represents a response received from a server.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNetworkReceiveEventArgs"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBytesLines.ToString">
            <summary>Returns a string that represents the response.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cCharset">
            <summary>
            Represents a set of characters that are valid in a parsing context. Each <see langword="static"/> member defines a different set of characters. Intended for internal use.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.support.cCharset.Contains(System.Byte)">
            <summary>
            Determines if the specified byte is contained in the set of characters.
            </summary>
            <param name="pByte"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.cCharset.Contains(System.Char)">
            <summary>
            Determines if the specified char is contained in the set of characters.
            </summary>
            <param name="pChar"></param>
            <returns></returns>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Alpha">
            <summary>A-Z, a-z</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Digit">
            <summary>0-9</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AlphaNumeric">
            <summary>A-Z, 0-9, a-z</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Scheme">
            <summary>RFC 3986 scheme</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailbox">
            <summary>
            Provides an API that allows interaction with an IMAP mailbox.
            </summary>
            <remarks>
            <para>Instances are only valid whilst the containing <see cref="T:work.bacome.imapclient.cIMAPClient"/> remains connected. Reconnecting the client will not bring mailbox instances back to life.</para>
            <para>
            To interact with messages in a mailbox, IMAP requires that the mailbox be selected - use the <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> method of this class to select the mailbox associated with the instance.
            Each IMAP connection (and hence each <see cref="T:work.bacome.imapclient.cIMAPClient"/> instance) can have at most one selected mailbox – selecting a mailbox automatically un-selects the previously selected mailbox.
            An instance of this class may be selected and un-selected many times in its lifetime.
            Each time an instance is selected a new ‘select session’ is started.
            <see cref="T:work.bacome.imapclient.cMessage"/> instances are valid only within a 'select session'.
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Inbox"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMailbox.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailbox.Handle">
            <summary>The internal mailbox cache item that this instance is attached to.</summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a property value change that affects the mailbox associated with this instance.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.MessageDelivery">
            <summary>
            Fired when the server notifies the client that messages have arrived in the mailbox associated with this instance.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Path">
            <summary>
            Gets the mailbox name including the full hierarchy.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Delimiter">
            <summary>
            Gets the hierarchy delimiter used in <see cref="P:work.bacome.imapclient.cMailbox.Path"/>. May be <see langword="null"/> if there is no hierarchy.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ParentPath">
            <summary>
            Gets the path of the parent mailbox. Will be <see langword="null"/> if there is no parent mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Name">
            <summary>
            Gets the name of the mailbox. As compared to <see cref="P:work.bacome.imapclient.cMailbox.Path"/> this does not include the hierarchy.
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsInbox">
            <summary>
            Determines if this instance represents the INBOX.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Exists">
            <summary>
            Indicates if the mailbox exists on the server.
            </summary>
            <remarks>
            Subscribed mailboxes and levels in the mailbox hierarchy do not necessarily exist. Mailboxes can also be deleted.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanHaveChildren">
            <summary>
            Indicates if the mailbox can definitely not contain child mailboxes. May be <see langword="null"/>.
            </summary>
            <remarks>
            Reflects the IMAP \Noinferiors flag. May be <see langword="null"/> if the mailbox associated with the instance does not exist.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanSelect">
            <summary>
            Indicates if the mailbox can be selected.
            </summary>
            <remarks>
            Reflects the IMAP \Noselect flag.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsMarked">
            <summary>
            Indicates if the mailbox has been marked "interesting" by the server. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the server didn't say either way. Reflects the IMAP \Marked and \Unmarked flags.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsRemote">
            <summary>
            Indicates if the mailbox is a remote mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> will be returned under the following set of circumstances;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/> is set to <see langword="true"/>, and</item>
            <item><see cref="P:work.bacome.imapclient.cCapabilities.MailboxReferrals"/> can be used, and</item>
            <item><see cref="P:work.bacome.imapclient.cCapabilities.ListExtended"/> cannot be used.</item>
            </list>
            Under these circumstances it is not possible to reliably determine if the mailbox is remote or not.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasChildren">
            <summary>
            Indicates if the mailbox has child mailboxes. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the server didn't say either way, 
            which may be because the <see cref="F:work.bacome.imapclient.fMailboxCacheData.children"/> flags are not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>)
            or maybe because the server doesn't support <see cref="P:work.bacome.imapclient.cCapabilities.Children"/>
            .
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsAll">
            <summary>
            Indicates if the mailbox contains all messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \All flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsArchive">
            <summary>
            Indicates if the mailbox contains the message archive. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Archive flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsDrafts">
            <summary>
            Indicates if the mailbox contains message drafts. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Drafts flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsFlagged">
            <summary>
            Indicates if the mailbox contains flagged messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Flagged flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsJunk">
            <summary>
            Indicates if the mailbox contains junk mail. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Junk flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsSent">
            <summary>
            Indicates if the mailbox contains sent messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Sent flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsTrash">
            <summary>
            Indicates if the mailbox contains deleted or to-be deleted messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/> flags are not being requested; see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            Refects the RFC 6154 \Trash flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSubscribed">
            <summary>
            Indicates if this mailbox is subscribed-to or not.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageCount">
            <summary>
            Gets the number of messages in the mailbox.
            May be <see langword="null"/>.
            This property always has an up-to-date value when the mailbox is selected.
            </summary>
            <remarks>
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheData.messagecount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.RecentCount">
            <summary>
            Gets the number of messages in the mailbox.
            May be <see langword="null"/>.
            This property always has an up-to-date value when the mailbox is selected.
            </summary>
            <remarks>
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheData.recentcount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNext">
            <summary>
            Gets the predicted next UID for the mailbox. 
            May be <see langword="null"/> or zero.
            This property always has a value when the mailbox is selected, but it may not be up-to-date.
            </summary>
            <remarks>
            <para><see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidnext"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.</para>
            <para>When the mailbox is selected, zero indicates that the value is unknown.</para>
            <para>While the mailbox is selected the value of this property may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount"/> for the potential inaccuracy in this property value.</para>
            <para>IMAP does not mandate that the server keep the client updated with this value while a mailbox is selected but it also disallows retrieving the value for a mailbox while the mailbox is selected.</para>
            <para>While the mailbox is selected the library internally maintains the value of this property by monitoring IMAP FETCH responses from the server, but these responses have to be explicitly requested.</para>
            <para>If it is important to you that the value of this property be accurate when the mailbox is selected then you must fetch the <see cref="F:work.bacome.imapclient.fCacheAttributes.uid"/> for new messages as they arrive.</para>
            </remarks>
            <seealso cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount">
            <summary>
            Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/> is.
            </summary>
            <remarks>
            This is the count of messages that have arrived since the mailbox was selected for which the library has not seen the value of the UID.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDValidity">
            <summary>
            Gets the UIDValidity of the mailbox.
            May be <see langword="null"/> or zero.
            This property always has a value when the mailbox is selected.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox does not support UIDs or that the <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.
            Zero indicates that the server does not support UIDs.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.UIDNotSticky"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenCount">
            <summary>
            Gets the number of unseen messages in the mailbox.
            May be <see langword="null"/>.
            This property always has a value when the mailbox is selected, but it may not be up-to-date.
            </summary>
            <remarks>
            <para><see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheData.unseencount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.</para>
            <para>While the mailbox is selected the value of this property may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount"/> for the potential inaccuracy in this property value.</para>
            <para>IMAP does not provide a mechanism for getting this value while a mailbox is selected.</para>
            <para>While the mailbox is selected the library internally maintains the value of this property by monitoring IMAP FETCH responses from the server, but the property value has to be explicitly initialised and the FETCH responses have to be explicitly requested.</para>
            <para>If it is important to you that the value of this property be accurate when the mailbox is selected then you must initialise the value by using <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/> and also fetch the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> for new messages as they arrive.</para>
            </remarks>
            <seealso cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="T:work.bacome.imapclient.cCacheItems"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount">
            <summary>
            Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> is.
            </summary>
            <remarks>
            This is the number of messages for which the library is unsure of the value of the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HighestModSeq">
            <summary>
            Gets the modification sequence number for the mailbox (see RFC 7162).
            May be <see langword="null"/> or zero.
            When the mailbox is selected this property will always have a value.
            </summary>
            <remarks>
            <para><see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or that the value was not sent when requested.</para>
            <para>Zero indicates that <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> cannot be used or the mailbox associated with this instance does not support modification sequence numbers.</para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelected">
            <summary>
            Indicates if the mailbox associated with this instance has been selected at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedForUpdate">
            <summary>
            Indicates if the mailbox associated with this instance has been selected for update at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedReadOnly">
            <summary>
            Indicates if the mailbox associated with this instance has been selected read-only at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNotSticky">
            <summary>
            Indicates if the mailbox does not have persistent UIDs (see RFC 4315). May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox associated with this instance has never been selected on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageFlags">
            <summary>
            Gets the defined flags in the mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox associated with this instance has never been selected on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags">
            <summary>
            Gets the flags that the client can change permanently on messages in the mailbox when it is selected for update. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox associated with this instance has never been selected for update on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags">
            <summary>
            Gets the flags that the client can change permanently on messages in the mailbox when it is selected readonly. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox associated with this instance has never been selected read-only on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelected">
            <summary>
            Indicates if the mailbox associated with this instance is the currently selected mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelectedForUpdate">
            <summary>
            Indicates if the mailbox associated with this instance is currently selected for update.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsAccessReadOnly">
            <summary>
            Indicates if the mailbox associated with this instance is currently selected, but can't be modified.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailbox's child mailboxes.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the child mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailbox's child mailboxes.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the child mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailbox's subscribed child mailboxes. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to request when getting the child mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailbox's subscribed child mailboxes. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to request when getting the child mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a child mailbox of the mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a child mailbox of the mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribe">
            <summary>
            Subscribes to the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribeAsync">
            <summary>
            Asynchronously subscribes to the mailbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Unsubscribe">
            <summary>
            Unsubscribes from the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UnsubscribeAsync">
            <summary>
            Asynchronously unsubscribes from the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Rename(System.String)">
            <summary>
            Changes the name of the mailbox.
            </summary>
            <remarks>
            This method renames the mailbox inside its containing mailbox - it just changes the last part of the path hierarchy.
            </remarks>
            <param name="pName">The new mailbox name.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RenameAsync(System.String)">
            <summary>
            Ansynchronously changes the name of the mailbox.
            </summary>
            <remarks>
            This method renames the mailbox inside its containing mailbox - it just changes the last part of the path hierarchy.
            </remarks>
            <param name="pName">The new mailbox name.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Delete">
            <summary>
            Deletes the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.DeleteAsync">
            <summary>
            Asynchronously deletes the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)">
            <summary>
            Selects the mailbox.
            </summary>
            <param name="pForUpdate">Indicates if the mailbox should be selected for update or not</param>
            <remarks>
            Selecting a mailbox un-selects the previously selected mailbox (if there was one).
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SelectAsync(System.Boolean)">
            <summary>
            Asynchronously selects the mailbox.
            Selecting a mailbox un-selects the previously selected mailbox (if there was one).
            </summary>
            <param name="pForUpdate">Indicates if the mailbox should be selected for update or not</param>
            <returns></returns>
            <remarks>
            Selecting a mailbox un-selects the previously selected mailbox (if there was one).
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)">
            <summary>
            Expunges messages marked with the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag from the mailbox. The mailbox must be selected.
            </summary>
            <param name="pAndUnselect">Indicates if the mailbox should also be un-selected.</param>
            <remarks>
            Setting <paramref name="pAndUnselect"/> to <see langword="true"/> also un-selects the mailbox; this reduces the amount of network activity associated with the expunge.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMessage.Deleted"/>
            <seealso cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ExpungeAsync(System.Boolean)">
            <summary>
            Asynchronously expunges messages marked with the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag from the mailbox. The mailbox must be selected.
            </summary>
            <param name="pAndUnselect">Indicates if the mailbox should also be un-selected.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)" select="remarks"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.Deleted"/>
            <seealso cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.StoreAsync(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            Gets a list of messages contained in the mailbox from the server. The mailbox must be selected.
            </summary>
            <param name="pFilter">The filter to use to restrict the set of messages returned.</param>
            <param name="pSort">The sort to use to order the set of messages returned. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/>) will be used.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            Asynchronously gets a list of messages contained in the mailbox from the server. The mailbox must be selected.
            </summary>
            <param name="pFilter">The filter to use to restrict the set of messages returned.</param>
            <param name="pSort">The sort to use to order the set of messages returned. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/>) will be used.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Creates message instances from internal message cache items. (Useful when handling the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event.)
            </summary>
            <param name="pHandles"></param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously creates message instances from internal message cache items. (Useful when handling the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event.)
            </summary>
            <param name="pHandles"></param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages. If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCount">
            <summary>
            Initialises the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>. The mailbox must be selected.
            </summary>
            <returns>A list of internal message cache items for messages in the mailbox that do not have the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag.</returns>
            <remarks>
            See <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> to understand why and when you might want to do this. 
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCountAsync">
            <summary>
            Asynchronously initialises the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>. The mailbox must be selected.
            </summary>
            <returns>A list of internal message cache items for messages in the mailbox that do not have the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag.</returns>
            <remarks>
            See <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> to understand why and when you might want to do this. 
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>
            Gets a <see cref="T:work.bacome.imapclient.cMessage"/> instance from a <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessageAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>
            Asynchronously gets a <see cref="T:work.bacome.imapclient.cMessage"/> instance from a <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Gets a list of <see cref="T:work.bacome.imapclient.cMessage"/> instances from a set of <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUIDs">.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously gets a list of <see cref="T:work.bacome.imapclient.cMessage"/> instances from a set of <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Refreshes the internal mailbox cache data for this mailbox.
            </summary>
            <param name="pDataSets">The sets of data to refresh.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.FetchAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously refreshes the internal mailbox cache data for this mailbox.
            </summary>
            <param name="pDataSets">The sets of data to refresh.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            Copies a set of messages to the mailbox associated with this instance.
            The messages must be in the currently selected mailbox.
            </summary>
            <param name="pMessages"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the pairs of UIDs for the copied messages; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            Asynchronously copies a set of messages to the mailbox associated with this instance.
            The messages must be in the currently selected mailbox.
            </summary>
            <param name="pMessages"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the pairs of UIDs for the copied messages; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches a section of a message into a stream. 
            The mailbox must be selected.
            Will throw if the <paramref name="pUID"/> does not exist in the mailbox.
            </summary>
            <param name="pUID"></param>
            <param name="pSection"></param>
            <param name="pDecoding">
            Specifies the decoding that should be applied to the fetched data.
            If <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then unless this is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required.
            </param>
            <param name="pStream"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetchAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches a section of a message into a stream. 
            The mailbox must be selected.
            Will throw if the <paramref name="pUID"/> does not exist in the mailbox.
            </summary>
            <param name="pUID"></param>
            <param name="pSection"></param>
            <param name="pDecoding">
            Specifies the decoding that should be applied to the fetched data.
            If <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then unless this is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required.
            </param>
            <param name="pStream"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a message. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            If the message has been modified since the specified modseq the server should fail the store.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a message. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            If the message has been modified since the specified modseq the server should fail the store.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a set of messages. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            Individual messages should have their stores failed by the server if they have been modified since the specified modseq.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a set of messages. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            Individual messages should have their stores failed by the server if they have been modified since the specified modseq.
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            Copies a message in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies a message in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            Copies messages in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the pairs of UIDs for the copied messages, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies messages in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)" select="returns"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.iMailboxParent">
            <summary>
            Represents an instance that has child mailboxes.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNamespace"/>
            <seealso cref="T:work.bacome.imapclient.cMailbox"/>
        </member>
        <member name="P:work.bacome.imapclient.iMailboxParent.Delimiter">
            <summary>
            Gets the hierarchy delimiter. May be <see langword="null"/> if there is no hierarchy.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailboxes at the top level of hierarchy.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailboxes at the top level of hierarchy.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the subscribed mailboxes. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the subscribed mailboxes. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a child mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxParent.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a child mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.fMessageProperties">
            <summary>
            Specifies a set of <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailboxName">
            <summary>
            Represents an IMAP mailbox name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Path">
            <summary>
            <para>The mailbox name including the full hierarchy.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in <see cref="F:work.bacome.imapclient.cMailboxName.Path"/>.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.#ctor(System.String,System.Nullable{System.Char})">
            <summary>
            Initialises an new instance. May throw if the parameters provided are not valid IMAP values.
            </summary>
            <param name="pPath"></param>
            <param name="pDelimiter"></param>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.ParentPath">
            <summary>
            Gets the path of the parent mailbox. Will be <see langword="null"/> if there is no parent mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.Name">
            <summary>
            Gets the name of the mailbox. As compared to <see cref="F:work.bacome.imapclient.cMailboxName.Path"/> this does not include the hierarchy.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.IsInbox">
            <summary>
            Determines if this instance's path is 'INBOX'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.CompareTo(work.bacome.imapclient.cMailboxName)">
            <summary>
            Compares this instance with the specified <see cref="T:work.bacome.imapclient.cMailboxName"/> object.
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.Equals(work.bacome.imapclient.cMailboxName)">
            <summary>
            Determines whether this instance and the specified object have the same value.
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have the same value.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.op_Equality(work.bacome.imapclient.cMailboxName,work.bacome.imapclient.cMailboxName)">
            <summary>
            Determines whether two instances have the same value.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.op_Inequality(work.bacome.imapclient.cMailboxName,work.bacome.imapclient.cMailboxName)">
            <summary>
            Determines whether two instances have different values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cAddress">
            <summary>
            Represents an email address.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cAddress.DisplayName">
            <summary>
            The display name for this address.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAddresses">
            <summary>
            A read-only collection of email addresses.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.From"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.Sender"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.ReplyTo"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.To"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.CC"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.BCC"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.From"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.Sender"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.ReplyTo"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.To"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.CC"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.BCC"/>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.SortString">
            <summary>
            The RFC 5256 sort string for the addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.DisplaySortString">
            <summary>
            The RFC 5957 display sort string for the addresses.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAddresses.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cEmailAddress">
            <summary>
            Represents an individual email address.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.Address">
            <summary>
            The raw address (local-part@domain-name), with an un-decoded domain-name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.DisplayAddress">
            <summary>
            The display version of the address (local-part@domain-name), with any punycode (RFC 3492) domain-name decoded.
            Note: this currently contains the same value as the <see cref="F:work.bacome.imapclient.cEmailAddress.Address"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cEmailAddress.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cGroupAddress">
            <summary>
            Represents a named group of email addresses.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cGroupAddress.Addresses">
            <summary>
            The collection of group members (may be empty).
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cGroupAddress.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cAttachment">
            <summary>
            Provides an API that allows interaction with an IMAP attachment.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Handle">
            <summary>The message cache item that this instance is attached to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Part">
            <summary>The message body part that this attachment refers to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Type">
            <summary>
            Gets the MIME type of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.TypeCode">
            <summary>
            Gets the MIME type of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.SubType">
            <summary>
            Gets the MIME subtype of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Parameters">
            <summary>
            Gets the MIME type parameters of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentId">
            <summary>
            Gets the MIME content-id of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Description">
            <summary>
            Gets the MIME content description of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentTransferEncoding">
            <summary>
            Gets the MIME content transfer encoding of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.DecodingRequired">
            <summary>
            Gets the MIME content transfer encoding of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.PartSizeInBytes">
            <summary>
            Gets the size in bytes of the encoded attachement.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.MD5">
            <summary>
            Gets the MD5 value of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.FileName">
            <summary>
            Gets the suggested filename of the attachment if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.CreationDate">
            <summary>
            Gets the creation date of the attachment if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ModificationDate">
            <summary>
            Gets the modification date of the attachment if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ReadDate">
            <summary>
            Gets the last read date of the attachment if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ApproximateFileSizeInBytes">
            <summary>
            Gets the approximate size in bytes of the attachment if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Languages">
            <summary>
            Gets the language(s) of the attachment if provided.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes">
            <summary>
            Gets the number of bytes that will have to come over the network to save this attachment.
            This may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/>.
            </summary>
            <returns></returns>
            <remarks>
            This may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/> if the part needs decoding (see <see cref="P:work.bacome.imapclient.cAttachment.DecodingRequired"/>) and the server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/>.
            The size may have to be fetched from the server. 
            Once fetched the size will be cached in the internal message cache.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytesAsync">
            <summary>
            Asynchronously gets the number of bytes that will have to come over the network to save this attachment.
            This may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/>.
            </summary>
            <returns></returns>
            <remarks>
            This may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/> if the part needs decoding (see <see cref="P:work.bacome.imapclient.cAttachment.DecodingRequired"/>) and the server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/>.
            The size may have to be fetched from the server. 
            Once fetched the size will be cached in the internal message cache.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Saves the attachment to the specified path.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAsAsync(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously saves the attachment to the specified path.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.eBodyPartTypeCode">
            <summary>
            The RFC 2045 MIME type of a message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eDispositionTypeCode">
            <summary>
            The RFC 2183 disposition type of a message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eTextBodyPartSubTypeCode">
            <summary>
            The RFC 2045 MIME subtype of a text message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eMultiPartBodySubTypeCode">
            <summary>
            The RFC 2045 MIME subtype of a multipart message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeType">
            <summary>
            Contains named MIME type constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeSubType">
            <summary>
            Contains named MIME subtype constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPart">
            <summary>
            Represents a message part.
            </summary>
            <remarks>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cMultiPartBody"/></item>
            <item><see cref="T:work.bacome.imapclient.cSinglePartBody"/></item>
            <item><see cref="T:work.bacome.imapclient.cMessageBodyPart"/></item>
            <item><see cref="T:work.bacome.imapclient.cTextBodyPart"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Type">
            <summary>
            The MIME type of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.SubType">
            <summary>
            The MIME subtype of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Section">
            <summary>
            The IMAP section identifier of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.TypeCode">
            <summary>
            The MIME type of the part in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValue">
            <summary>
            <para>Represents an additional extension data element.</para>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionString"/></item>
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionNumber"/></item>
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionValues"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionString">
            <summary>
            A string extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionNumber">
            <summary>
            A numeric extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValues">
            <summary>
            A collection of extension data elements
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyParts">
            <summary>
            A collection of message parts.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionData">
            <summary>
            IMAP bodystructure extension data.
            </summary>
            <remarks>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cMultiPartExtensionData"/></item>
            <item><see cref="T:work.bacome.imapclient.cSinglePartExtensionData"/></item>
            </list>
            </para>
            <para>See </para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a multipart part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartExtensionData.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a single part message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartBody">
            <summary>
            Represents a multipart message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.Parts">
            <summary>
            The contained parts.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartDisposition">
            <summary>
            RFC 2183 disposition data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Type">
            <summary>
            The disposition type in text form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.TypeCode">
            <summary>
            The disposition type in code form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Parameters">
            <summary>
            The disposition parameters.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.FileName">
            <summary>
            The suggested filename if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.CreationDate">
            <summary>
            The creation date if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ModificationDate">
            <summary>
            The modification date if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ReadDate">
            <summary>
            The last read date if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.Size">
            <summary>
            The approximate size in bytes if provided. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartBody">
            <summary>
            Represents a single part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentId">
            <summary>
            The MIME content-id of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Description">
            <summary>
            The MIME content description of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentTransferEncoding">
            <summary>
            The MIME content transfer encoding of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired">
            <summary>
            The MIME content transfer encoding of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes">
            <summary>
            The size in bytes of the encoded part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageBodyPart">
            <summary>
            Represents a message part that contains a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.Envelope">
            <summary>
            The IMAP envelope of the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure">
            <summary>
            The IMAP bodystructure information for the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.SizeInLines">
            <summary>
            The size in text lines of the encapsulated message.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessageBodyPart.Body">
            <summary>
            The IMAP body or bodystructure information for the encapsulated message, whichever is available.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cTextBodyPart">
            <summary>
            Represents a message part that contains text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SizeInLines">
            <summary>
            The size in text lines of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cTextBodyPart.Charset">
            <summary>
            The character set of the text data.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameter">
            <summary>
            <para>A message part parameter.</para>
            <para>Parameters are attribute value pairs.</para>
            <para>The value may have a language associated with it.</para>
            <para>See RFC 2184.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.Name">
            <summary>
            The name of the attribute.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.RawValue">
            <summary>
            The un-decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.StringValue">
            <summary>
            The decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.LanguageTag">
            <summary>
            The language tag of the value (if any).
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.UIntValue">
            <summary>
            Parse the un-decoded value as a UInt.
            If the value is not a valid UInt, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.DateTimeValue">
            <summary>
            Parse the un-decoded value as an RFC 822 date and time.
            If the value is not a valid RFC 822 date and time, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameters">
            <summary>
            Message part parameters.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameters.First(System.String)">
            <summary>
            Returns the first parameter with the specified attribute name.
            </summary>
            <param name="pName">The attribute name.</param>
            <returns>The parameter if there is at least one with a matching name, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cEnvelope">
            <summary>
            IMAP message envelope data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sent">
            <summary>The message sent date. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Subject">
            <summary>The message subject. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BaseSubject">
            <summary>
            The message base subject. May be <see langword="null"/>.
            </summary>
            <remarks>
            The base subject is defined RFC 5256 and is the subject with the RE: FW: etc artifacts removed.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.From">
            <summary>The message 'from' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sender">
            <summary>The message sender address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.ReplyTo">
            <summary>The message repy-to address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.To">
            <summary>The message 'to' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.CC">
            <summary>The message CC address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BCC">
            <summary>The message BCC address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.InReplyTo">
            <summary>The normalised (delimiters, quoting, comments and white space removed) in-reply-to message-ids. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.MessageId">
            <summary>The normalised (delimiters, quoting, comments and white space removed) message-id of the message. May be <see langword="null"/>.</summary> 
        </member>
        <member name="M:work.bacome.imapclient.cEnvelope.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilter">
            <summary>
            Represents a filter that can be passed to the server to filter the set of messages in a mailbox.
            Only the messages that 'pass through' the filter are returned to the client.
            Use the <see langword="static"/> members and operators of this class to create and combine filters. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.All">
            <summary>A filter that passes all messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.MSN">
            <summary>Use this member to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.UID">
            <summary>Use this member to generate UID filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.First">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Last">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Answered">
            <summary>A filter that passes only answered messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Flagged">
            <summary>A filter that passes only flagged messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Deleted">
            <summary>A filter that passes only deleted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Seen">
            <summary>A filter that passes only seen messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Draft">
            <summary>A filter that passes only draft messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Recent">
            <summary>A filter that passes only recent messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Forwarded">
            <summary>A filter that passes only forwarded messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.SubmitPending">
            <summary>A filter that passes only submitpending messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Submitted">
            <summary>A filter that passes only submitted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.BCC">
            <summary>Use this member to generate filters on the content of the message's BCC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Body">
            <summary>Use this member to generate filters on the content of the message's 'body' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.CC">
            <summary>Use this member to generate filters on the content of the message's CC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.From">
            <summary>Use this member to generate filters on the content of the message's 'from' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Subject">
            <summary>Use this member to generate filters on the content of the message's 'subject' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Text">
            <summary>Use this member to generate filters on the content of the message's 'text' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.To">
            <summary>Use this member to generate filters on the content of the message's 'to' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Received">
            <summary>Use this member to generate filters on the message's internal date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Sent">
            <summary>Use this member to generate filters on the message's sent date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Size">
            <summary>Use this member to generate filters on the message's size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Importance">
            <summary>Use this member to generate filters on the message's importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.False">
            <summary>A filter that passes nothing through.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])">
            <summary>
            Returns a filter that passes through only messages with the specified flags.
            </summary>
            <param name="pFlags">The flags that the message should have set.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)">
            <summary>
            Returns a filter that passes through only messages with the specified flags.
            </summary>
            <param name="pFlags">The flags that the message should have set.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)">
            <summary>
            Returns a filter that passes through messages with the specified content in the specified header field.
            </summary>
            <param name="pHeaderField">The header field name. (Header field names are case insensitive.)</param>
            <param name="pContains"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HasHeaderField(System.String)">
            <summary>
            Returns a filter that passes through messages with the specified header field.
            </summary>
            <param name="pHeaderField">The header field name. (Header field names are case insensitive.)</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseAnd(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical AND of the two specified filters.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseOr(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical OR of the two specified filters.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_LogicalNot(work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical NOT of the specified filter.
            </summary>
            <param name="pNot"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNOffset">
            <summary>
            Specifies an offset from a specific message or from the first message in the mailbox or from the last message in the mailbox.
            Use <see cref="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)"/> or the <see langword="static"/> members <see cref="F:work.bacome.imapclient.cFilter.First"/> or <see cref="F:work.bacome.imapclient.cFilter.Last"/> to generate instances of this class.
            Use instances of this class with the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> <see langword="static"/> member to generate message sequence number filters.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSNOffset.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterEnd">
            <summary>
            Represents either the first message in the mailbox or the last message in the mailbox.
            Use the <see cref="F:work.bacome.imapclient.cFilter.First"/> and <see cref="F:work.bacome.imapclient.cFilter.Last"/> <see langword="static"/> instances of this class to generate offsets to use with the <see langword="static"/> <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)">
            <summary>
            Generates an offset from the end of the mailbox that the instance represents.
            </summary>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSN">
            <summary>
            The operators defined on this class generate message sequence number filters.
            Use the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> <see langword="static"/> instance of this class to do this.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes through messages with a sequence number less than the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage">The message to get the sequence number from.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes through messages with a sequence number greater than the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage">The message to get the sequence number from.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes through messages with a sequence number less than the specified sequence number offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset">The sequence number offset.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes through messages with a sequence number greater than the specified sequence number offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset">The sequence number offset.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes through messages with a sequence number less than or equal to the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage">The message to get the sequence number from.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes through messages with a sequence number greater than or equal to the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage">The message to get the sequence number from.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes through messages with a sequence number less than or equal to the specified sequence number offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes through messages with a sequence number greater than or equal to the specified sequence number offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUID">
            <summary>
            The operators defined on this class generate message UID filters. Use the <see cref="F:work.bacome.imapclient.cFilter.UID"/> <see langword="static"/> instance of this class to do this.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_LessThan(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID less than the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_GreaterThan(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID greater than the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_LessThanOrEqual(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID less than or equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID greater than or equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_Equality(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_Inequality(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes through messages with a UID different to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPart">
            <summary>
            Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method on the following <see langword="static"/> instances of this class to generate a message content filters;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cFilter.BCC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Body"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.CC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.From"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Subject"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Text"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.To"/></item>
            </list>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterPart.Contains(System.String)">
            <summary>
            Generates an object that represents a filter on message content.
            </summary>
            <param name="pContains"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDate">
            <summary>
            The operators defined on this class generate message date filters.
            Use the <see langword="static"/> instances of this class, <see cref="F:work.bacome.imapclient.cFilter.Received"/> and <see cref="F:work.bacome.imapclient.cFilter.Sent"/>, to do this.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_LessThan(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date less than the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_GreaterThan(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date greater than the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_Equality(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_Inequality(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date different to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date greater than or equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_LessThanOrEqual(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes through messages with a date less than or equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSize">
            <summary>
            The operators defined on this class generate message size filters.
            Use the <see cref="F:work.bacome.imapclient.cFilter.Size"/> <see langword="static"/> instance of this class to do this.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_LessThan(work.bacome.imapclient.cFilterSize,System.Int32)">
            <summary>
            Returns a filter that passes through messages with a size less than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_GreaterThan(work.bacome.imapclient.cFilterSize,System.Int32)">
            <summary>
            Returns a filter that passes through messages with a size greater than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_LessThan(work.bacome.imapclient.cFilterSize,System.UInt32)">
            <summary>
            Returns a filter that passes through messages with a size less than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_GreaterThan(work.bacome.imapclient.cFilterSize,System.UInt32)">
            <summary>
            Returns a filter that passes through messages with a size greater than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterImportance">
            <summary>
            The operators defined on this class generate message importance filters.
            Use the <see cref="F:work.bacome.imapclient.cFilter.Importance"/> <see langword="static"/> instance of this class to do this.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterImportance.op_Equality(work.bacome.imapclient.cFilterImportance,work.bacome.imapclient.eImportance)">
            <summary>
            Returns a filter that passes through messages with an importance equal to the specified importance.
            </summary>
            <param name="pImportance"><see cref="F:work.bacome.imapclient.cFilter.Importance"/></param>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterImportance.op_Inequality(work.bacome.imapclient.cFilterImportance,work.bacome.imapclient.eImportance)">
            <summary>
            Returns a filter that passes through messages with an importance different to the specified importance.
            </summary>
            <param name="pImportance"><see cref="F:work.bacome.imapclient.cFilter.Importance"/></param>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cMessage">
            <summary>
            Provides an API that allows interaction with an IMAP message.
            </summary>
            <remarks>
            Instances are only valid whilst the containing mailbox remains selected. 
            Re-selecting a mailbox will not bring the message instances back to life.
            Instances are only valid whilst the containing mailbox has the same UIDValidity.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessage.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessage.Handle">
            <summary>The internal message cache item that this instance is attached to.</summary>
        </member>
        <member name="E:work.bacome.imapclient.cMessage.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a property value change that affects the message associated with this instance.
            Most properties of an IMAP message can never change.
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Expunged">
            <summary>
            Indicates whether the server has told us that the message has been expunged.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Envelope">
            <summary>
            Gets the IMAP envelope data of the message.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sent">
            <summary>
            Gets the sent date of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Subject">
            <summary>
            Gets the subject of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BaseSubject">
            <summary>
            Gets the base subject of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            The base subject is defined RFC 5256 and is the subject with the RE: FW: etc artifacts removed.
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.From">
            <summary>
            Gets the 'from' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sender">
            <summary>
            Gets the 'sender' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ReplyTo">
            <summary>
            Gets the 'reply-to' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.To">
            <summary>
            Gets the 'to' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.CC">
            <summary>
            Gets the 'CC' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BCC">
            <summary>
            Gets the 'BCC' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.InReplyTo">
            <summary>
            Gets the normalised 'in-reply-to' message-ids of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.MessageId">
            <summary>
            Gets the normalised message-id of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.envelope"/> data of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flags">
            <summary>
            Gets the flags set for the message.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Answered">
            <summary>
            Determines if the <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetAnswered">
            <summary>Adds the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag to the message's flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flagged">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlagName.Flagged"/> flag of the message.
            </summary>
            <remarks>
            When getting the value, if the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Deleted">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag of the message.
            </summary>
            <remarks>
            When getting the value, if the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Seen">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag of the message.
            </summary>
            <remarks>
            When getting the value, if the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Draft">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlagName.Draft"/> flag of the message.
            </summary>
            <remarks>
            When getting the value, if the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Recent">
            <summary>
            Determines if the <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> flag.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Forwarded">
            <summary>
            Determines if the <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetForwarded">
            <summary>Adds the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag to the message's flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.SubmitPending">
            <summary>
            Determines if the <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetSubmitPending">
            <summary>Adds the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag to the message's flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Submitted">
            <summary>
            Determines if the <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Submitted"/> flag.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Received">
            <summary>
            Gets the IMAP INTERNALDATE of the message.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.received"/> date of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Size">
            <summary>
            Gets the size of the entire message in bytes.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.size"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.UID">
            <summary>
            Gets the IMAP UID of the message.
            May be <see langword="null"/> if the server does not support unique identifiers.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.uid"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ModSeq">
            <summary>
            Gets the modification sequence number of the message.
            Will be 0 if the mailbox does not support CONDSTORE.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.modseq"/> for the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BodyStructure">
            <summary>
            Gets the IMAP BODYSTRUCTURE of the message.
            </summary>
            <remarks>
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Attachments">
            <summary>
            Gets the list of message attachments.
            The list may be empty.
            </summary>
            <remarks>
            The library defines an attachment as a message part with a disposition of ‘attachment’.
            If there are alternate versions of an attachment only one of the alternates is included in the list (the first one).
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.PlainTextSizeInBytes">
            <summary>
            Gets the size in bytes of the plain text parts of the message.
            May be zero.
            </summary>
            <remarks>
            The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.
            If there are alternate versions of a part only one of the alternates is used in calculating the size (the first one).
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.References">
            <summary>
            Gets the normalised message-ids from the references header field.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            May be <see langword="null"/> if there is no references header field or if the references header field can not be parsed by the library.
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/> header field of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Importance">
            <summary>
            Gets the importance value from the importance header field.
            May be <see langword="null"/>.
            </summary>
            <remarks>
            May be <see langword="null"/> if there is no importance header field or if the importance header field can not be parsed by the library.
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/> header field of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)">
            <summary>
            Ensures that the internal message cache contains the specified items for this message instance.
            The missing items will be fetched from the server.
            </summary>
            <param name="pItems">
            The items required in the cache.
            Note that <see cref="T:work.bacome.imapclient.cCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/> (so you can use values of those types as parameters to this method).
            </param>
            <returns>
            <see langword="true"/> if the fetch populated the cache with the requested items, <see langword="false"/> otherwise.
            <see langword="false"/> indicates that the message is expunged.
            </returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cCacheItems)">
            <summary>
            Ansynchronously ensures that the internal message cache contains the specified items for this message instance.
            The missing items will be fetched from the server.
            </summary>
            <param name="pItems">
            The items required in the cache.
            Note that <see cref="T:work.bacome.imapclient.cCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/> (so you can use values of those types as parameters to this method).
            </param>
            <returns>
            <see langword="true"/> if the fetch populated the cache with the requested items, <see langword="false"/> otherwise.
            <see langword="false"/> indicates that the message is expunged.
            </returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            Gets the fetch size in bytes of a <see cref="T:work.bacome.imapclient.cSinglePartBody"/> part of this message. This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/>.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
            <remarks>
            This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/> if the part needs decoding (see <see cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/>) and the server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/>.
            The size may have to be fetched from the server. 
            Once fetched the size will be cached in the internal message cache.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytesAsync(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            Asynchronously gets the fetch size in bytes of a <see cref="T:work.bacome.imapclient.cSinglePartBody"/> part of this message. This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/>.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
            <remarks>
            This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/> if the part needs decoding (see <see cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/>) and the server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/>.
            The size may have to be fetched from the server. 
            Once fetched the size will be cached in the internal message cache.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)">
            <summary>
            Returns a message sequence number offset for use in message filtering. See <see cref="F:work.bacome.imapclient.cFilter.MSN"/>.
            </summary>
            <param name="pOffset">The offset from this message's sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainText">
            <summary>
            Fetches the message's plain text parts from the server, decoding if required, and concatenates them yielding the returned value.
            </summary>
            <returns></returns>
            <remarks>
            The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.
            If there are alternate versions of a part only one of the alternates is used in generating the plain text (the first one).
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainTextAsync">
            <summary>
            Ansynchronously fetches the message's plain text parts from the server, decoding if required, and concatenates them yielding the returned value.
            </summary>
            <returns></returns>
            <remarks>
            The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.
            If there are alternate versions of a part only one of the alternates is used in generating the plain text (the first one).
            If the internal message cache does not contain the <see cref="F:work.bacome.imapclient.fCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            Fetches the specified message part from the server, decoding if required, and returns the data in a string.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            Asynchronously fetches the specified message part from the server, decoding if required, and returns the data in a string.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)">
            <summary>
            Fetches the specified message section from the server as text (without any decoding) and attempts to return the data as a string.
            </summary>
            <param name="pSection"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection)">
            <summary>
            Asynchronously fetches the specified message section from the server as text (without any decoding) and attempts to return the data as a string.
            </summary>
            <param name="pSection"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches the specified message part from the server (decoding if required), and writes the part data into the provided stream.
            </summary>
            <param name="pPart"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <remarks>
            Any decoding required may be done client-side or server-side.
            To calculate the number of bytes that have to be fetched, use the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> method. 
            (This is useful if you are intending to display a progress bar.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches the specified message part from the server (decoding if required), and writes the part data into the provided stream.
            </summary>
            <param name="pPart"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <returns></returns>
            <remarks>
            Any decoding required may be done client-side or server-side.
            To calculate the number of bytes that have to be fetched, use the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> method. 
            (This is useful if you are intending to display a progress bar.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches the specified message section from the server and writes the section data into the provided stream.
            </summary>
            <param name="pSection"></param>
            <param name="pDecoding">
            Specifies the decoding that should be applied to the fetched data.
            If the connected server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then unless this is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required.
            </param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches the specified message section from the server and writes the section data into the provided stream.
            </summary>
            <param name="pSection"></param>
            <param name="pDecoding">
            Specifies the decoding that should be applied to the fetched data.
            If the connected server supports <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then unless this is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required.
            </param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for the message. This method will throw if it detects that the store is likely to have failed.
            </summary>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            If the message has been modified since the specified modseq the server should fail the store.
            </param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.StoreAsync(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for the message. This method will throw if it detects that the store is likely to have failed.
            </summary>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq">
            The modseq to use in the UNCHANGEDSINCE clause of a conditional store (see RFC 7162).
            Can only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero.
            If the message has been modified since the specified modseq the server should fail the store.
            </param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)">
            <summary>
            Copies the message to the specified mailbox.
            </summary>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.CopyAsync(work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies the message to the specified mailbox.
            </summary>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kMessageFlagName">
            <summary>
            Contains named message flag name contants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible">
            <summary>\*</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Recent">
            <summary>\Recent</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Answered">
            <summary>\Answered</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Flagged">
            <summary>\Flagged</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Deleted">
            <summary>\Deleted</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Seen">
            <summary>\Seen</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Draft">
            <summary>\Draft</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Forwarded">
            <summary>$Forwarded</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.SubmitPending">
            <summary>$SubmitPending</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Submitted">
            <summary>$Submitted</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlags">
            <summary>
            Represents a unique read-only message flag collection. Message flags are case insensitive.
            </summary>
            <remarks>
            <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> is not a storable flag.
            <see cref="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible"/> is not a storable flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.#ctor(work.bacome.imapclient.cMessageFlagList)">
            <summary>
            Initialises a new instance with the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String)">
            <summary>
            Determines whether the collection contains the flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String[])">
            <summary>
            Determines whether the collection contains all the flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlags.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.SymmetricDifference(work.bacome.imapclient.cMessageFlags,System.String[])">
            <summary>
            Returns the symmetric difference between this and the specified collection ignoring an optional set of flags (case insensitive).
            </summary>
            <param name="pOther"></param>
            <param name="pExcept">The flags to ignore when doing the difference.</param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlags.Count">
            <inheritdoc cref="P:work.bacome.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.GetEnumerator">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.ToString">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.ToString"/>
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlags">
            <summary>
            Represents a unique read-only storable message flag collection. Message flags are case insensitive.
            </summary>
            <remarks>
            <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> is not a storable flag.
            <see cref="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible"/> is not a storable flag.
            Message flag names have a limited grammar - see RFC 3501.
            (Generally, non-system flags must only include <see cref="F:work.bacome.imapclient.support.cCharset.Atom"/> characters).
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.None">
            <summary>An empty storable flag collection.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Answered">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Flagged">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Flagged"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Deleted">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Seen">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Draft">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Draft"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Forwarded">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.SubmitPending">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Submitted">
            <summary>A storable flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlagName.Submitted"/>.</summary> 
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])">
            <summary>
            Initialises a new instance with a duplicate free copy of the specified flags. May throw if the specified flags aren't valid storable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <summary>
            Initialises a new instance with a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.op_Implicit(work.bacome.imapclient.cStorableFlagList)~work.bacome.imapclient.cStorableFlags">
            <summary>
            Returns a new instance containing a copy of the specified flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlags">
            <summary>
            Represents a unique read-only fetchable message flag collection. Message flags are case insensitive.
            </summary>
            <remarks>
            <see cref="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible"/> is not a fetchable flag.
            Message flag names have a limited grammar - see RFC 3501.
            (Generally, non-system flags must only include <see cref="F:work.bacome.imapclient.support.cCharset.Atom"/> characters).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.MessageFlags"/>
            <seealso cref="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])">
            <summary>
            Initialises a new instance with a duplicate free copy of the specified flags. May throw if the specified flags aren't valid fetchable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <summary>
            Initialises a new instance with a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.op_Implicit(work.bacome.imapclient.cFetchableFlagList)~work.bacome.imapclient.cFetchableFlags">
            <summary>
            Returns a new instance containing a copy of the specified flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlagList">
            <summary>
            Represents a unique message flag list. Message flags are case insensitive.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cMessageFlags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initialises a new instance with the specified flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String)">
            <summary>
            Determines whether the list contains the flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String[])">
            <summary>
            Determines whether the list contains all the specified flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String)">
            <summary>
            Adds the flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String[])">
            <summary>
            Adds each flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Add(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String)">
            <summary>
            Removes the flag from the list if it is there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String[])">
            <summary>
            Removes the flags from the list if they are there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String[])"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlagList.Count">
            <inheritdoc cref="P:work.bacome.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.GetEnumerator">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.ToString">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.ToString"/>
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlagList">
            <summary>
            Represents a unique storable message flag list. Message flag names are case insensitive.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cStorableFlags" select="remarks"/>
            <seealso cref="T:work.bacome.imapclient.cStorableFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.#ctor"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.String[])">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(work.bacome.imapclient.cStorableFlagList)"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlagList">
            <summary>
            Represents a unique fetchable message flag list. Message flags are case insensitive.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cFetchableFlags" select="remarks"/>
            <seealso cref="T:work.bacome.imapclient.cFetchableFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.#ctor"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.String[])">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(work.bacome.imapclient.cFetchableFlagList)"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItems">
            <summary>
            A set of items that can be cached in the internal message cache.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.None">
            <summary>
            An empty set of items.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Attributes">
            <summary>
            A set of IMAP message attributes to cache.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Names">
            <summary>
            A collection of header field names to cache.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.#ctor(work.bacome.imapclient.fCacheAttributes,work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Initialises a new instance with the specified attributes and header field names.
            </summary>
            <param name="pAttributes"></param>
            <param name="pNames">Can't be <see langword="null"/>, may be empty.</param>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.#ctor(work.bacome.imapclient.fMessageProperties)">
            <summary>
            Initialises a new instance with the attributes and header field names required for the specified properties of <see cref="T:work.bacome.imapclient.cMessage"/>.
            </summary>
            <param name="pProperties"></param>
        </member>
        <member name="P:work.bacome.imapclient.cCacheItems.IsNone">
            <summary>
            Indicates if the set is empty.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have the same values.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.GetHashCode">
            <summary>
            Returns the hash code for this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.ToString">
            <summary>Returns a string that represents the set.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.op_Equality(work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines whether two instances have the same values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.op_Inequality(work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines whether two instances have different values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.op_Implicit(work.bacome.imapclient.fCacheAttributes)~work.bacome.imapclient.cCacheItems">
            <summary>
            Implicit conversion. See <see cref="M:work.bacome.imapclient.cCacheItems.#ctor(work.bacome.imapclient.fCacheAttributes,work.bacome.imapclient.cHeaderFieldNames)"/>.
            </summary>
            <param name="pAttributes"></param>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.op_Implicit(work.bacome.imapclient.cHeaderFieldNames)~work.bacome.imapclient.cCacheItems">
            <summary>
            Implicit conversion. See <see cref="M:work.bacome.imapclient.cCacheItems.#ctor(work.bacome.imapclient.fCacheAttributes,work.bacome.imapclient.cHeaderFieldNames)"/>.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItems.op_Implicit(work.bacome.imapclient.fMessageProperties)~work.bacome.imapclient.cCacheItems">
            <summary>
            Implicit conversion. See <see cref="M:work.bacome.imapclient.cCacheItems.#ctor(work.bacome.imapclient.fMessageProperties)"/>.
            </summary>
            <param name="pProperties"></param>
        </member>
        <member name="T:work.bacome.imapclient.eSectionTextPart">
            <summary>
            The text part of an IMAP message section (see <see cref="T:work.bacome.imapclient.cSection"/>).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.all">
            <sumary>The entire section.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.header">
            <sumary>The entire header part of the section.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfields">
            <sumary>Specified headers from the header part of the section.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot">
            <sumary>All headers other than the specified headers from the header part of the section.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.text">
            <sumary>The entire text part of the section.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.mime">
            <sumary>The mime headers of the section.</sumary> 
        </member>
        <member name="T:work.bacome.imapclient.cSection">
            <summary>
            Represents a section of an IMAP message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.All">
            <summary>
            A section that represents the entire message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Header">
            <summary>
            A section that represents the entire header fields part of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Text">
            <summary>
            A section that represents the entire text part of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Part">
            <summary>
            The IMAP section-part (a dot separated set of integers) that this instance represents. May be <see langword="null"/> if the instance represents the top level part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.TextPart">
            <summary>
            The text part that this instance represents.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Names">
            <summary>
            The header fields included (<see cref="F:work.bacome.imapclient.cSection.TextPart"/> = <see cref="F:work.bacome.imapclient.eSectionTextPart.headerfields"/>) or excluded (<see cref="F:work.bacome.imapclient.cSection.TextPart"/> = <see cref="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot"/>) by this instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String)">
            <summary>
            Initialises a new instance so it represents an entire part.
            </summary>
            <param name="pPart">Must be a valid IMAP section-part (a dot separated set of integers) or <see langword="null"/> for the top level part.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String,work.bacome.imapclient.eSectionTextPart)">
            <summary>
            Initialises a new instance so it represents a whole text part.
            </summary>
            <param name="pPart">Must be a valid IMAP section-part (a dot separated set of integers) or <see langword="null"/> for the top level part.</param>
            <param name="pTextPart">Must be <see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>, <see cref="F:work.bacome.imapclient.eSectionTextPart.header"/>, <see cref="F:work.bacome.imapclient.eSectionTextPart.text"/> or if <paramref name="pPart"/> is not <see langword="null"/>, <see cref="F:work.bacome.imapclient.eSectionTextPart.mime"/>.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String,work.bacome.imapclient.cHeaderFieldNames,System.Boolean)">
            <summary>
            Initialises a new instance so it represents a sub-part of the <see cref="F:work.bacome.imapclient.eSectionTextPart.header"/>.
            </summary>
            <param name="pPart">Must be a valid IMAP section-part (a dot separated set of integers) or <see langword="null"/> for the message headers.</param>
            <param name="pNames"></param>
            <param name="pNot"><see langword="true"/> to represent all headers except <paramref name="pNames"/>, <see langword="false"/> to represent only the headers in <paramref name="pNames"/>.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSection.Equals(System.Object)">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.GetHashCode">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.ToString">
            <inheritdoc cref="M:work.bacome.apidocumentation.cAPIDocumentationTemplate.ToString"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.op_Equality(work.bacome.imapclient.cSection,work.bacome.imapclient.cSection)">
            <inheritdoc cref="!:cAPIDocumentationTemplate.Op_Equal(cAPIDocumentationTemplate, cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.op_Inequality(work.bacome.imapclient.cSection,work.bacome.imapclient.cSection)">
            <inheritdoc cref="!:cAPIDocumentationTemplate.Op_NotEqual(cAPIDocumentationTemplate, cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eSortItem">
            <summary>
            Items that messages can be sorted by.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSortItem"/>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.received">
            <summary>The IMAP INTERNALDATE of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.cc">
            <summary>The group-name or local-part of the first CC address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.sent">
            <summary>The UTC sent date of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.from">
            <summary>The group-name or local-part of the first 'from' address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.size">
            <summary>The size of the message in bytes.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.subject">
            <summary>The base subject. The base subject is defined RFC 5256 and is the subject with the RE: FW: etc artifacts removed.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.to">
            <summary>The group-name or local-part of the first 'to' address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.displayfrom">
            <summary>The display-name of the first 'from' address. Defined in RFC 5957.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.displayto">
            <summary>The display-name of the first 'to' address. Defined in RFC 5957.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cSortItem">
            <summary>
            Represents an item in a message sort specification.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSort"/>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Received">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.received"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CC">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.cc"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Sent">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.sent"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.From">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.from"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Size">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.size"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Subject">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.subject"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.To">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.to"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFrom">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.displayfrom"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayTo">
            <summary>Ascending by <see cref="F:work.bacome.imapclient.eSortItem.displayto"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ReceivedDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.received"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CCDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.cc"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SentDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.sent"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.FromDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.from"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SizeDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.size"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SubjectDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.subject"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ToDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.to"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFromDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.displayfrom"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayToDesc">
            <summary>Descending by <see cref="F:work.bacome.imapclient.eSortItem.displayto"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Item">
            <summary>
            The item being sorted by.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Attribute">
            <summary>
            The internal message cache attribute that is required if the sorting is done client-side.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Desc">
            <summary>
            Indicates a descending sort.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.#ctor(work.bacome.imapclient.eSortItem,System.Boolean)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pItem"></param>
            <param name="pDesc">Indicates a descending sort.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cSort">
            <summary>
            Represents a message sort specification.
            </summary>
            <remarks>
            You can use the following <see langword="static"/> instances of <see cref="T:work.bacome.imapclient.cSortItem"/> when creating new sort specifications;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cSortItem.Received"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.CC"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.Sent"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.From"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.Size"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.Subject"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.To"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.DisplayFrom"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.DisplayTo"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.ReceivedDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.CCDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.SentDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.FromDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.SizeDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.SubjectDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.ToDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.DisplayFromDesc"/></item>
            <item><see cref="F:work.bacome.imapclient.cSortItem.DisplayToDesc"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cSort.None">
            <summary>
            Specifies that no sorting is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.Items">
            <summary>
            The items in this sort specification.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSort.#ctor(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cSortItem})">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pItems"></param>
        </member>
        <member name="M:work.bacome.imapclient.cSort.#ctor(work.bacome.imapclient.cSortItem[])">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pItems"></param>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.support.iMessageHandle)">
            <summary>
            Compares the attributes already in the internal message for two messages according to this message sort specification.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
            <remarks>
            If the attributes required for the comparision are not already in the internal message cache the result may be misleading.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Attributes"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <summary>
            Compares two messages according to this message sort specification.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
            <remarks>
            If the attributes required for the comparision are not already in the internal message cache they will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)">
            <summary>
            Gets the requirements for this sort to be done client-side and server-side.
            </summary>
            <param name="rSortDisplay">Gets set to <see langword="true"/> if <see cref="P:work.bacome.imapclient.cCapabilities.SortDisplay"/> must be in use for the server to do the sort.</param>
            <returns>The set of message attributes required for the comparison implied by this sort to be done client-side.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUID">
            <summary>
            An IMAP message UID
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUID.UIDValidity">
            <summary>The UIDValidity.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cUID.UID">
            <summary>The UID.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUID.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pUIDValidity"></param>
            <param name="pUID"></param>
        </member>
        <member name="M:work.bacome.imapclient.cUID.CompareTo(work.bacome.imapclient.cUID)">
            <summary>
            Compares this instance with the specified <see cref="T:work.bacome.imapclient.cUID"/> object.
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cUID.Equals(work.bacome.imapclient.cUID)">
            <summary>
            Determines whether this instance and the specified object have the same value.
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cUID.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object have the same value.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cUID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cUID.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUID.op_Equality(work.bacome.imapclient.cUID,work.bacome.imapclient.cUID)">
            <summary>
            Determines whether two instances have the same value.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cUID.op_Inequality(work.bacome.imapclient.cUID,work.bacome.imapclient.cUID)">
            <summary>
            Determines whether two instances have different values.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cNamespace">
            <summary>
            Provides an API that allows interaction with an IMAP namespace.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>
        </member>
        <member name="F:work.bacome.imapclient.cNamespace.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespace.NamespaceName">
            <summary>The namespace name.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Prefix">
            <summary>
            Gets the name prefix of the namespace. May be the empty string.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Delimiter">
            <summary>
            Gets the namespace hierarchy delimiter. May be <see langword="null"/> if there is no hierarchy.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailboxes at the top level of hierarchy in the namespace.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailboxes at the top level of hierarchy in the namespace.
            </summary>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the subscribed mailboxes in the namespace. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the namespace are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the subscribed mailboxes in the namespace. Note that mailboxes that do not currently exist may be returned.
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the namespace are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to request when getting the mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a mailbox at the top level of this namespace.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a mailbox at the top level of this namespace.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaceName">
            <summary>
            Represents an IMAP namespace name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Prefix">
            <summary>
            The name prefix of the namespace. May be the empty string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Delimiter">
            <summary>
            The namespace hierarchy delimiter. May be <see langword="null"/> if there is no hierarchy.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaces">
            <summary>
            A collection of <see cref="T:work.bacome.imapclient.cNamespace"/> instances. See <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Personal">
            <summary>A collection of personal <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.OtherUsers">
            <summary>A collection of 'other user' <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Shared">
            <summary>A collection of shared <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eCommandResultType">
            <summary>
            The type of IMAP command result.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCommandResult"/>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.ok">
            <summary>OK</summary>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.no">
            <summary>NO</summary>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.bad">
            <summary>BAD</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCommandResult">
            <summary>
            Represents the result of an IMAP command.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cProtocolErrorException"/>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResultType">
            <summary>
            The IMAP command result type.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResponseText">
            <summary>
            The IMAP response text associated with the command result.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCommandResult.ToString">
            <summary>Returns a string that represents the result.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedString">
            <summary>
            Represents a string that includes language information as per RFC 2231.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cAddress.DisplayName"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.Subject"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.Subject"/>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.Description"/>
            <seealso cref="P:work.bacome.imapclient.cAttachment.Description"/>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedString.Parts">
            <summary>
            The parts of the string. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedString.ToString">
            <summary>Returns the string data sans the language information.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedString.op_Implicit(work.bacome.imapclient.cCulturedString)~System.String">
            <summary>
            Implicit conversion to a string. The string will be sans the language information. 
            </summary>
            <param name="pString"></param>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedStringPart">
            <summary>
            Represents part of a string that includes language information as per RFC 2231.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.String">
            <summary>
            The decoded text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.LanguageTag">
            <summary>
            Optional language of the text. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedStringPart.ToString">
            <summary>Returns a string that represents the part (including any language information).</summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPException">
            <summary>
            The abstract base class for all of the library's custom exceptions.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnsuccessfulCompletionException">
            <summary>
            Thrown on a 'NO' command response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText">
            <summary>
            The response text associated with the 'NO'.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may have prevented the problem.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cUnsuccessfulCompletionException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cProtocolErrorException">
            <summary>
            Thrown on a 'NO' or 'BAD' command response. (Thrown on a 'NO' only when the 'NO' is an unexpected possibility.)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.CommandResult">
            <summary>
            The command result associated with the response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may have prevented the exception.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cProtocolErrorException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnexpectedServerActionException">
            <summary>
            Thrown when something happens that shouldn't (according to my reading of the RFCs).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnexpectedServerActionException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may have prevented the exception.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cUnexpectedServerActionException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cInternalErrorException">
            <summary>
            Thrown when something happens that shouldn't.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cConnectByeException">
            <summary>
            Thrown when the server said bye at connect.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cConnectByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cConnectByeException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHomeServerReferralException">
            <summary>
            Thrown when the server rejects connection but suggests that we try a different server.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText">
            <summary>
            The response text associated with the rejection.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHomeServerReferralException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentialsException">
            <summary>
            Thrown when the server didn't accept the credentials provided.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cCredentialsException.ResponseText">
            <summary>
            Has a value if there was an explicit rejection of the credetials by the server.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentialsException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cAuthenticationMechanismsException">
            <summary>
            Thrown to indicate that the inability to connect is related to the lack of usable authentication mechanisms offered by the server.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue">
            <summary>
            Indicates if the problem might be fixed by using TLS.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAuthenticationMechanismsException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnilateralByeException">
            <summary>
            Thrown to indicate that a server initiated unilateral 'BYE' occurred.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnilateralByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cUnilateralByeException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurityException">
            <summary>
            Thrown when the installed SASL security layer encoding or decoding fails.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineConflictException">
            <summary>
            Thrown when there are two pipelined commands that conflict in some way. Indicates a bug in the library.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineStoppedException">
            <summary>
            Thrown when the internal command pipeline has stopped processing commands.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStreamClosedException">
            <summary>
            Thrown when the internal network stream has been closed.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDValidityChangedException">
            <summary>
            Thrown when the UIDValidity changed while doing something that depended on it not changing.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cContentTransferDecodingException">
            <summary>
            Thrown when the content-transfer-encoding can't be handled.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNException">
            <summary>
            Thrown when a message sequence number couldn't be determined when building a message filter. Probably due to the message being expunged.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cFilterMSN"/>
        </member>
        <member name="F:work.bacome.imapclient.cFilterMSNException.Handle">
            <summary>
            The message handle that couldn't be resolved to a message sequence number.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSNException.ToString">
            <summary>Returns a string that represents the exception.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cTestsException">
            <summary>
            Thrown when an internal test fails.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBatchSizerConfiguration">
            <summary>
            Contains parameters to control batch sizes in long running operations.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/>
            <seealso cref="T:work.bacome.imapclient.cBodyFetchConfiguration"/>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Min">
            <summary>The minimum batch size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Max">
            <summary>The maximum batch size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.MaxTime">
            <summary>The maximum time that a batch should take, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Initial">
            <summary>The initial batch size.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pMin">The minimum batch size.</param>
            <param name="pMax">The maximum batch size.</param>
            <param name="pMaxTime">The maximum time that a batch should take, in milliseconds.</param>
            <param name="pInitial">The initial batch size.</param>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.iId">
            <summary>
            An ID (RFC 2971) field/ value dictionary.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cId"/>
            <seealso cref="T:work.bacome.imapclient.cIdDictionary"/>
        </member>
        <member name="P:work.bacome.imapclient.iId.Name">
            <summary>Gets the name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Version">
            <summary>Gets the version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OS">
            <summary>Gets the name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OSVersion">
            <summary>Gets the version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Vendor">
            <summary>Gets the vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.SupportURL">
            <summary>Gets the URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Address">
            <summary>Gets the postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Date">
            <summary>Gets the date program was released.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Command">
            <summary>Gets the command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Arguments">
            <summary>Gets the arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Environment">
            <summary>Gets the description of the environment.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kIdFieldName">
            <summary>
            Contains ID (RFC 2971) field name constants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Name">
            <summary>name</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Version">
            <summary>version</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.OS">
            <summary>os</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.OSVersion">
            <summary>os-version</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Vendor">
            <summary>vendor</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.SupportURL">
            <summary>support-url</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Address">
            <summary>address</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Date">
            <summary>date</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Command">
            <summary>command</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Arguments">
            <summary>arguments</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Environment">
            <summary>environment</summary>
        </member>
        <member name="T:work.bacome.imapclient.cId">
            <summary>
            A read-only ID (RFC 2971) field/ value dictionary.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ServerId"/>
        </member>
        <member name="F:work.bacome.imapclient.cId.mDictionary">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialise a new instance, copying the values from the supplied field/ value dictionary. Field names are case insensitive.
            </summary>
            <param name="pDictionary"></param>
        </member>
        <member name="P:work.bacome.imapclient.cId.Count">
            <summary>Gets the number of field/ value pairs in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Values">
            <summary>Gets the values that are in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Keys">
            <summary>Gets the fields that are in the dictionary.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains a field (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.TryGetValue(System.String,System.String@)">
            <summary>
            Retrieves the field value (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.GetEnumerator">
            <summary>Returns an enumerator that iterates through the field/ values.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Item(System.String)">
            <summary>
            Retrieves the field value (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cId.Name">
            <summary>Gets the name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Version">
            <summary>Gets the version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OS">
            <summary>Gets the name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OSVersion">
            <summary>Gets the version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Vendor">
            <summary>Gets the vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.SupportURL">
            <summary>Gets the URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Address">
            <summary>Gets the postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Date">
            <summary>Gets the date program was released.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Command">
            <summary>Gets the command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Arguments">
            <summary>Gets the arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Environment">
            <summary>Gets the description of environment.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.ToString">
            <summary>Returns a string that represents the dictionary.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cClientIdUTF8">
            <summary>
            A read-only ID (RFC 2971) field/ value dictionary. This class enforces the limits of RFC 2971.
            </summary>
            <remarks>
            <para>The limits of RFC 2971 are;</para>
            <list type="bullet">
            <item>Field names no longer than 30 bytes.</item>
            <item>Values no longer than 1024 bytes.</item>
            <item>No more than 30 field/ value pairs.</item>
            </list>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialise a new instance, copying the values from the supplied field/ value dictionary. Field names are case insensitive. RFC 2971 limits are enforced by the constructor: it will throw if there are violations.
            </summary>
            <param name="pDictionary"></param>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientIdUTF8">
            <summary>
            Implicit conversion. See <see cref="M:work.bacome.imapclient.cClientIdUTF8.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})"/>.
            </summary>
            <param name="pDictionary"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cClientId">
            <summary>
            A read-only ID (RFC 2971) field/ value dictionary. This class enforces the limits of RFC 2971.
            </summary>
            <remarks>
            <para>The limits of RFC 2971 are;</para>
            <list type="bullet">
            <item>Field names no longer than 30 bytes.</item>
            <item>Values no longer than 1024 bytes.</item>
            <item>No more than 30 field/ value pairs.</item>
            </list>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialise a new instance, copying the values from the supplied field/ value dictionary. Field names are case insensitive. RFC 2971 limits are enforced by the constructor: it will throw if there are violations.
            </summary>
            <param name="pDictionary"></param>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientId">
            <summary>
            Implicit conversion. See <see cref="M:work.bacome.imapclient.cClientId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})"/>.
            </summary>
            <param name="pDictionary"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cIdDictionary">
            <summary>
            An ID (RFC 2971) field/ value dictionary. Field names are case insensitive.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cClientId"/>
            <seealso cref="T:work.bacome.imapclient.cClientIdUTF8"/>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance as an empty or a default dictionary. A default dictionary contains details about the library.
            </summary>
            <param name="pDefault">Indicates if a default or an empty dictionary should be constructed.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Count">
            <summary>Gets the number of field/ value pairs in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.IsReadOnly">
            <summary>Always returns <see langword="false"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Values">
            <summary>Gets the values that are in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Keys">
            <summary>Gets the fields that are in the dictionary.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains a field (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Retrieves the field value (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified field/ value to the dictionary (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.String)">
            <summary>
            Removes the field from the dictionary (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the dictionary contains a field/ value pair (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds the specified field/ value to the dictionary (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the field/ value pair from the dictionary (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Clear">
            <summary>
            Removes all field/ value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the field/ value pairs to an array.
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.GetEnumerator">
            <summary>Returns an enumerator that iterates through the field/ values.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Item(System.String)">
            <summary>Retrieves the field value (field names are case insensitive).</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Name">
            <summary>Gets and sets the name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Version">
            <summary>Gets and sets the version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OS">
            <summary>Gets and sets the name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OSVersion">
            <summary>Gets and sets the version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Vendor">
            <summary>Gets and sets the vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.SupportURL">
            <summary>Gets and sets the URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Address">
            <summary>Gets and sets the postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Date">
            <summary>Gets the date program was released.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.SetDate(System.DateTime)">
            <summary>
            Sets the <see cref="P:work.bacome.imapclient.cIdDictionary.Date"/>. This method converts the supplied date to RFC 3501 date format.
            </summary>
            <param name="pDate"></param>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Command">
            <summary>Gets and sets the command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Arguments">
            <summary>Gets and sets the arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Environment">
            <summary>Gets and sets the description of the environment.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.ToString">
            <summary>Returns a string that represents the dictionary.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cIdleConfiguration">
            <summary>
            Contains parameters that control what a <see cref="T:work.bacome.imapclient.cIMAPClient"/> instance does while idle.
            </summary>
            <remarks>
            <para>Idling refers to the process of inviting the server to send unprompted (unprompted by external code) updates to the client with the aim of keeping the client in synch with the server.</para>
            <para>A <see cref="T:work.bacome.imapclient.cIMAPClient"/> instance can only idle while it <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.</para>
            <para>Idling starts after the configured length of quiet time on the underlying IMAP protocol connection has passed (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.StartDelay"/>).</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Idle"/> is in use then the RFC 2177 IDLE command is used.
            The IDLE command has to be restarted periodically to avoid the connection being closed due to inactivity - RFC 2177 recommends at least once every 29 minutes (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval"/>).
            </para>
            <para>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Idle"/> is not in use then the library drops back to a periodic poll of the server using IMAP CHECK and/ or NOOP (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.PollInterval"/>).
            </para>
            <para>
            The default values are;
            <list type="bullet">
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.StartDelay"/></term><description>2s</description></item>
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval"/></term><description>20 minutes</description></item>
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.PollInterval"/></term><description>60s</description></item>
            </list>
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.StartDelay">
            <summary>The length of the quiet time that must pass before idling starts, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval">
            <summary>The interval between RFC 2177 IDLE commands, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.PollInterval">
            <summary>The interval between polling commands, in milliseconds.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pStartDelay">The length of the quiet time that must pass before idling starts, in milliseconds.</param>
            <param name="pIdleRestartInterval">The interval between RFC 2177 IDLE commands, in milliseconds.</param>
            <param name="pPollInterval">The interval between polling commands, in milliseconds.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.ToString">
            <summary>Returns a string that represents the configuration.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextType">
            <summary>
            The type of IMAP response text.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cResponseTextEventArgs"/>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.greeting">
            <summary>Response text associated with an IMAP greeting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.continuerequest">
            <summary>Response text associated with an IMAP command continuation request.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.bye">
            <summary>Response text associated with an IMAP BYE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.information">
            <summary>IMAP information text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.warning">
            <summary>IMAP warning text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.error">
            <summary>IMAP error text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.success">
            <summary>Response text associated with an IMAP command success notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.failure">
            <summary>Response text associated with an IMAP command failure notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.authenticationcancelled">
            <summary>Response text associated with an IMAP authentication cancellation notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.protocolerror">
            <summary>Response text associated with an IMAP command protocol error notification.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextCode">
            <summary>
            The text code associated with IMAP response text.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cResponseText"/>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.none">
            <summary>There was no code.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unknown">
            <summary>There was a code, but it wasn't recognised.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alert">
            <summary>RFC 3501 ALERT: the text is an alert.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.badcharset">
            <summary>RFC 3501 BADCHARSET.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.parse">
            <summary>RFC 3501 PARSE: there was an error parsing a message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.trycreate">
            <summary>RFC 3501 TRYCREATE: try creating the mailbox.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unavailable">
            <summary>RFC 5530 UNAVAILABLE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed">
            <summary>RFC 5530 AUTHENTICATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed">
            <summary>RFC 5530 AUTHORIZATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expired">
            <summary>RFC 5530 EXPIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.privacyrequired">
            <summary>RFC 5530 PRIVACYREQUIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.contactadmin">
            <summary>RFC 5530 CONTACTADMIN.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.noperm">
            <summary>RFC 5530 NOPERM.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.inuse">
            <summary>RFC 5530 INUSE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expungeissued">
            <summary>RFC 5530 EXPUNGEISSUED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.corruption">
            <summary>RFC 5530 CORRUPTION.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.serverbug">
            <summary>RFC 5530 SERVERBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.clientbug">
            <summary>RFC 5530 CLIENTBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.cannot">
            <summary>RFC 5530 CANNOT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.limit">
            <summary>RFC 5530 LIMIT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.overquota">
            <summary>RFC 5530 OVERQUOTA.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alreadyexists">
            <summary>RFC 5530 ALREADYEXISTS.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.nonexistent">
            <summary>RFC 5530 NONEXISTENT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.referral">
            <summary>RFC 2193 REFERRAL.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.useattr">
            <summary>RFC 6154 USEATTR.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unknowncte">
            <summary>RFC 3516 UNKNOWNCTE: the server can't decode the content.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cResponseText">
            <summary>
            IMAP response text.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cResponseTextEventArgs"/>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
            <seealso cref="T:work.bacome.imapclient.cConnectByeException"/>
            <seealso cref="T:work.bacome.imapclient.cHomeServerReferralException"/>
            <seealso cref="T:work.bacome.imapclient.cCredentialsException"/>
            <seealso cref="T:work.bacome.imapclient.cCommandResult"/>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Code">
            <summary>
            The code associated with the response text. If this is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> then the text of the code is in <see cref="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Strings">
            <summary>
            The data associated with the <see cref="F:work.bacome.imapclient.cResponseText.Code"/>. 
            If the code is <see cref="F:work.bacome.imapclient.eResponseTextCode.badcharset"/> this may contain a list of valid charsets.
            If the code is <see cref="F:work.bacome.imapclient.eResponseTextCode.referral"/> this should contain the URI(s).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom">
            <summary>
            If the <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> this is the text of the code, otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeText">
            <summary>
            If the <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> this is the text following the code, otherwise <see langword="null"/>. (May also be <see langword="null"/> if there was no text.)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cResponseText.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cResponseTextEventArgs">
            <summary>
            See <see cref="E:work.bacome.imapclient.cIMAPClient.ResponseText"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.TextType">
            <summary>
            The response text type. This indicates the situation in which the response text was received
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cResponseTextEventArgs.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cURL">
            <summary>
            Represents a parsed IMAP URL.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/>
        </member>
        <member name="F:work.bacome.imapclient.cURL.OriginalString">
            <summary>The string that the instance was constructed from.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURL.#ctor(System.String)">
            <summary>
            Initialises a new instance. Will throw if the string is not a valid IMAP URL.
            </summary>
            <param name="pURL"></param>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UserId">
            <summary>Gets the userid.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MechanismName">
            <summary>Gets the SASL mechanism name.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Host">
            <summary>Gets the host.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Port">
            <summary>Gets the port.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MailboxPath">
            <summary>Gets the mailbox path.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UIDValidity">
            <summary>Gets the UIDValidity.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UID">
            <summary>Gets the UID.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MustUseAnonymous">
            <summary>Determines if the URL requires that anonymous authentication be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsHomeServerReferral">
            <summary>Determines if the URL is a valid home server referral.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsMailboxReferral">
            <summary>Determines if the URL is a valid mailbox referral.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsMailboxSearch">
            <summary>Determines if the URL is a valid mailbox search URL.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURL.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURL.TryParse(System.String,work.bacome.imapclient.cURL@)">
            <summary>
            Tries to parse a string into an IMAP URL.
            </summary>
            <param name="pURL"></param>
            <param name="rURL"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cURI">
            <summary>
            Represents a parsed URI.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cURI.OriginalString">
            <summary>The string that the instance was constructed from.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURI.#ctor(System.String)">
            <summary>
            Initialises a new instance. Will throw if the string is not a valid URI.
            </summary>
            <param name="pURI"></param>
        </member>
        <member name="M:work.bacome.imapclient.cURI.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURI.TryParse(System.String,work.bacome.imapclient.cURI@)">
            <summary>
            Tries to parse a string into a URI.
            </summary>
            <param name="pURI"></param>
            <param name="rURI"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.async.cCancellationManager">
            <summary>
            Instances manage sets of asynchronous operations that are attached to a common internal <see cref="T:System.Threading.CancellationTokenSource"/>. 
            </summary>
            <remarks>
            Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor">
            <summary>
            Initialises a new instance.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor(System.Action{work.bacome.trace.cTrace.cContext})">
            <summary>
            Initialises a new instance specifying a callback to be used when the <see cref="P:work.bacome.async.cCancellationManager.Count"/> property changes.
            </summary>
            <param name="pCountChanged">The callback to be used when the <see cref="P:work.bacome.async.cCancellationManager.Count"/> property changes.</param>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.GetToken(work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object containing a <see cref="T:System.Threading.CancellationToken"/> that is attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>. Increments <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
            <remarks>
            Getting the token object increments <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            Dispose the returned object when the operation being controlled by the contained <see cref="T:System.Threading.CancellationToken"/> completes.
            Disposing the token object decrements <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.async.cCancellationManager.Count">
            <summary>
            Gets the number of operations attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.Cancel(work.bacome.trace.cTrace.cContext)">
            <summary>
            Cancels all of the operations attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <remarks>
            Calling this method also causes the allocation of a new internal <see cref="T:System.Threading.CancellationTokenSource"/> so a new set of operations can be started immediately.
            </remarks>
        </member>
        <member name="T:work.bacome.async.cCancellationManager.cToken">
            <summary>
            Contains a <see cref="T:System.Threading.CancellationToken"/> attached to the <see cref="T:System.Threading.CancellationTokenSource"/> of a <see cref="T:work.bacome.async.cCancellationManager"/> instance.
            Dispose instances of this class when the operation being controlled by the contained <see cref="T:System.Threading.CancellationToken"/> completes.
            </summary>
            <remarks>
            Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            Disposing the instances decrements <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            </remarks>
        </member>
        <member name="F:work.bacome.async.cCancellationManager.cToken.CancellationToken">
            <summary>
            The cancellation token to use in the controlled operation.
            </summary>
        </member>
        <member name="T:work.bacome.async.cCountdownTimer">
            <summary>
            Instances manage a sequence of tasks that complete after a specified length of time.
            </summary>
            <remarks>
            Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.#ctor(System.Int32,work.bacome.trace.cTrace.cContext)">
            <summary>
            Initialises a new instance with a timeout and <see cref="T:System.Threading.CancellationToken"/>. The first countdown commences immediately.
            </summary>
            <param name="pTimeout">The duration of each successive countdown task.</param>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.GetAwaitCountdownTask">
            <summary>
            Gets the currently running countdown task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.Restart(work.bacome.trace.cTrace.cContext)">
            <summary>
            Starts a new countdown task. Cannot be called if there is a countdown already running.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess">
            <summary>
            Instances provide a mechanism to control exclusive access using token objects and block objects.
            </summary>
            <remarks>
            <para>The granting of exclusive access is done by issuing a token object. To release the exclusive access the token object must be disposed.</para>
            <para>The issuing of token objects may be blocked by the previous issue of block objects. Several block objects can be on issue at the same time. Blocks are released by disposing the block objects.</para>
            <para>Block objects will not be issued while a token object is issued. Token objects will not be issued while block objects are issued (nor while a token object is issued).</para>
            <para>Instance sequence numbers (specified in the constructor) can be used by external code to ensure that the program's locks are being taken in a consistent order (to avoid deadlocks).</para>
            <para>Each instance of this class is allocated a unique instance number internally that is used in <see cref="T:work.bacome.trace.cTrace"/> messages to aid debugging.</para>
            <para>Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.async.cExclusiveAccess.Released">
            <summary>
            Raised when exclusive access is released.
            </summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance with a name and sequence number.
            </summary>
            <param name="pName">The instance name to include in trace messages written by the instance.</param>
            <param name="pSequence">The sequence number to give the instance. Sequence numbers can be used by external code to ensure that the program's locks are being taken in a consistent order (to avoid deadlocks).</param>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetBlockAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a block on the issue of the exclusive access.
            This method will not complete until the block is issued or it throws due to <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the returned object to release the block.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.TryGetBlock(work.bacome.trace.cTrace.cContext)">
            <summary>
            May return a disposable object that represents a block on the issue of exclusive access.
            This method will return a block if the exclusive access is not currently granted, otherwise it will return <see langword="null"/>.
            Dispose the returned object to release the block.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetTokenAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a grant of exclusive access.
            This method will not complete until the exclusive access is granted or it throws due to <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the object to release the exclusive access.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cBlock">
            <summary>
            Instances represent a block on the issue of excusive access from a <see cref="T:work.bacome.async.cExclusiveAccess"/>. Dispose the instance to release the block.
            </summary>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cBlock.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cBlock.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cToken">
            <summary>
            Instances represent a grant of exclusive access from a <see cref="T:work.bacome.async.cExclusiveAccess"/>. Dispose the instance to release the exclusive access.
            </summary>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cToken.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cToken.ToString">
            <summary>Returns a string that represents the instance.</summary>
        </member>
        <member name="T:work.bacome.async.cMethodControl">
            <summary>
            Instances represent controls on the execution of an asynchronous method. Instances have a timeout and a <see cref="P:work.bacome.async.cMethodControl.CancellationToken"/>. 
            </summary>
            <remarks>
            Any timeout runs from when the instance is created; each time the value of the <see cref="P:work.bacome.async.cMethodControl.Timeout"/> property is retrieved only the time remaining is returned. 
            So if the method being controlled has many internal async calls, the timeout applies to the total time of all the internal calls.
            Infinite timeouts are supported (use <see cref="F:System.Threading.Timeout.Infinite"/> for the timeout).
            </remarks>
        </member>
        <member name="M:work.bacome.async.cMethodControl.#ctor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance with a timeout and a <see cref="P:work.bacome.async.cMethodControl.CancellationToken"/>. 
            </summary>
            <param name="pTimeout">The timeout to use (use <see cref="F:System.Threading.Timeout.Infinite"/> for no timeout).</param>
            <param name="pCancellationToken">The cancellation token to use (use <see cref="P:System.Threading.CancellationToken.None"/> for no cancellation).</param>
        </member>
        <member name="P:work.bacome.async.cMethodControl.Timeout">
            <summary>
            The amount of time remaining (or <see cref="F:System.Threading.Timeout.Infinite"/> if there is no timeout for this instance).
            </summary>
        </member>
        <member name="P:work.bacome.async.cMethodControl.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> being used.
            </summary>
        </member>
        <member name="T:work.bacome.async.cReleaser">
            <summary>Instances coordinate tasks (one worker task and many work creating tasks) using internal coordinating tasks.</summary>
            <remarks>
            <para>The worker task should;
            <list type="number">
            <item>Call the <see cref="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)"/> method to indicate that it is about to start working.</item>
            <item>Check for and do all the work available.</item>
            <item><see langword="await"/> on the task returned by <see cref="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)"/>.</item>
            </list>
            </para>
            <para>The work creating tasks should;
            <list type="number">
            <item>Queue items of work.</item>
            <item>Call the <see cref="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)"/> method.</item>
            </list>
            </para>
            <para>Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            <para>Also note that before disposing an instance the <see cref="T:System.Threading.CancellationToken"/> provided to the constructor must be cancelled, otherwise the dispose may never complete.</para>
            </remarks>
        </member>
        <member name="M:work.bacome.async.cReleaser.#ctor(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Initialises a new instance with a name and a <see cref="T:System.Threading.CancellationToken"/>.</para>
            </summary>
            <param name="pName">A name to use when tracing.</param>
            <param name="pCancellationToken">A cancellation token to use on the coordinating tasks.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets the current internal coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)">
            <summary>
            Completes the current internal coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.IsReleased(work.bacome.trace.cTrace.cContext)">
            <summary>
            Determines if the current coordinating task is complete.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)">
            <summary>
            Disposes the current internal coordinating task if it is complete, allowing a new internal coordinating task to be started.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="T:work.bacome.async.cAwaiter">
            <summary>
            Provides services for waiting on a number of tasks with timeout and/or cancellation.
            </summary>
            <remarks>
            Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(work.bacome.async.cMethodControl)">
            <summary>
            Initialises a new instance with a <see cref="T:work.bacome.async.cMethodControl"/>. If a timeout is specified then it runs from when the instance is created.
            </summary>
            <param name="pMC">The timeout and cancellation to use.</param>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance with a <see cref="T:System.Threading.CancellationToken"/> but no timeout.
            </summary>
            <param name="pCancellationToken">The cancellation token to use.</param>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAny(System.Threading.Tasks.Task,System.Threading.Tasks.Task[])">
            <summary>
            Returns the first task to complete from the set of passed tasks OR throws if the instance times-out or is cancelled.
            </summary>
            <param name="pTask">A task, can't be <see langword="null"/>.</param>
            <param name="pTasks">A set of tasks, any or all can be <see langword="null"/>.</param>
            <returns>The task that completed.</returns>
            <remarks>
            If the task that completes did so because it failed (timed-out, was cancelled, or threw) then this method throws.
            If the instance times-out or is cancelled before a task completes, then this method throws.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Threading.Tasks.Task[])">
            <summary>
            Returns a task that completes when all of the passed tasks complete OR when the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pTasks">The set of tasks to wait for. Tasks in the set can be <see langword="null"/>.</param>
            <returns></returns>
            <remarks>
            If any of the passed tasks fail (timed-out, were cancelled, or threw) then this method throws.
            If the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation before all the tasks complete then this method throws.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Returns a task that completes when all of the passed tasks complete OR when the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pTasks">The set of tasks to wait for. Tasks in the set can be <see langword="null"/>.</param>
            <returns></returns>
            <remarks>
            If any of the passed tasks fail (timed-out, were cancelled, or threw) then this method throws.
            If the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation before all the tasks complete then this method throws.
            </remarks>
        </member>
        <member name="T:work.bacome.trace.cTrace">
            <summary>
            Instances wrap a <see cref="T:System.Diagnostics.TraceSource"/> and provide services to write trace messages with indenting and context information.
            </summary>
            <remarks>
            <para>
            The concept is that trace messages are written in a context.
            The context starts with independent root-contexts.
            Sub-contexts can be established within root-contexts and within other sub-contexts.
            </para>
            <para>
            If a new sub-context is created for each call then call stack information can be built and included in the trace.
            </para>
            <para>
            The writing of context trace messages can be delayed until a non-context trace message is written, or context trace messages can be written as the contexts are created.
            (Note however that if the writing is delayed then the generation of the context trace messages is also delayed.
            If there are mutable objects to be included in the context trace message then this may lead to misleading context trace messages.
            It is done like this for efficiency reasons.)
            </para>
            <para>
            Tracing can be disabled.
            When tracing is disabled contexts are not created and trace messages are not emitted, so most of the tracing overhead is eliminated.
            Tracing is disabled under the following circumstances;
            <list type="bullet">
            <item>The assembly is compiled without the "TRACE" conditional attribute.</item>
            <item>There aren't any listeners attached to the <see cref="T:System.Diagnostics.TraceSource"/> when the instance is created.</item>
            <item>The <see cref="T:System.Diagnostics.TraceSource"/> isn't configured to emit critical messages when the instance is created.</item>
            <item>The <see cref="F:work.bacome.trace.cTrace.cContext.None"/> context is used.</item>
            </list>
            </para>
            <para>Root-contexts have a name and a number. The name is programmer assigned, the number is internally assigned and is unique.</para>
            <para>Trace messages are indented by a number of spaces that equals the context stack depth.</para>
            <para>Trace messages are written in a tab delimited form, the tab delimited columns contain;
            <list type="number">
            <item>The <see cref="T:System.Diagnostics.TraceSource"/> defined data.</item>
            <item>The date and time that the message was written.</item>
            <item>The name and number of the root-context associated with the trace message.</item>
            <item>The thread number on which the trace message was written.</item>
            <item>The space indented trace message.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.#ctor(System.String)">
            <summary>
            Initialises a new instance with a <see cref="T:System.Diagnostics.TraceSource"/> name.
            </summary>
            <param name="pTraceSourceName">The <see cref="T:System.Diagnostics.TraceSource"/> name to use.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.NewRoot(System.String,System.Boolean)">
            <summary>
            Returns a new independent root-context.
            </summary>
            <param name="pInstanceName">The name to give the context.</param>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts.</param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext">
            <summary>
            Instances represent a <see cref="T:work.bacome.trace.cTrace"/> tracing context.
            </summary>
            <remarks>
            Instances will be either a root-context or a sub-context. See <see cref="T:work.bacome.trace.cTrace"/> for more information.
            </remarks>
        </member>
        <member name="F:work.bacome.trace.cTrace.cContext.None">
            <summary>A tracing context that does not create contexts or emit messages. Used to suppress tracing.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRoot(System.String,System.Boolean)">
            <summary>
            Returns a new root-context tied (in name only) to the root-context of this instance.
            </summary>
            <param name="pInstanceName">A name to use when creating the name of the new context.</param>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a free form trace message.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Returns a new sub-context with a trace message in 'property setter' form.
            Use when creating a context for a property setter.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.Boolean,System.String)">
            <summary>
            Returns a new root-context with a trace message in 'object constructor' form.
            Use when creating a new root-context in a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.Boolean,System.String,System.String)">
            <summary>
            Returns a new root-context with a trace message in 'method' form.
            Use when creating a new root-context in a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a free form trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.String,System.String,System.Object)">
            <summary>
            Returns a new sub-context with a trace message in 'property setter' form.
            Use when creating a context for a property setter.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.String,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.String)">
            <summary>
            Returns a new root-context with a trace message in 'object constructor' form.
            Use when creating a new root-context in a constructor.
            </summary>
            <param name="pClass">The name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.String,System.String)">
            <summary>
            Returns a new root-context with a trace message in 'method' form.
            Use when creating a new root-context in a method.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.ContextTraceDelay">
            <summary>Indicates if context tracing is being delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace message.
            </summary>
            <param name="pTraceEventType">The trace event type.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.EmitsVerbose">
            <summary>Indicates if the underlying <see cref="T:System.Diagnostics.TraceSource"/> emits verbose trace messages. This value is determined at the time the containing <see cref="T:work.bacome.trace.cTrace"/> is constructed.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceCritical(System.String,System.Object[])">
            <summary>
            Writes a critcal trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with the event type set to <see cref="F:System.Diagnostics.TraceEventType.Error"/> and a default message.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.String,System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with the event type set to <see cref="F:System.Diagnostics.TraceEventType.Error"/>.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with a default message.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)">
            <summary>
            Writes a trace message reporting an exception.
            </summary>
            <param name="pTraceEventType"></param>
            <param name="pMessage"></param>
            <param name="e"></param>
            <returns>Always returns <see langword="false"/>.</returns>
            <remarks>
            Designed for use in a conditional catch clause to trace the exception as it 'flies by': e.g.
            <code>catch (Exception e) when (lContext.TraceException(e)) { }</code>.
            </remarks>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext.cRoot">
            <summary>
            Instances represent a <see cref="T:work.bacome.trace.cTrace"/> root-context.
            </summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRoot(System.String,System.Boolean)">
            <summary>
            Returns a new root-context tied (in name only) to the root-context of this instance.
            </summary>
            <param name="pInstanceName">A name to use when creating the name of the new context.</param>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewGeneric(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a free form trace message.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewSetProp(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Returns a new sub-context with a trace message in 'property setter' form.
            Use when creating a context for a property setter.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRootObject(System.Boolean,System.String)">
            <summary>
            Returns a new root-context with a trace message in 'object constructor' form.
            Use when creating a new root-context in a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRootMethod(System.Boolean,System.String,System.String)">
            <summary>
            Returns a new root-context with a trace message in 'method' form.
            Use when creating a new root-context in a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.cRoot.ContextTraceDelay">
            <summary>Indicates if context tracing is being delayed for the context and its sub-contexts. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace message.
            </summary>
            <param name="pTraceEventType">The trace event type.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.cRoot.EmitsVerbose">
            <summary>Indicates if the underlying <see cref="T:System.Diagnostics.TraceSource"/> emits verbose trace messages. This value is determined at the time the containing <see cref="T:work.bacome.trace.cTrace"/> is constructed.</summary>
        </member>
    </members>
</doc>
