<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imapclient</name>
    </assembly>
    <members>
        <member name="T:work.bacome.imapclient.eConnectionState">
            <summary>
            Connection state values. See <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notconnected">
            <summary>The instance is not connected and never has been.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.connecting">
            <summary>The instance is in the process of connecting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notauthenticated">
            <summary>The instance is in the process of connecting, it is currently not authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.authenticated">
            <summary>The instance is in the process of connecting, it is currently authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.enabled">
            <summary>The instance is in the process of connecting, it is has enabled all the server features it is going to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notselected">
            <summary>The instance connected, there is no mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.selected">
            <summary>The instance connected, there is a mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.disconnected">
            <summary>
            <para>The instance is not connected, but it was connected, or tried to connect, once.</para>
            <para>
            In this state some <see cref="T:work.bacome.imapclient.cIMAPClient"/> properties retain their values from when the instance was connecting/ was connected.
            For example the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> property may have a value in this state, whereas it definitely won't have one in the <see cref="F:work.bacome.imapclient.eConnectionState.notconnected"/> state.
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient">
            <summary>
            Instances of this class can connect to an IMAP server.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> set the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> properties at a minimum.</para>
            <para>Also consider setting the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/> property.</para>
            <para>Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.Version">
            <summary>The version number of the library. Used in the default <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> value.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.ReleaseDate">
            <summary>The release date of the library. Used in the default <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> value.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.TraceSourceName">
            <summary>The trace source name used when tracing. See <see cref="T:work.bacome.trace.cTrace"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)">
            <summary>
            Constructor. Optionally specify the instance name used in the tracing done by the instance (see <see cref="T:work.bacome.trace.cTrace"/>).
            </summary>
            <param name="pInstanceName">The tracing instance name to use. See <see cref="T:work.bacome.trace.cTrace"/>.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.InstanceName">
            <summary>
            The instance name used in tracing. See <see cref="T:work.bacome.trace.cTrace"/>. Set using the constructor.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext">
            <summary>
            The <see cref="T:System.Threading.SynchronizationContext"/> on which callbacks (including events) are made. May be set to null.
            </summary>
            <remarks>
            <para>If set to null callbacks are made by the thread that discovers the need to do the callback.</para>
            <para>Defaults to the <see cref="T:System.Threading.SynchronizationContext"/> of the instantiating thread.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.PropertyChanged">
            <summary>
            Fired when a property value changes.
            </summary>
            <remarks>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.ResponseText">
            <summary>
            Fired when the server sends response text.
            </summary>
            <remarks>
            <para>The IMAP spec says that <see cref="F:work.bacome.imapclient.eResponseTextCode.alert"/> text MUST be brought to the user's attention. See <see cref="F:work.bacome.imapclient.cResponseTextEventArgs.Text"/>.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkReceive">
            <summary>
            Fired when the server sends a response.
            </summary>
            <remarks>
            <para>Intended for debugging the library.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkSend">
            <summary>
            Fired when the client sends an IMAP command.
            </summary>
            <remarks>
            <para>Intended for debugging the library.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged">
            <summary>
            Fired when the backing data of a <see cref="T:work.bacome.imapclient.cMailbox"/> property changes.
            </summary>
            <remarks>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery">
            <summary>
            Fired when the server sends notification of new messages in a <see cref="T:work.bacome.imapclient.cMailbox"/>.
            </summary>
            <remarks>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged">
            <summary>
            Fired when the backing data of a <see cref="T:work.bacome.imapclient.cMessage"/> property changes.
            </summary>
            <remarks>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.CallbackException">
            <summary>
            Fired when an exception is raised by a callback or event handler.
            </summary>
            <remarks>
            <para>The library ignores the exception other than raising this event.</para>
            <para>Intended for debugging consuming software.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is non-null, events are fired on the specified <see cref="T:System.Threading.SynchronizationContext"/>.</para>
            <para>If an exception is raised in an event handler of this event the exception is ignored.</para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Timeout">
            <summary>
            The timeout for library calls where no operation specific value for a timeout can be (or has been) specified.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.CancellableCount">
            <summary>
            The number of currently running cancellable operations. See <see cref="M:work.bacome.imapclient.cIMAPClient.Cancel"/> and <see cref="T:work.bacome.async.cCancellationManager"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Cancel">
            <summary>
            Cancels the currently running cancellable operations. See <see cref="T:work.bacome.async.cCancellationManager"/> for more detail.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectionState">
            <summary>The connection state of the instance.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsUnconnected">
            <summary>True if the instance is currently unconnected. See <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsConnected">
            <summary>True if the instance is currently connected. See <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Capabilities">
            <summary>
            The capabilities of the connected (or most recently connected) server. May be null.
            </summary>
            <remarks>
            The capabilities reflect the server capabilities less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions">
            <summary>
            The extensions that the library has enabled on the connected (or most recently connected) server.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId">
            <summary>
            The accountid of the current (or most recent) connection. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral">
            <summary>
            The login referral (RFC 2221), if received. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities">
            <summary>
            The server capabilities that the instance should ignore. Must be set before connecting. See <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> and <see cref="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities"/>.
            </summary>
            <remarks>
            <para>Useful for testing or if your server (or the library) has a bug in its implementation of an IMAP extension.</para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Server">
            <summary>
            The server that the instance should connect to. There are helper methods to set this property. Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. Can only be set while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, defaulting the port to 143 and SSL to false. Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <param name="pHost">The host name.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, specifying SSL, defaulting the port to 993 (SSL) or 143 (no SSL). Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <param name="pHost">The host name.</param>
            <param name="pSSL">Indicates if SSL should be used.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>. Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <param name="pHost">The host name.</param>
            <param name="pPort">The port number.</param>
            <param name="pSSL">Indicates if SSL should be used.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Credentials">
            <summary>
            The credentials to be used when connecting. There are helper methods to set this property. Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. Can only be set while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to no credentials. Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <remarks>
            Useful to retrieve property values of the server (e.g. <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>) without connecting, or when there is external authentication.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to anonymous credentials. Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>. May fall back to IMAP LOGIN if SASL ANONYMOUS isn't available.
            </summary>
            <param name="pTrace">The trace information sent to the server.</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try the SASL ANONYMOUS mechanism even if it isn't advertised.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to plain credentials. Can only be called while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>. May fall back to IMAP LOGIN if SASL PLAIN isn't available.
            </summary>
            <param name="pUserId">The userid to use.</param>
            <param name="pPassword">The password to use.</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try the SASL PLAIN mechanism even if it isn't advertised.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals">
            <summary>
            Indicates if the calling program can handle mailbox referrals. If this is set to false the instance will not return remote mailboxes in mailbox lists.
            </summary>
            <remarks>
            <para>Being able to handle mailbox referrals means handling the exceptions that may be raised by the library when accessing remote mailboxes.</para>
            <para>See RFC 2193, <see cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>, <see cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>, <see cref="F:work.bacome.imapclient.cResponseText.Strings"/>, <see cref="T:work.bacome.imapclient.cURL"/>.</para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData">
            <summary>
            Determines what details about mailboxes are requested from the server. Can only be set while unconnected: see <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration">
            <summary>
            Controls the size of writes to the network. You might want to limit this to increase the speed with which you can terminate the instance.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration">
            <summary>
            Sets parameters that control what the instance does while idle. Set to null to stop the instance from doing anything. If set, the instance determines that it is idle after the specified time and then issues periodic IMAP IDLE (RFC 2177) or CHECK/ NOOP commands.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration">
            <summary>
            The default control on the size of reads from streams provided to append. You might want to limit this to increase the speed with which you can terminate the instance.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration">
            <summary>
            The configuration that controls the number of messages fetched at one time. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration">
            <summary>
            The configuration that controls the number of bytes fetched from the server at one time. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration">
            <summary>
            The configuration that controls the number of bytes written to the output stream at one time when fetching. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Encoding">
            <summary>
            The encoding to use when RFC 6855 is not supported by the server. The default value is UTF8.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientId">
            <summary>
            The ASCII ID (RFC 2971) details to send to the server during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. If the server supports RFC 6855 and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> is set, those details will be used in preference to these ones. The default details are those of the library. Set this to null to send nothing.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8">
            <summary>
            The UTF8 ID (RFC 2971) details to send to the server during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. If this is null or if the server doesn't support RFC 6855 then <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> is used instead. The default is null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ServerId">
            <summary>
            The ID details of the connected (or last connected) server, if it supports the ID (RFC 2971). Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Namespaces">
            <summary>
            The namespace details for the connected (or last connected) account. Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. If Namespace (RFC 2342) is not supported by the server the library creates one personal namespace using the delimiter retrieved using IMAP LIST.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Inbox">
            <summary>
            The inbox of the connected (or last connected) account. Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails">
            <summary>
            Details of the currently selected mailbox. Will be null if there is no mailbox currently selected. See <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox">
            <summary>
            The currently selected mailbox. Will be null if there is no mailbox currently selected. See <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)">
            <summary>
            Returns an object that represents the named mailbox.
            </summary>
            <param name="pMailboxName">The mailbox name.</param>
            <returns>An object representing the named mailbox.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts">
            <summary>
            Returns the number of subscriptions to the various events. Intended for debugging use. Use it to check that events are being 'unsubscribed' correctly.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Dispose">
            <summary>
            Instances of this class contain a number of disposable resources. You should call dispose when you are finished with the instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:work.bacome.imapclient.cIMAPClient.Connect" -->
        <member name="M:work.bacome.imapclient.cIMAPClient.ConnectAsync">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/></summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.CreateAsync(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems">
            <summary>
            Specifies the cache items that are fetched by default when message lists are generated using <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultSort">
            <summary>
            Specifies the sort that is used by default when message lists are generated using <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            <para>Store flags for a set of messages.</para>
            <para>The mailbox that the messages are in must be selected.</para>
            </summary>
            <param name="pMessages">The set of messages.</param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags">The flags to store.</param>
            <param name="pIfUnchangedSinceModSeq">
            <para>The modseq to use in the unchangedsince clause of a conditional store (RFC 7162).</para>
            <para>Can only be specified if the mailbox supports RFC 7162.</para>
            <para>If the message has been modified since the specified modseq the server should fail the update.</para>
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>For a set of messages ensure that the specified items are cached.</para>
            </summary>
            <param name="pMessages">The set of messages.</param>
            <param name="pItems">The set of cache items.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where the cache does NOT contain the requested items (i.e. where the fetch failed).</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.FetchAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards.</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter.</param>
            <param name="pHasSubscribedChildren">Include in the list mailboxes that are not themselves subscribed but that have subscribed children.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SubscribedAsync(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards.</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.MailboxesAsync(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Poll">
            <summary>
            Poll the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for us.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.PollAsync">
            <summary>
            Poll the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for us.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts">
            <summary>
            Counts of event subscriptions. See <see cref="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.PropertyChangedSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.PropertyChanged"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.ResponseTextSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.ResponseText"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.NetworkReceiveSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkReceive"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.NetworkSendSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkSend"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MailboxPropertyChangedSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MailboxMessageDeliverySubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.MessagePropertyChangedSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMessage"/> with some <see cref="E:work.bacome.imapclient.cMessage.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.sEventSubscriptionCounts.CallbackExceptionSubscriptionCount">
            <summary>The number of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient._Tests(work.bacome.trace.cTrace.cContext)">
            <summary>
            Internal library tests.
            </summary>
            <param name="pParentContext"></param>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataSets">
            <summary>
            Sets of data that can be requested about a mailbox. The exact data items requested depend on the value of <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>. See <see cref="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:work.bacome.imapclient.fMailboxCacheDataSets.list" -->
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub">
            <summary>
            Data returned by the IMAP LSUB command. This data affects the <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/> property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:work.bacome.imapclient.fMailboxCacheDataSets.status" -->
        <member name="T:work.bacome.imapclient.eStoreOperation">
            <summary>
            The type of store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.add">
            <summary>Add flags to the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.remove">
            <summary>Remove flags from the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.replace">
            <summary>Replace the flags.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fCacheAttributes">
            <summary>
            A set of IMAP message attributes that can be cached in the internal message cache.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kHeaderFieldName">
            <summary>
            Contains named message header field name constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            <para>A unique header field name collection.</para>
            <para>Header field names are not case sensitive.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.None">
            <summary>An empty collection.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.References">
            <summary>A collection containing the <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/> header field name.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.Importance">
            <summary>A collection containing the <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/> header field name.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String)">
            <summary>Returns true if the collection contains the name (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Union(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive union.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Intersect(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive intersect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Except(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive except.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNameList">
            <summary>
            <para>A unique header field name list.</para>
            <para>Header field names are not case sensitive and can only be formed from <see cref="F:work.bacome.imapclient.support.cCharset.FText"/> characters.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String)">
            <summary>Returns true if the list contains the name (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])">
            <summary>Returns true if the list contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if the list contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String)">
            <summary>Adds the name if it isn't already in the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String[])">
            <summary>Adds each name if it isn't already in the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds each name if it isn't already in the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String)">
            <summary>Removes the name from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String[])">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Union(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive union.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Intersect(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive intersect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Except(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive except.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderField">
            <summary>
            Represents a message header field.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Name">
            <summary>
            The header field name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Value">
            <summary>
            The header field value.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgId">
            <summary>
            Represents a header field where the value is a message-id.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgId.MsgId">
            <summary>
            The value of the field as a normalised (delimiters, quoting, comments and white space removed) message-id.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgIds">
            <summary>
            Represents a header field where the value is a set of message-ids.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgIds.MsgIds">
            <summary>
            The value of the field as normalised (delimiters, quoting, comments and white space removed) message-ids.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldImportance">
            <summary>
            Represents a header field where the value is an importance.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Low">
            <summary>The string constant for low importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Normal">
            <summary>The string constant for normal importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.High">
            <summary>The string constant for high importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Importance">
            <summary>The value of the field as an importance code.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.FieldValue(work.bacome.imapclient.eImportance)">
            <summary>Returns the string constant associated with the passed <paramref name="pImportance"/>.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFields">
            <summary>
            A collection of message header fields for a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFields.None">
            <summary>An empty collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(System.String)">
            <summary>
            <para>Returns true if the collection has been populated with all header fields of the name specified.</para>
            <para>Note that a true return value does not mean that the collection contains any fields with the name specified, as the message may not have any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>Whether the collection has been populated with the fields of the name specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns true if the collection has been populated with all header fields of all the names specified.</para>
            <para>Note that a true return value does not mean that the collection contains any fields with the names specified, as the message may not have any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>Whether the collection has been populated with all the fields of the names specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ContainsNone(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns false if the collection has been populated with any header fields of the names specified.</para>
            <para>Note that a false return value does not mean that the collection contains any fields with the names specified, as the message may not have had any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>Whether the collection has not been populated with any fields of the names specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Missing(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns the header field names from the provided collection of names that this collection of fields has not been populated with.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>The header field names from the provided collection of names that this collection of fields has not been populated with.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.FirstNamed(System.String)">
            <summary>
            <para>Returns one header field of the name specified, or null if there are no header fields of that name.</para>
            <para>If the collection has not been populated with the specified header field name then this method will throw.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>A header field instance with the name specified or null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.AllNamed(System.String)">
            <summary>
            <para>Returns all header fields with the header field name specified. Will return zero fields if there are no header fields of that name.</para>
            <para>If the collection has not been populated with the specified header field name then this method will throw.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>The set of header fields with the name specified.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.References">
            <summary>
            <para>Returns the normalised (delimiters, quoting, comments and white space removed) message-ids from the references header field, or null if there was no references header field or if the references header field could not be parsed.</para>
            <para>If the collection has not been populated with the references header field then this method will throw.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.Importance">
            <summary>
            <para>Returns the importance value from the importance header field, or null if there was no importance header field or if the importance header field could not be parsed.</para>
            <para>If the collection has not been populated with the importance header field then this method will throw.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eImportance">
            <summary>The message importance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedbackItem">
            <summary>
            <para>Returned from copy operations if the server supports the UIDCOPY response code of RFC 4315.</para>
            <para>Contains a pair of UIDs of messages involved in the copy.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedback">
            <summary>
            <para>Returned from copy operations if the server supports the UIDCOPY response code of RFC 4315.</para>
            <para>Contains pairs of UIDs of messages involved in the copy.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPropertyFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.Timeout">
            <summary>The timeout for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.Increment">
            <summary>
            <para>The progress increment callback for the operation</para>
            <para>Called many times with an integer specifying the number of messages fetched since the last call.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Timeout">
            <summary>The timeout for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Increment">
            <summary>
            <para>The progress increment callback for the operation</para>
            <para>Called many times with an integer specifying the number of messages fetched since the last call.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Write">
            <summary>The configuration for controlling the output stream batch/ buffer size.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageFetchConfiguration.SetCount">
            <summary>
            <para>The progress initialisation callback for the operation</para>
            <para>Called once at the begining of the operation with an integer specifying the number of messages that will be fetched.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eAccountType">
            <summary>
            The type of account. See <see cref="T:work.bacome.imapclient.cAccountId"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.none">
            <summary>The library has no idea about the account.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.anonymous">
            <summary>The account is an anonymous one.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.userid">
            <summary>The account has a userid.</summary>"
        </member>
        <member name="T:work.bacome.imapclient.cAccountId">
            <summary>
            Describes an IMAP account. See <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Host">
            <summary>
            The host that contains the account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Type">
            <summary> 
            The account type. If the connection was IMAP PREAUTHed then this will be <see cref="F:work.bacome.imapclient.eAccountType.none"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.UserId">
            <summary>
            The account's userid, if any. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.fCapabilities">
            <summary>
            A set of server capabilities. The flags in this set represent the capabilities that the library understands in some way. The full list of server capabilities can be found in <see cref="F:work.bacome.imapclient.cCapabilities.Capabilities"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCapabilities">
            <summary>
            A set of server capabilities. See <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>. The properties of this class reflect the flags set in <see cref="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.Capabilities">
            <summary>
            The capabilities as presented by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms">
            <summary>
            The authentication mechanisms supported by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities">
            <summary>
            The set of server capabilities that are in use. This is the recognised elements of <see cref="F:work.bacome.imapclient.cCapabilities.Capabilities"/> less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginDisabled">
            <summary>IMAP LOGINDISABLED</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.StartTLS">
            <summary>IMAP STARTTLS</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Idle">
            <summary>RFC 2177 - IDLE</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralPlus">
            <summary>RFC 7888 - LITERAL+</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralMinus">
            <summary>RFC 7888 - LITERAL-</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Enable">
            <summary>RFC 5161 - ENABLE</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Accept">
            <summary>RFC 6855 - UTF8=ACCEPT</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Only">
            <summary>RFC 6855 - UTF8=ONLY</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListExtended">
            <summary>RFC 5258 - LIST extensions</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Children">
            <summary>RFC 3348 - Child mailboxes</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SASL_IR">
            <summary>RFC 4959 - SASL initial client response</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginReferrals">
            <summary>RFC 2221 - Login referrals</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.MailboxReferrals">
            <summary>RFC 2193 - Mailbox referrals</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Id">
            <summary>RFC 2971 - Id</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Binary">
            <summary>RFC 3516 - Binary content</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Namespace">
            <summary>RFC 2342 - Namespaces</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListStatus">
            <summary>RFC 5819 - STATUS information in LIST</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SpecialUse">
            <summary>RFC 6154 - Special use</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESearch">
            <summary>RFC 4731 - ESEARCH</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Sort">
            <summary>RFC 5256 - SORT</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SortDisplay">
            <summary>RFC 5256 - SORT=DISPLAY</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESort">
            <summary>RFC 5267 - ESORT</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.CondStore">
            <summary>RFC 7162 - CONDSTORE</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.QResync">
            <summary>RFC 7162 - QRESYNC</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentials">
            <summary>
            A set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Type">
            <summary>
            The account type that the credentials give access to.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.UserId">
            <summary>
            The userid for the credentials. May be null for <see cref="F:work.bacome.imapclient.eAccountType.anonymous"/> and <see cref="F:work.bacome.imapclient.eAccountType.none"/>; must not be null otherwise.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Login">
            <summary>
            The parameters to use with the IMAP LOGIN command for these credentials.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.TryAllSASLs">
            <summary>
            Whether all the contained SASL authentication mechanisms should be tried regardless of whether they are advertised by the server or not.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.mSASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCredentials.SASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.None">
            <summary>
            An empty set of credentials. Useful for testing, getting the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> the server offers without connecting and for pre-authorised connections.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Anonymous(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns an anonymous set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
            <param name="pTrace">The trace information to use (should be a valid email address).</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try IMAP AUTHENTICATE ANONYMOUS even if it isn't advertised.</param>
            <returns>Anonymous credentials.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Plain(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns a plain set of credentials to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try IMAP AUTHENTICATE PLAIN even if it isn't advertised.</param>
            <returns>Plain credentials.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cLogin">
            <summary>
            Parameters to use with the IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.TLSRequirement">
            <summary>
            The TLS requirement for the IMAP LOGIN command to be used with this userid and password.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cLogin.TryConstruct(System.String,System.String,work.bacome.imapclient.eTLSRequirement,work.bacome.imapclient.cLogin@)">
            <summary>
            <para>IMAP LOGIN only allows ASCII userids and passwords, so this may fail.</para>
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
            <param name="rLogin"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cServer">
            <summary>
            An IMAP server to use during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. See <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Host">
            <summary>The host name.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Port">
            <summary>The port number.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.SSL">
            <summary>Indicates if SSL should be used.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String)">
            <summary>
            Port set to 143 and SSL set to false.
            </summary>
            <param name="pHost">The host name.</param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Boolean)">
            <summary>
            Port set to 143 if SSL is false, otherwise set to 993.
            </summary>
            <param name="pHost">The host name.</param>
            <param name="pSSL">Indicates if SSL should be used.</param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="pHost">The host name.</param>
            <param name="pPort">The port number.</param>
            <param name="pSSL">Indicates if SSL should be used.</param>
        </member>
        <member name="T:work.bacome.imapclient.eTLSRequirement">
            <summary>
            The TLS requirement for the <see cref="T:work.bacome.imapclient.cLogin"/> and/ or <see cref="T:work.bacome.imapclient.cSASL"/> components of <see cref="T:work.bacome.imapclient.cCredentials"/> to be used during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <remarks>
            TLS can be established immediately upon connect if the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> specifies <see cref="F:work.bacome.imapclient.cServer.SSL"/> 
            or
            after connecting using the IMAP STARTTLS command if both the client and server support it - see <see cref="P:work.bacome.imapclient.cCapabilities.StartTLS"/>, <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.indifferent">
            <summary>Don't care whether TLS is active or not.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.required">
            <summary>TLS must be active.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.disallowed">
            <summary>TLS must not be active.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.eDecodingRequired">
            <summary>
            The decoding required for message data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.unknown">
            <summary>The decoding required is unknown.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.none">
            <summary>No decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.quotedprintable">
            <summary>Quoted-printable decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.base64">
            <summary>BASE64 decoding is required.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheData">
            <summary>
            A set of optionally requested mailbox attributes. See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.subscribed">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.children">
            <summary>
            The backing data for <seea cref="P:work.bacome.imapclient.cMailbox.HasChildren"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.specialuse">
            <summary>
            The backing data for;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
            </list>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.messagecount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.recentcount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidnext">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.unseencount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/>. Note that the server or the mailbox may not support CONDSTORE (RFC 7162) so the value may not actually be requested.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.allstatus">
            <summary>
            The backing data retrieved by the IMAP STATUS command.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItemBase">
            <summary>
            Base class for feedback on one message from a store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.ReceivedFlagsUpdate">
            <summary>
            True if a fetch response containing the flags for this message was received during the store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.WasNotUnchangedSince">
            <summary>
            True if this message was mentioned in the RFC 7162 MODIFIED response code from the store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedback">
            <summary>
            Contains feedback from a store operation.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback.
            </summary>
            <returns>The summary.</returns>
        </member>
        <member name="T:work.bacome.imapclient.sStoreFeedbackSummary">
            <summary>
            <para>A summary of a store operation.</para>
            <para>Each message counts towards ONE of;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/></item>
            </list>
            </para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/> + <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> is the number of definite non-updates.</para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> > 0 indicates that a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may be worth trying to get any pending updates (which should convert all the notreflects to expunged or reflects).</para>
            <para><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/> > 0 indicates that a blind update was done so there isn't enough information to say if the store happened or not.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount">
            <summary>The number where a an IMAP FETCH was received during the command execution and no IMAP MODIFIED response was received (=> _likely_ to have been updated by the command).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount">
            <summary>An IMAP MODIFIED response was received (=> _NOT_ updated by the command).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount">
            <summary>The number where the message cache indicates that the message is expunged.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount">
            <summary>The number where the internal message handle isn't known (e.g. from a <see cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>) or the message cache does not contain the flags.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount">
            <summary>The number where the flags in the message cache reflect the update.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount">
            <summary>The number where the flags in the message cache do not reflect the update.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a UID store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedback">
            <summary>
            Contains feedback from a UID store operation.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback.
            </summary>
            <returns>The summary.</returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cBinarySizes">
            <summary>
            A mapping from a message part to a size in bytes for message parts that can be fetched using the BINARY (RFC 3516) command. See <see cref="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes"/>.
            </summary>
            <remarks>
            <para>Using the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> or <see cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/> methods may create values in this map.</para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.support.cBinarySizes.None">
            <summary>
            An empty mapping.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.support.cBinarySizes.op_Addition(work.bacome.imapclient.support.cBinarySizes,work.bacome.imapclient.support.cBinarySizes)">
            <summary>
            Combine two maps into one.
            </summary>
            <param name="pA">The first map to combine.</param>
            <param name="pB">The second map to combine.</param>
            <returns>A map containing the union of the two specified maps.</returns>
        </member>
        <member name="T:work.bacome.imapclient.support.iMessageHandle">
            <summary>
            Represents a message in the internal message cache.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Cache">
            <summary>The cache that this message belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.CacheSequence">
            <summary>The sequence of this message in the cache.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Expunged">
            <summary>True if the server indicated that the message has been expunged.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Attributes">
            <summary>The message attributes that the cache currently contains for this message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Body">
            <summary>The IMAP BODY data - i.e. the <see cref="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure"/> data without the extension data (see <see cref="T:work.bacome.imapclient.cBodyPartExtensionData"/>).</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure">
            <summary>The IMAP BODYSTRUCTURE data.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Envelope">
            <summary>The IMAP ENVELOPE data.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Flags">
            <summary>The IMAP FLAGS data.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.ModSeq">
            <summary>The RFC 7162 modification sequence. This may be zero if the mailbox does not support CONDSTORE.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Received">
            <summary>The IMAP INTERNALDATE data.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Size">
            <summary>The IMAP RFC822.SIZE data.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.UID">
            <summary>The UID of the message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.HeaderFields">
            <summary>A (possibly partial) set of header fields for the message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes">
            <summary>A (possiblity partial) set of binary part sizes for the message.</summary>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Contains(work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines if all the specified items are cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.ContainsNone(work.bacome.imapclient.cCacheItems)">
            <summary>
            Determines if none of the specified items are cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Missing(work.bacome.imapclient.cCacheItems)">
            <summary>
            Returns those items from the specified items that are not cached.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cCharset">
            <summary>
            <para>Represents a set of characters that are valid in a parsing context.</para>
            <para>Each static member defines a different set of characters.</para>
            <para>Intended for internal use.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailbox">
            <summary>
            <para>Provides an API that allows interaction with an IMAP mailbox.</para>
            <para>Instances are only valid whilst the containing cIMAPClient remains connected. Reconnecting the client will not bring mailbox instances back to life.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a mailbox property value change.
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.MessageDelivery">
            <summary>
            Fired when the server notifies the client that messages have arrived in the mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Path">
            <summary>
            <para>The mailbox name including the full hierarchy.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in <see cref="P:work.bacome.imapclient.cMailbox.Path"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ParentPath">
            <summary>
            <para>The path of the parent mailbox.</para>
            <para>Will be null if there is no parent mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Name">
            <summary>
            <para>The name of the mailbox.</para>
            <para>As compared to <see cref="P:work.bacome.imapclient.cMailbox.Path"/> this does not include the hierarchy.</para>
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsInbox">
            <summary>
            <para>True if this instance represents the inbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Exists">
            <summary>
            <para>True if the mailbox exists on the server.</para>
            <para>Subscribed mailboxes and levels in the mailbox hierarchy do not need to exist.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanHaveChildren">
            <summary>
            <para>False if the mailbox can definitely not contain child mailboxes.</para>
            <para>See the IMAP \Noinferiors flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanSelect">
            <summary>
            <para>True if the mailbox can be selected.</para>
            <para>See the IMAP \Noselect flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsMarked">
            <summary>
            <para>Indicates if the mailbox has been marked "interesting" by the server.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \Marked and \Unmarked flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsRemote">
            <summary>
            <para>If true the mailbox is definitely a remote mailbox.</para>
            <para>If the connected server supports RFC 5258, if this flag is false the mailbox is definitely not a remote mailbox, otherwise it still may be one.</para>
            <para>Remote mailboxes will never be returned by the library if the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/> is set to false.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasChildren">
            <summary>
            <para>Indicates if the mailbox had children when the property was refreshed.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \HasChildren and \HasNoChildren flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsAll">
            <summary>
            <para>If true the mailbox was marked with the IMAP \All flag indicating that the mailbox contains all messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsArchive">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Archive flag indicating that the mailbox contains the message archive.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsDrafts">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Drafts flag indicating that the mailbox contains draft messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsFlagged">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Flagged flag indicating that the mailbox contains flagged messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsJunk">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Junk flag indicating that the mailbox contains junk mail.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsSent">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Sent flag indicating that the mailbox contains copies of messages that have been sent.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsTrash">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Trash flag indicating that the mailbox contains copies of messages that are deleted.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSubscribed">
            <summary>
            <para>Indicates if this mailbox is subscribed to or not.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageCount">
            <summary>
            <para>The number of messages in the mailbox.</para>
            <para>Null indicates that the messagecount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.RecentCount">
            <summary>
            <para>The number of recent messages in the mailbox.</para>
            <para>Null indicates that the recentcount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNext">
            <summary>
            <para>The predicted UID that will be given to the next new message entering the mailbox.</para>
            <para>Null indicates that the uidnext is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected, zero indicates that the value is unknown.</para>
            <para>When the mailbox is selected this property may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount"/> for the potential inaccuracy in this property value.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount">
            <summary>
            <para>This is the number of messages that arrived since the mailbox was opened for which the library has not seen the value of the UID.</para>
            <para>Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/> is.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDValidity">
            <summary>
            <para>The UIDValidity of the mailbox.</para>
            <para>Null indicates that the mailbox does not support UIDs or that the UIDValidity is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>).</para>
            <para>This property always has a value when the mailbox is selected, however zero indicates that the server does not support UIDs. (Also see <see cref="P:work.bacome.imapclient.cMailbox.UIDNotSticky"/>.)</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenCount">
            <summary>
            <para>The number of unseen messages in the mailbox.</para>
            <para>Null indicates that the unseencount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but it may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount"/> for the potential inaccuracy of this property value.</para>
            <para>To initialise the value of this property value when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/>.</para>
            <para>To maintain the value of this property when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/> on the new messages that arrive (see <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>).</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount">
            <summary>
            <para>This is the number of messages for which the library is unsure of the value of the IMAP \Seen flag.</para>
            <para>Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> is.</para>
            <para>To keep this value at zero see the technique outlined here: <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HighestModSeq">
            <summary>
            <para>See RFC 7162.</para>
            <para>Null indicates that the highestmodseq is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but zero indicates that RFC 7162 is not supported on the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelected">
            <summary>
            <para>Indicates if the mailbox has been selected once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox has been selected for update once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedReadOnly">
            <summary>
            <para>Indicates if the mailbox has been selected readonly once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNotSticky">
            <summary>
            <para>Indicates if the mailbox does not have persistent UIDs.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageFlags">
            <summary>
            <para>The defined flags in the mailbox.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected for update.</para>
            <para>Null if the mailbox has never been selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected readonly.</para>
            <para>Null if the mailbox has never been selected readonly.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelected">
            <summary>
            <para>Indicates if the mailbox is currently the selected mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox is currently selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsAccessReadOnly">
            <summary>
            <para>Indicates if the mailbox is currently selected but the mailbox can't be modified.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Gets the mailbox's child mailboxes.</para>
            </summary>
            <param name="pDataSets">
            <para>The sets of data to retrieve when getting the child mailboxes.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Gets the mailbox's subscribed child mailboxes.</para>
            <para>Note that mailboxes that do not currently exist may be returned.</para>
            </summary>
            <param name="pDescend">If true all descendants are returned (not just children, also grandchildren ...).</param>
            <param name="pDataSets">
            <para>The sets of data to retrieve when getting the child mailboxes.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)">
            <summary>
            <para>Creates a child mailbox of this mailbox.</para>
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns>An object representing the newly created mailbox.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChildAsync(System.String,System.Boolean)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribe">
            <summary>
            <para>Subscribe to this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribeAsync">
            <summary>
            <para>Subscribe to this mailbox.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Unsubscribe">
            <summary>
            <para>Unsubscribe from this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UnsubscribeAsync">
            <summary>
            <para>Unsubscribe from this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Rename(System.String)">
            <summary>
            <para>Change the name of this mailbox.</para>
            <para>Note that this leaves the mailbox in its containing mailbox, just changing the last part of the path hierarchy.</para>
            </summary>
            <param name="pName">The new mailbox name.</param>
            <returns>An object representing the newly created mailbox.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RenameAsync(System.String)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Rename(System.String)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Delete">
            <summary>
            <para>Delete this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.DeleteAsync">
            <summary>
            <para>Delete this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)">
            <summary>
            <para>Select this mailbox.</para>
            <para>Selecting a mailbox un-selects the previously selected mailbox (if there was one).</para>
            </summary>
            <param name="pForUpdate">Indicates if the mailbox should be selected for update or not</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SelectAsync(System.Boolean)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)">
            <summary>
            <para>Expunge messages marked with the deleted flag (see <see cref="P:work.bacome.imapclient.cMessage.Deleted"/>) from the mailbox.</para>
            <para>Setting <paramref name="pAndUnselect"/> to true also un-selects the mailbox. This reduces the amount of network activity associated with the expunge.</para>
            </summary>
            <param name="pAndUnselect">Indicates if the mailbox should also be un-selected.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ExpungeAsync(System.Boolean)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            <para>Get a list of messages contained in the mailbox from the server.</para>
            </summary>
            <param name="pFilter">
            <para>The filter to use to restrict the set of messages returned.</para>
            <para>Use the static members and operators of the <see cref="T:work.bacome.imapclient.cFilter"/> class to create an optional message filter.</para>
            </param>
            <param name="pSort">
            <para>The sort to use to order the set of messages returned.</para>
            <para>Use the static members of the <see cref="T:work.bacome.imapclient.cSortItem"/> class as parameters to a <see cref="T:work.bacome.imapclient.cSort"/> constructor to create an optional sort specification.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/>) will be used.</para>
            </param>
            <param name="pItems">
            <para>The set of message cache items to ensure are cached for the returned messages.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</para>
            </param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>Get a list of messages from a set of handles.</para>
            <para>Useful when handling the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event.</para>
            </summary>
            <param name="pHandles">A set of message handles.</param>
            <param name="pItems">
            <para>The set of message cache items to ensure are cached for the returned messages.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</para>
            </param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where the cache does NOT contain the requested items (i.e. where the fetch failed).</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCount">
            <summary>
            <para>When the mailbox is selected use this method to initialise the <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.</para>
            <para>IMAP does not have a mechanism for getting the unseencount when the mailbox is selected.</para>
            <para>Once the value is initialised it needs to be maintained by fetching the flags of newly arrived messages.</para>
            <para>You need to handle the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event and use the <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/> method to achieve this.</para>
            </summary>
            <returns>A list of unseen message handles.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCountAsync">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>
            <para>Resolve a UID to a message instance and ensure that the specified items are cached.</para>
            </summary>
            <param name="pUID">The UID to resolve.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <returns>An object representing the message.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessageAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>Resolve a set of UIDs to message instances and ensure that the specified items are cached.</para>
            </summary>
            <param name="pUIDs">The UIDs to resolve.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Refresh the mailbox cache data for this mailbox.</para>
            </summary>
            <param name="pDataSets">The sets of data to refresh.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.FetchAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            <para>Copy a set of messages to this mailbox.</para>
            <para>The source messages must be in the currently selected mailbox.</para>
            <para>If the server provides the UIDCOPY response code of RFC 4315 pairs of UIDs of the copied messages are returned.</para>
            </summary>
            <param name="pMessages">The set of messages to copy.</param>
            <returns>If the server provides a UIDCOPY response: the pairs of UIDs for the copied messages; otherwise null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetch a section of a message into a stream.</para>
            <para>This mailbox must be selected.</para>
            <para>Will throw if the <paramref name="pUID"/> does not exist in the mailbox.</para>
            </summary>
            <param name="pUID">The UID of the message.</param>
            <param name="pSection">The section of the message to fetch.</param>
            <param name="pDecoding">
            <para>What decoding should be applied to the fetched data.</para>
            <para>If the connected server supports RFC 3516 and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then this may be <see cref="F:work.bacome.imapclient.eDecodingRequired.unknown"/> to get the server to do the decoding.</para>
            </param>
            <param name="pStream">The stream to write the (decoded) data into.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetchAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            <para>Store flags for a message.</para>
            <para>This mailbox must be selected.</para>
            </summary>
            <param name="pUID">The UID of the message.</param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags">The flags to store.</param>
            <param name="pIfUnchangedSinceModSeq">
            <para>The modseq to use in the unchangedsince clause of a conditional store (RFC 7162).</para>
            <para>Can only be specified if the mailbox supports RFC 7162.</para>
            <para>If the message has been modified since the specified modseq the server should fail the update.</para>
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            The multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            The async multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            <para>Copy a message to another mailbox.</para>
            <para>This mailbox must be selected.</para>
            <para>If the server provides the UIDCOPY response code of RFC 4315 pairs of UIDs of the copied messages are returned.</para>
            </summary>
            <param name="pUID">The UID of the message to copy.</param>
            <param name="pDestination">The destination mailbox.</param>
            <returns>If the server provides a UIDCOPY response: the pairs of UIDs for the copied messages; otherwise null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            The multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            The async multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.fMessageProperties">
            <summary>
            Specifies a set of <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailboxName">
            <summary>
            Represents an IMAP mailbox name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Path">
            <summary>
            <para>The mailbox name including the full hierarchy.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in <see cref="F:work.bacome.imapclient.cMailboxName.Path"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.ParentPath">
            <summary>
            <para>The path of the parent mailbox.</para>
            <para>Will be null if there is no parent mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.Name">
            <summary>
            <para>The name of the mailbox.</para>
            <para>As compared to <see cref="F:work.bacome.imapclient.cMailboxName.Path"/> this does not include the hierarchy.</para>
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.IsInbox">
            <summary>
            <para>True if this instance represents the inbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.TryConstruct(System.String,System.Nullable{System.Char},work.bacome.imapclient.cMailboxName@)">
            <summary>
            <para>IMAP mailbox names have few restrictions, but this may fail.</para>
            </summary>
            <param name="pPath"></param>
            <param name="pDelimiter"></param>
            <param name="rResult"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cAddress">
            <summary>
            <para>Represents one email address.</para>
            <para>May be an individual address (<see cref="T:work.bacome.imapclient.cEmailAddress"/>) or a group address (<see cref="T:work.bacome.imapclient.cGroupAddress"/>).</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddress.DisplayName">
            <summary>
            The display name for this address.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAddresses">
            <summary>
            <para>Represents a set of <see cref="T:work.bacome.imapclient.cAddress"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.SortString">
            <summary>
            The RFC 5256 sort string for the set of addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.DisplaySortString">
            <summary>
            The RFC 5957 display sort string for the set of addresses.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cEmailAddress">
            <summary>
            Represents an individual email address.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.Address">
            <summary>
            The raw address, with the punycode (RFC 3492) encoded host name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.DisplayAddress">
            <summary>
            The display version of the address (currently this is the same as the raw address).
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cGroupAddress">
            <summary>
            Represents a named group of email addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cGroupAddress.Addresses">
            <summary>
            The collection of group members (may be empty).
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAttachment">
            <summary>
            Provides an API that allows interaction with an IMAP attachment.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Part">
            <summary>
            The message body part that this attachment refers to.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Type">
            <summary>
            The MIME type of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.TypeCode">
            <summary>
            The MIME type of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.SubType">
            <summary>
            The MIME subtype of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Parameters">
            <summary>
            The MIME type parameters of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentId">
            <summary>
            The MIME content-id of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Description">
            <summary>
            The MIME content description of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentTransferEncoding">
            <summary>
            The MIME content transfer encoding of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.DecodingRequired">
            <summary>
            The MIME content transfer encoding of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.PartSizeInBytes">
            <summary>
            The size in bytes of the encoded attachement.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.FileName">
            <summary>
            The suggested filename if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.CreationDate">
            <summary>
            The creation date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ModificationDate">
            <summary>
            The modification date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ReadDate">
            <summary>
            The last read date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ApproximateFileSizeInBytes">
            <summary>
            The approximate size in bytes if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Languages">
            <summary>
            The language(s) of the attachment.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes">
            <summary>
            <para>Gets the number of bytes that will have to come over the network to save this attachment.</para>
            <para>If the server can do the decoding this may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/>.</para>
            </summary>
            <returns>The number of bytes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytesAsync">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Saves the attachment to the specified file.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAsAsync(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eBodyPartTypeCode">
            <summary>
            The RFC 2045 MIME type of a message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eDispositionTypeCode">
            <summary>
            The RFC 2183 disposition type of a message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eTextBodyPartSubTypeCode">
            <summary>
            The RFC 2045 MIME subtype of a text message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eMultiPartBodySubTypeCode">
            <summary>
            The RFC 2045 MIME subtype of a multipart message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeType">
            <summary>
            Contains named MIME type constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeSubType">
            <summary>
            Contains named MIME subtype constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPart">
            <summary>
            Represents a message part.
            </summary>
            <remarks>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cMultiPartBody"/></item>
            <item><see cref="T:work.bacome.imapclient.cSinglePartBody"/></item>
            <item><see cref="T:work.bacome.imapclient.cMessageBodyPart"/></item>
            <item><see cref="T:work.bacome.imapclient.cTextBodyPart"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Type">
            <summary>
            The MIME type of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.SubType">
            <summary>
            The MIME subtype of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Section">
            <summary>
            The IMAP section identifier of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.TypeCode">
            <summary>
            The MIME type of the part in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValue">
            <summary>
            <para>Represents an additional extension data element.</para>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionString"/></item>
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionNumber"/></item>
            <item><see cref="T:work.bacome.imapclient.cBodyPartExtensionValues"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionString">
            <summary>
            A string extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionNumber">
            <summary>
            A numeric extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValues">
            <summary>
            A collection of extension data elements
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyParts">
            <summary>
            A collection of message parts.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionData">
            <summary>
            IMAP bodystructure extension data.
            </summary>
            <remarks>
            <para>Will be one of;
            <list type="bullet">
            <item><see cref="T:work.bacome.imapclient.cMultiPartExtensionData"/></item>
            <item><see cref="T:work.bacome.imapclient.cSinglePartExtensionData"/></item>
            </list>
            </para>
            <para>See </para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a multipart part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartExtensionData.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a single part message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartBody">
            <summary>
            Represents a multipart message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.Parts">
            <summary>
            The contained parts.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartDisposition">
            <summary>
            RFC 2183 disposition data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Type">
            <summary>
            The disposition type in text form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.TypeCode">
            <summary>
            The disposition type in code form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Parameters">
            <summary>
            The disposition parameters.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.FileName">
            <summary>
            The suggested filename if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.CreationDate">
            <summary>
            The creation date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ModificationDate">
            <summary>
            The modification date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ReadDate">
            <summary>
            The last read date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.Size">
            <summary>
            The approximate size in bytes if provided. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartBody">
            <summary>
            Represents a single part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentId">
            <summary>
            The MIME content-id of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Description">
            <summary>
            The MIME content description of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentTransferEncoding">
            <summary>
            The MIME content transfer encoding of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired">
            <summary>
            The MIME content transfer encoding of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes">
            <summary>
            The size in bytes of the encoded part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageBodyPart">
            <summary>
            Represents a message part that contains a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.Envelope">
            <summary>
            The IMAP envelope of the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure">
            <summary>
            The IMAP bodystructure information for the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.SizeInLines">
            <summary>
            The size in text lines of the encapsulated message.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessageBodyPart.Body">
            <summary>
            The IMAP body or bodystructure information for the encapsulated message, whichever is available.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cTextBodyPart">
            <summary>
            Represents a message part that contains text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SizeInLines">
            <summary>
            The size in text lines of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cTextBodyPart.Charset">
            <summary>
            The character set of the text data.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameter">
            <summary>
            <para>A message part parameter.</para>
            <para>Parameters are attribute value pairs.</para>
            <para>The value may have a language associated with it.</para>
            <para>See RFC 2184.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.Name">
            <summary>
            The name of the attribute.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.RawValue">
            <summary>
            The un-decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.StringValue">
            <summary>
            The decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.LanguageTag">
            <summary>
            The language tag of the value (if any).
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.UIntValue">
            <summary>
            Parse the un-decoded value as a UInt.
            If the value is not a valid UInt, returns null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.DateTimeValue">
            <summary>
            Parse the un-decoded value as an RFC 822 date and time.
            If the value is not a valid RFC 822 date and time, returns null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameters">
            <summary>
            Message part parameters.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameters.First(System.String)">
            <summary>
            Returns the first parameter with the specified attribute name.
            </summary>
            <param name="pName">The attribute name.</param>
            <returns>The parameter if there is at least one with a matching name, otherwise null.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cEnvelope">
            <summary>
            IMAP message envelope data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sent">
            <summary>The message sent date. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Subject">
            <summary>The message subject. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BaseSubject">
            <summary>
            <para>The base subject as defined in RFC 5256.</para>
            <para>(i.e. with the RE: FWD: etc stripped off)</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.From">
            <summary>The message 'from' address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sender">
            <summary>The message sender address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.ReplyTo">
            <summary>The message repy-to address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.To">
            <summary>The message 'to' address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.CC">
            <summary>The message CC address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BCC">
            <summary>The message BCC address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.InReplyTo">
            <summary>The normalised (delimiters, quoting, comments and white space removed) in-reply-to message-ids. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.MessageId">
            <summary>The normalised (delimiters, quoting, comments and white space removed) message-id of the message. May be null.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cFilter">
            <summary>
            Represents a filter that can be passed to the server to restrict the set of messages returned. Use the static members of the class to create cFilter instances and the &amp;, | and ! operators to combine the filters together. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.All">
            <summary>A filter that passes everything through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.MSN">
            <summary>Use this member to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.UID">
            <summary>Use this member to generate UID filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.First">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Last">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Answered">
            <summary>A filter that passes only answered messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Flagged">
            <summary>A filter that passes only flagged messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Deleted">
            <summary>A filter that passes only deleted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Seen">
            <summary>A filter that passes only seen messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Draft">
            <summary>A filter that passes only draft messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Recent">
            <summary>A filter that passes only recent messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Forwarded">
            <summary>A filter that passes only forwarded messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.SubmitPending">
            <summary>A filter that passes only submitpending messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Submitted">
            <summary>A filter that passes only submitted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.BCC">
            <summary>Use this member to generate filters on the content of the message's BCC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Body">
            <summary>Use this member to generate filters on the content of the message's 'body' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.CC">
            <summary>Use this member to generate filters on the content of the message's CC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.From">
            <summary>Use this member to generate filters on the content of the message's 'from' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Subject">
            <summary>Use this member to generate filters on the content of the message's 'subject' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Text">
            <summary>Use this member to generate filters on the content of the message's 'text' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.To">
            <summary>Use this member to generate filters on the content of the message's 'to' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Received">
            <summary>Use this member to generate filters on the message's internal date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Sent">
            <summary>Use this member to generate filters on the message's sent date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Size">
            <summary>Use this member to generate filters on the message's size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Importance">
            <summary>Use this member to generate filters on the message's importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.False">
            <summary>A filter that passes nothing through.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])">
            <summary>Use this member to generate filters on the message's flags.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)">
            <summary>Use this member to generate filters on the message's flags.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)">
            <summary>Use this member to generate filters on the contents of a specified header field.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HasHeaderField(System.String)">
            <summary>Use this member to generate filters on the existence of a specified header field.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseAnd(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>Use this operator to combine two filters.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseOr(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>Use this operator to combine two filters.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_LogicalNot(work.bacome.imapclient.cFilter)">
            <summary>Use this operator to negate a filter.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilter.sCTorParams">
            <summary>Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterHandleRelativity">
            <summary>The type of message sequence number comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterPart">
            <summary>The message attribute being filtered by. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterDate">
            <summary>The message date being filtered by. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterDateCompare">
            <summary>The type of date comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterSizeCompare">
            <summary>The type of size comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterEnd">
            <summary>The end of the message sequence. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNRelativity">
            <summary>
            <para>Represents a message sequence number message filter.</para>
            <para>Use the static member <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNOffset">
            <summary>
            <para>Specifies an offset from a specific message or from the first message in the mailbox or from the last message in the mailbox.</para>
            <para>Use <see cref="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)"/> or the static members <see cref="F:work.bacome.imapclient.cFilter.First"/> or <see cref="F:work.bacome.imapclient.cFilter.Last"/> to generate instances of this class.</para>
            <para>Use instances of this class with the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> static member to generate message sequence number filters.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterEnd">
            <summary>
            <para>Represents either the first message in the mailbox or the last message in the mailbox.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.First"/> and <see cref="F:work.bacome.imapclient.cFilter.Last"/> static instances of this class to generate offsets to use with the static <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)">
            <summary>
            Generates an offset from the end of the mailbox that the instance represents.
            </summary>
            <param name="pOffset">The number of messages to offset by.</param>
            <returns>The offset.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSN">
            <summary>
            <para>The operators defined on this class generate message sequence number filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> static instance of this class to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;= and &gt;=.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.cMessage"/> or to a <see cref="T:work.bacome.imapclient.cFilterMSNOffset"/>.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUIDIn">
            <summary>
            <para>Represents a UID message filter.</para>
            <para>Use the static member <see cref="F:work.bacome.imapclient.cFilter.UID"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUID">
            <summary>
            <para>The operators defined on this class generate message UID filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.UID"/> static instance of this class to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;=, &gt;=, == and !=.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.cUID"/> instance.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterFlagsContain">
            <summary>
            <para>Represents a message flag filter.</para>
            <para>Use the static methods <see cref="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)"/> or <see cref="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPartContains">
            <summary>
            <para>Represents a filter on the content of a message part.</para>
            <para>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method on the following static members of <see cref="T:work.bacome.imapclient.cFilter"/> to generate these;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cFilter.BCC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Body"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.CC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.From"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Subject"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Text"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.To"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPart">
            <summary>
            <para>The <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this class generates a message content filter.</para>
            <para>Use the following static instances of this class to do this;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cFilter.BCC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Body"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.CC"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.From"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Subject"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Text"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.To"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterPart.Contains(System.String)">
            <summary>
            Generates an object that represents a filter on message content.
            </summary>
            <param name="pContains"></param>
            <returns>An object that represents a filter on message content.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDateCompare">
            <summary>
            <para>Represents a filter on a message date.</para>
            <para>Use the following static members of <see cref="T:work.bacome.imapclient.cFilter"/> to generate these;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cFilter.Received"/></item>
            <item><see cref="F:work.bacome.imapclient.cFilter.Sent"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDate">
            <summary>
            <para>The operators defined on this class generate message date filters.</para>
            <para>Use the static instances of this class, <see cref="F:work.bacome.imapclient.cFilter.Received"/> and <see cref="F:work.bacome.imapclient.cFilter.Sent"/>, to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;=, &gt;=, == and !=.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterHeaderFieldContains">
            <summary>
            <para>Represents a message header field content filter.</para>
            <para>Use the <see cref="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)"/> static method to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSizeCompare">
            <summary>
            <para>Represents a message size filter.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Size"/> static member to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSize">
            <summary>
            <para>The operators defined on this class generate message size filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Size"/> static instance of this class to do this.</para>
            <para>The &lt; and &gt; operators are defined.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterImportance">
            <summary>
            <para>The operators defined on this class generate message importance filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Importance"/> static instance of this class to do this.</para>
            <para>The == and != operators are defined.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.eImportance"/> value.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterAnd">
            <summary>
            <para>Represents the logical and combination of a number of filters.</para>
            <para>Use the &amp; operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterOr">
            <summary>
            <para>Represents the logical or combination of two filters.</para>
            <para>Use the | operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterNot">
            <summary>
            <para>Represents the negation of a filter.</para>
            <para>Use the ! operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessage">
            <summary>
            <para>Provides an API that allows interaction with an IMAP message.</para>
            <para>Instances are only valid whilst the containing mailbox remains selected. Re-selecting a mailbox will not bring the message instances back to life.</para>
            <para>Instances are only valid whilst the containing mailbox has the same UIDValidity.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cMessage.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a message property value change.
            Most properties of an IMAP message can never change.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Expunged">
            <summary>
            True if the server has told us that the message has been expunged.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Envelope">
            <summary>
            <para>The IMAP envelope data of the message.</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sent">
            <summary>
            <para>The sent date of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Subject">
            <summary>
            <para>The subject of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BaseSubject">
            <summary>
            <para>The base subject (as defined in RFC 5256: with the RE: FWD: etc stripped off) of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.From">
            <summary>
            <para>The 'from' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sender">
            <summary>
            <para>The 'sender' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ReplyTo">
            <summary>
            <para>The 'reply-to' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.To">
            <summary>
            <para>The 'to' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.CC">
            <summary>
            <para>The 'CC' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BCC">
            <summary>
            <para>The 'BCC' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.InReplyTo">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) 'in-reply-to' message-ids of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.MessageId">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) message-id of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flags">
            <summary>
            <para>The flags set for the message.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Answered">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetAnswered">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flagged">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Flagged"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Deleted">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Seen">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Draft">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Draft"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Recent">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Forwarded">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetForwarded">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.SubmitPending">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetSubmitPending">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Submitted">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Submitted"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Received">
            <summary>
            <para>The IMAP internaldate for the message.</para>
            <para>If the internal message cache does not contain the internaldate of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Size">
            <summary>
            <para>The size of the entire message in bytes.</para>
            <para>If the internal message cache does not contain the size of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.UID">
            <summary>
            <para>The IMAP UID of the message.</para>
            <para>If the internal message cache does not contain the UID of the message, it will be fetched from the server.</para>
            <para>May be null if the server does not support unique identifiers.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ModSeq">
            <summary>
            <para>The modification sequence number of the message.</para>
            <para>If the internal message cache does not contain a modseq for the message, it will be fetched from the server.</para>
            <para>Will be 0 if the mailbox does not support CONDSTORE.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BodyStructure">
            <summary>
            <para>The IMAP bodystructure of the message.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Attachments">
            <summary>
            <para>Returns the list of message attachments.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines an attachment as a message part with a disposition of ‘attachment’.</para>
            <para>If there are alternate versions of an attachment only one of the alternates is included in the returned list (the first one).</para>
            <para>The returned list may be empty.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.PlainTextSizeInBytes">
            <summary>
            <para>The size in bytes of the plain text parts of the message.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.</para>
            <para>If there are alternate versions of a part only one of the alternates is used in calculating the size (the first one).</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.References">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) message-ids from the references header field, or null if there was no references header field or if the references header field could not be parsed.</para>
            <para>If the internal message cache does not contain the references header field of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Importance">
            <summary>
            <para>The importance value from the importance header field, or null if there was no importance header field or if the importance header field could not be parsed.</para>
            <para>If the internal message cache does not contain the importance header field of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)">
            <summary>
            <para>Ensures that the internal message cache contains the specified items for this message instance.</para>
            <para>The missing items will be fetched from the server.</para>
            </summary>
            <param name="pItems">
            <para>The items required in the cache.</para>
            <para>Note that the <see cref="T:work.bacome.imapclient.cCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/> (so you can use values of those types as parameters to this method).</para>
            </param>
            <returns>
            <para>True if the fetch populated the cache with the requested items, false otherwise.</para>
            <para>False indicates that the message is expunged.</para>
            </returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cCacheItems)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            <para>Returns the fetch size in bytes of a <see cref="T:work.bacome.imapclient.cSinglePartBody"/> part of this message.</para>
            <para>This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/> if the part needs decoding (<see cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/>) and the server supports RFC 3516.</para>
            <para>This method may have to fetch the size from the server. (The size will be cached in the internal message cache.)</para>
            <para></para>
            </summary>
            <param name="pPart">The part to get the size for.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytesAsync(work.bacome.imapclient.cSinglePartBody)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)">
            <summary>
            <para>Generates message sequence number offset for use in message filtering.</para>
            <para>See <see cref="F:work.bacome.imapclient.cFilter.MSN"/> - a static instance of <see cref="T:work.bacome.imapclient.cFilterMSN"/>.</para>
            </summary>
            <param name="pOffset">The offset from this message's sequence number.</param>
            <returns>A message sequence number offset.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainText">
            <summary>
            <para>Fetches the message's plain text parts from the server, decodes them, and concatenates them yielding the returned value.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.</para>
            <para>If there are alternate versions of a part only one of the alternates is used in generating the plain text (the first one).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainTextAsync">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.PlainText"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            <para>Fetches the specified part from the server, decodes, and returns the data in a string.</para>
            </summary>
            <param name="pPart">The part to fetch.</param>
            <returns>The decoded data of the message part.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cTextBodyPart)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)">
            <summary>
            <para>Fetches the specified message section from the server as text (without any content-transfer-decoding) and attempts to return the data as a string.</para>
            </summary>
            <param name="pSection">The section to fetch.</param>
            <returns>The raw data of the section as a string.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetches the specified part from the server and writes the (possibly decoded) bytes into the provided stream.</para>
            <para>Any decoding required may be done client-side or server-side (if the server supports RFC 3516).</para>
            <para>To calculate the number of bytes that have to be fetched, use the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> method. (This is useful if you are intending to display a progress bar.)</para>
            <para>Optionally you may specify an operation specific timeout, cancellation token, progress callback and write size controller in the <paramref name="pConfiguration"/> parameter.</para>
            </summary>
            <param name="pPart">The part to fetch.</param>
            <param name="pStream">The stream to write into.</param>
            <param name="pConfiguration">Optionally use this parameter to specify an operation specific timeout, cancellation token, progress callback and write size controller.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetches the specified section from the server, applying the specified decoding, and writing the resulting bytes into the provided stream.</para>
            <para>Any decoding required may be done client-side or server-side (if the server supports RFC 3516).</para>
            <para>Optionally you may specify an operation specific timeout, cancellation token, progress callback and write size controller in the <paramref name="pConfiguration"/> parameter.</para>
            </summary>
            <param name="pSection">The section to fetch.</param>
            <param name="pDecoding">The content-transfer-decoding to apply.</param>
            <param name="pStream">The stream to write to</param>
            <param name="pConfiguration">Optionally use this parameter to specify an operation specific timeout, cancellation token, progress callback and write size controller.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            <para>Store flags for the message.</para>
            <para>This method will throw if it detects that the store is likely to have failed.</para>
            </summary>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags">The flags to store.</param>
            <param name="pIfUnchangedSinceModSeq">
            <para>The modseq to use in the unchangedsince clause of a conditional store (RFC 7162).</para>
            <para>Can only be specified if the mailbox supports RFC 7162.</para>
            <para>If the message has been modified since the specified modseq the server should fail the update.</para>
            </param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.StoreAsync(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)">
            <summary>
            Copy the message to the specified mailbox.
            </summary>
            <param name="pDestination">The mailbox to copy the message to.</param>
            <returns>If the server provides a UIDCOPY response: the UID of the message in the destination mailbox; otherwise null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.CopyAsync(work.bacome.imapclient.cMailbox)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)"/>.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kMessageFlagName">
            <summary>
            Contains named IMAP flag name contants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible">
            <summary>\*</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Recent">
            <summary>\Recent</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Answered">
            <summary>\Answered</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Flagged">
            <summary>\Flagged</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Deleted">
            <summary>\Deleted</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Seen">
            <summary>\Seen</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Draft">
            <summary>\Draft</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Forwarded">
            <summary>$Forwarded</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.SubmitPending">
            <summary>$SubmitPending</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlagName.Submitted">
            <summary>$Submitted</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlags">
            <summary>
            A unique read-only message flag collection. Message flag names are case insensitive. See <see cref="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags"/> and <see cref="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.#ctor(work.bacome.imapclient.cMessageFlagList)">
            <summary>
            Makes a read-only wrapper around the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String)">
            <summary>
            Returns true if the collection contains the flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String[])">
            <summary>
            Returns true if the collection contains all the flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if the collection contains all the flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.SymmetricDifference(work.bacome.imapclient.cMessageFlags,System.String[])">
            <summary>
            Gets the symmetric difference between this and the specified collection of flags ignoring an optional set of flags (case insensitive).
            </summary>
            <param name="pOther">The collection to do the symmetric difference with.</param>
            <param name="pExcept">The flags to ignore when doing the difference.</param>
            <returns>The symmetric difference less the flags to ignore.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlags.Count">
            <summary>Gets the number of flags in the collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.GetEnumerator">
            <summary>Returns an enumerator that iterates through the flags.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlags">
            <summary>
            A unique read-only storable message flag collection. Message flag names are case insensitive. The <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> flag is not a storable flag. Used in the 'store' APIs. This class defines an implicit conversion from <see cref="T:work.bacome.imapclient.cStorableFlagList"/>.
            </summary>
            <remarks>
            See 
            <see cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <see cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <see cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <see cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.None">
            <summary>An empty set of flags.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Answered">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Flagged">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Flagged"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Deleted">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Seen">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Draft">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Draft"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Forwarded">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.SubmitPending">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Submitted">
            <summary>A collection of flags containing just the <see cref="F:work.bacome.imapclient.kMessageFlagName.Submitted"/> flag.</summary> 
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are storable flags. May throw if the specified flags aren't valid storable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are storable flags. May throw if the specified flags aren't valid IMAP storable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <summary>
            Creates a copy of the specified storable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.op_Implicit(work.bacome.imapclient.cStorableFlagList)~work.bacome.imapclient.cStorableFlags">
            <summary>
            Creates a copy of the specified storable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlags">
            <summary>
            A unique read-only fetchable message flag collection. Message flag names are case insensitive. (The <see cref="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible"/> flag is not a fetchable flag.) See <see cref="P:work.bacome.imapclient.cMessage.Flags"/>, <see cref="P:work.bacome.imapclient.cMailbox.MessageFlags"/>, <see cref="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are fetchable flags. May throw if the specified flags aren't valid IMAP fetchable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are fetchable flags. May throw if the specified flags aren't valid IMAP fetchable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <summary>
            Copies the specified fetchable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.op_Implicit(work.bacome.imapclient.cFetchableFlagList)~work.bacome.imapclient.cFetchableFlags">
            <summary>
            Copies the specified fetchable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlagList">
            <summary>
            A unique message flag list. Message flag names are case insensitive and have a limited grammar (see RFC 3501).
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a message flag list around the specified list. The list is not copied.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String)">
            <summary>
            Determines whether the list contains the flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String[])">
            <summary>
            Determines whether the list contains all the specified flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the list contains all the specified flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String)">
            <summary>
            Adds the flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String[])">
            <summary>
            Adds each flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds each flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String)">
            <summary>
            Removes the flag from the list if it is there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String[])">
            <summary>
            Removes the flags from the list if they are there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the flags from the list if they are there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlagList.Count">
            <summary>Gets the number of flags in the list.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.GetEnumerator">
            <summary>Returns an enumerator that iterates through the flags.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlagList">
            <summary>
            A unique storable message flag list. Message flag names are case insensitive and have a limited grammar (see RFC 3501). The <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> flag is not a storable flag. See <see cref="T:work.bacome.imapclient.cStorableFlags"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor">
            <summary>
            Creates an empty list.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.String[])">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are storable flags. May throw if the specified flags aren't valid storable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are storable flags. May throw if the specified flags aren't valid storable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <summary>
            Creates a copy of the specified storable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlagList">
            <summary>
            A unique fetchable message flag list. Message flag names are case insensitive and have a limited grammar (see RFC 3501). The <see cref="F:work.bacome.imapclient.kMessageFlagName.CreateNewIsPossible"/> flag is not a fetchable flag. See <see cref="T:work.bacome.imapclient.cFetchableFlags"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor">
            <summary>
            Creates an empty list.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.String[])">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are fetchable flags. May throw if the specified flags aren't valid fetchable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a duplicate free copy of the specified flags, validating that they are fetchable flags. May throw if the specified flags aren't valid fetchable flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <summary>
            Creates a copy of the specified fetchable flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItems">
            <summary>
            <para>A set of items that can be cached in the internal message cache.</para>
            <para>Note that the class has three implicit conversions;
            <list type="bullet">
            <item> from <see cref="T:work.bacome.imapclient.fMessageProperties"/></item>
            <item> from <see cref="T:work.bacome.imapclient.fCacheAttributes"/></item>
            <item> from <see cref="T:work.bacome.imapclient.cHeaderFieldNames"/></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.None">
            <summary>
            An empty set of items.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Attributes">
            <summary>
            A set of IMAP message attributes.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Names">
            <summary>
            A collection of header field names.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCacheItems.IsNone">
            <summary>
            Indicates if the set is empty.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eSectionTextPart">
            <summary>
            <para>Describes a text part of an IMAP message section (see <see cref="T:work.bacome.imapclient.cSection"/>).</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.all">
            <sumary>The entire part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.header">
            <sumary>The entire header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfields">
            <sumary>Specified headers from the header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot">
            <sumary>All headers other than the specified headers from the header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.text">
            <sumary>The entire text part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.mime">
            <sumary>The mime headers of the part.</sumary> 
        </member>
        <member name="T:work.bacome.imapclient.cSection">
            <summary>
            <para>Describes a section of an IMAP message.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.All">
            <summary>
            Describes the section of a message that includes the entire message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Header">
            <summary>
            Describes the entire header fields section of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Text">
            <summary>
            Describes the entire text section of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Part">
            <summary>
            <para>The part of the message that this section describes.</para>
            <para>A dot separated set of integers e.g. 1, 2, 1.3, 1.1.4.5</para>
            <para>May be null if the section refers to the whole message.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.TextPart">
            <summary>
            The text part of the <see cref="F:work.bacome.imapclient.cSection.Part"/> that this section describes.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Names">
            <summary>
            The header fields included (<see cref="F:work.bacome.imapclient.eSectionTextPart.headerfields"/>) or excluded (<see cref="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot"/>) from this section.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eSortItem">
            <summary>Items that can be sorted by.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cSortItem">
            <summary>
            <para>An item to sort messages by.</para>
            <para>Use the static instances that are members of the class to improve readability of your sort specification.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Received">
            <summary>Ascending by message internal date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CC">
            <summary>Ascending by the first address in the message CC.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Sent">
            <summary>Ascending by the message sent date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.From">
            <summary>Ascending by the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Size">
            <summary>Ascending by the message size.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Subject">
            <summary>Ascending by the message subject.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.To">
            <summary>Ascending by the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFrom">
            <summary>Ascending by the display version (see RFC 5957) of the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayTo">
            <summary>Ascending by the display version (see RFC 5957) of the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ReceivedDesc">
            <summary>Descending by message internal date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CCDesc">
            <summary>Descending by the first address in the message CC.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SentDesc">
            <summary>Descending by the message sent date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.FromDesc">
            <summary>Descending by the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SizeDesc">
            <summary>Descending by the message size.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SubjectDesc">
            <summary>Descending by the message subject.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ToDesc">
            <summary>Descending by the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFromDesc">
            <summary>Descending by the display version (see RFC 5957) of the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayToDesc">
            <summary>Descending by the display version (see RFC 5957) of the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Item">
            <summary>
            The item being sorted by.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Attribute">
            <summary>
            If sorting is to be done client-side this is the message cache attribute that is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Desc">
            <summary>
            Indicates descending sort.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSort">
            <summary>
            Defines a sort order for message lists.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.None">
            <summary>
            An instance representing that no sorting is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.Items">
            <summary>
            A collection of the items in this sort.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.support.iMessageHandle)">
            <summary>
            Compares two message handles according to the sort definition.
            If the attributes required for the comparision are not in the message cache the results are undefined.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <summary>
            Compares two messages according to the sort definition.
            If the attributes required for the comparision are not in the message cache the attributes are fetched.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)">
            <summary>
            Returns the set of message attributes required by this sort and whether SORT=DISPLAY (RFC 5957) support is required for the server to do the sort.
            </summary>
            <param name="rDisplay">Returns true if SORT=DISPLAY (RFC 5957) support is required for the server to do the sort.</param>
            <returns>The set of message attributes required by this sort.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cUID">
            <summary>
            An IMAP message UID
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cNamespace">
            <summary>
            Provides an API that allows interaction with an IMAP namespace. See <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespace.NamespaceName">
            <summary>
            The namespace name.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Prefix">
            <summary>
            The name prefix of the namespace. May be the empty string.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Delimiter">
            <summary>
            The namespace hierarchy delimiter. May be null if there is no hierarchy.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailboxes at the top level of hierarchy in the namespace.
            </summary>
            <param name="pDataSets"> The sets of data to request when getting the mailboxes. See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)" -->
        <member name="M:work.bacome.imapclient.cNamespace.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a mailbox at the top level of this namespace.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns>An object representing the newly created mailbox.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChildAsync(System.String,System.Boolean)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cNamespace.CreateChild(System.String,System.Boolean)"/>.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaceName">
            <summary>
            Represents an IMAP namespace name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Prefix">
            <summary>
            The name prefix of the namespace. May be the empty string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Delimiter">
            <summary>
            The namespace hierarchy delimiter. May be null if there is no hierarchy.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaces">
            <summary>
            A collection of <see cref="T:work.bacome.imapclient.cNamespace"/> instances. See <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Personal">
            <summary>A collection of personal <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.OtherUsers">
            <summary>A collection of 'other user' <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Shared">
            <summary>A collection of shared <see cref="T:work.bacome.imapclient.cNamespace"/> instances.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResultType">
            <summary>
            The IMAP command completion type
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResponseText">
            <summary>
            The IMAP response text associated with the command completion
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedString">
            <summary>
            Represents a string that includes language information as per RFC 2231.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedString.Parts">
            <summary>
            The parts of the string. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedStringPart">
            <summary>
            Represents part of a string that includes language information as per RFC 2231.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.String">
            <summary>
            The decoded text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.LanguageTag">
            <summary>
            Optional language of the text. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPException">
            <summary>
            Base class for all of the library's custom exceptions.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnsuccessfulCompletionException">
            <summary>
            Thrown on a 'NO' command response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText">
            <summary>
            The response text associated with the 'NO'.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.TryIgnoring">
            <summary>
            If set this is an indication that ignoring these capabilities (see <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>) may have prevented the exception.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cProtocolErrorException">
            <summary>
            Thrown on a 'NO' or 'BAD' command response. (Thrown on a 'NO' only when the 'NO' is an unexpected possibility.)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.CommandResult">
            <summary>
            The command result associated with the response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.TryIgnoring">
            <summary>
            If set this is an indication that ignoring these capabilities (see <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>) may have prevented the exception.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnexpectedServerActionException">
            <summary>
            Thrown when something happens that shouldn't (according to my reading of the RFCs).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnexpectedServerActionException.TryIgnoring">
            <summary>
            If set this is an indication that ignoring these capabilities (see <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>) may have prevented the exception.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cInternalErrorException">
            <summary>
            Thrown when something happens that shouldn't.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cConnectByeException">
            <summary>
            Thrown when the server said bye at connect.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cConnectByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHomeServerReferralException">
            <summary>
            Thrown when the server rejects connection but suggests that we try a different server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText">
            <summary>
            The response text associated with the rejection.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentialsException">
            <summary>
            Thrown when the server didn't accept the credentials provided.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentialsException.ResponseText">
            <summary>
            Has a value if there was an explicit rejection of the credetials by the server.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAuthenticationMechanismsException">
            <summary>
            thrown to indicate that the inability to connect is related to the lack of usable authentication mechanisms offered by the server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue">
            <summary>
            This is set to true if the problem might be fixed by using TLS
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnilateralByeException">
            <summary>
            thrown to indicate that a server initiated 'BYE' occurred
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnilateralByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurityException">
            <summary>
            thrown when SASL security layer encoding or decoding fails
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineConflictException">
            <summary>
            thrown when there are two pipelined commands that conflict in some way
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineStoppedException">
            <summary>
            thrown when the internal command pipeline has stopped processing commands
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStreamClosedException">
            <summary>
            thrown when the internal network stream has been closed
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDValidityChangedException">
            <summary>
            thrown when the UIDValidity changed while doing something that depended on it not changing
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cContentTransferDecodingException">
            <summary>
            thrown when the CTE can't be handled
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNException">
            <summary>
            thrown when a handle can't resolved when building the filter
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilterMSNException.Handle">
            <summary>
            The handle that couldn't be resolved to an MSN
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.iId">
            <summary>
            An ID (RFC 2971) field/ value collection. See <see cref="T:work.bacome.imapclient.cId"/> and <see cref="T:work.bacome.imapclient.cIdDictionary"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Name">
            <summary>The name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Version">
            <summary>The version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OS">
            <summary>The name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OSVersion">
            <summary>The version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Vendor">
            <summary>The vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.SupportURL">
            <summary>The URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Address">
            <summary>The postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Date">
            <summary>The date program was released.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Command">
            <summary>The command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Arguments">
            <summary>The arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Environment">
            <summary>A description of environment.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kIdFieldName">
            <summary>
            Contains ID (RFC 2971) field name named constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cId">
            <summary>
            An ID (RFC 2971) field/ value collection. See <see cref="P:work.bacome.imapclient.cIMAPClient.ServerId"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Construct from a field/ value dictionary. Field names are case insensitive.
            </summary>
            <param name="pDictionary">A field/ value dictionary.</param>
        </member>
        <member name="P:work.bacome.imapclient.cId.Count">
            <summary>Gets the number of field/ value pairs in the collection.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Values">
            <summary>Gets the values that are in the collection.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Keys">
            <summary>Gets the fields that are in the collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains a field (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.TryGetValue(System.String,System.String@)">
            <summary>
            Retrieves the field value (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.GetEnumerator">
            <summary>Returns an enumerator that iterates through the field/ values.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Item(System.String)">
            <summary>Retrieves the field value (field names are case insensitive).</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Name">
            <summary>The name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Version">
            <summary>The version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OS">
            <summary>The name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OSVersion">
            <summary>The version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Vendor">
            <summary>The vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.SupportURL">
            <summary>The URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Address">
            <summary>The postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Date">
            <summary>The date program was released.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Command">
            <summary>The command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Arguments">
            <summary>The arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Environment">
            <summary>A description of environment.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cClientIdUTF8">
            <summary>
            An ID (RFC 2971) field/ value collection. See <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/>. This class defines an implicit conversion from <see cref="T:work.bacome.imapclient.cIdDictionary"/> and enforces the limits of RFC 2971.
            </summary>
            <remarks>
            <para>The limits of RFC 2971 are;</para>
            <list type="bullet">
            <item>Field names no longer than 30 bytes.</item>
            <item>Values no longer than 1024 bytes.</item>
            <item>No more than 30 field/ value pairs.</item>
            </list>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialises a new instance using a field/ value dictionary. Field names are case insensitive. RFC 2971 limits are enforced by the constructor: it will throw if there are violations.
            </summary>
            <param name="pDictionary">A field/ value dictionary.</param>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientIdUTF8">
            <summary>
            Implicit conversion.
            </summary>
            <param name="pDictionary">The dictionary to get the field/ value data from.</param>
            <returns>The copied field/ values.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cClientId">
            <summary>
            An ID (RFC 2971) field/ value collection. See <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/>. This class defines an implicit conversion from <see cref="T:work.bacome.imapclient.cIdDictionary"/> and enforces the limits of RFC 2971.
            </summary>
            <remarks>
            <para>The limits of RFC 2971 are;</para>
            <list type="bullet">
            <item>Field names no longer than 30 bytes.</item>
            <item>Values no longer than 1024 bytes.</item>
            <item>No more than 30 field/ value pairs.</item>
            </list>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Construct from a field/ value dictionary. Field names are case insensitive. RFC 2971 limits are enforced by the constructor: it will throw if there are violations.
            </summary>
            <param name="pDictionary">A field/ value dictionary.</param>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientId">
            <summary>
            Implicit conversion.
            </summary>
            <param name="pDictionary">The dictionary to get the field/ value data from.</param>
            <returns>The copied field/ values.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cIdDictionary">
            <summary>
            An ID (RFC 2971) field/ value dictionary. See <see cref="T:work.bacome.imapclient.cClientId"/> and <see cref="T:work.bacome.imapclient.cClientIdUTF8"/>. Field names are case insensitive.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.#ctor(System.Boolean)">
            <summary>
            Construct an empty or a default dictionary. A default dictionary contains details about the library.
            </summary>
            <param name="pDefault">Indicates if a default or an empty dictionary should be constructed.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Count">
            <summary>Gets the number of field/ value pairs in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.IsReadOnly">
            <summary>false</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Values">
            <summary>Gets the values that are in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Keys">
            <summary>Gets the fields that are in the dictionary.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains a field (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Retrieves the field value (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified field/ value to the dictionary (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.String)">
            <summary>
            Removes the field from the dictionary (field names are case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the dictionary contains a field/ value pair (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds the specified field/ value to the dictionary (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the field/ value pair from the dictionary (field names are case insensitive).
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Clear">
            <summary>
            Removes all field/ value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the field/ value pairs to an array.
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.GetEnumerator">
            <summary>Returns an enumerator that iterates through the field/ values.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Item(System.String)">
            <summary>Retrieves the field value (field names are case insensitive).</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Name">
            <summary>The name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Version">
            <summary>The version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OS">
            <summary>The name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OSVersion">
            <summary>The version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Vendor">
            <summary>The vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.SupportURL">
            <summary>The URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Address">
            <summary>The postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Date">
            <summary>The date program was released.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.SetDate(System.DateTime)">
            <summary>
            Set the <see cref="P:work.bacome.imapclient.cIdDictionary.Date"/>. This method converts the supplied date to RFC 3501 date format.
            </summary>
            <param name="pDate">The value to set the <see cref="P:work.bacome.imapclient.cIdDictionary.Date"/> to.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Command">
            <summary>The command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Arguments">
            <summary>The arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Environment">
            <summary>A description of environment.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextType">
            <summary>
            The type of IMAP response text. See <see cref="F:work.bacome.imapclient.cResponseTextEventArgs.TextType"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.greeting">
            <summary>Response text associated with an IMAP greeting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.continuerequest">
            <summary>Response text associated with an IMAP command continuation request.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.bye">
            <summary>Response text associated with an IMAP BYE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.information">
            <summary>IMAP information text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.warning">
            <summary>IMAP warning text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.error">
            <summary>IMAP error text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.success">
            <summary>Response text associated with an IMAP command success notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.failure">
            <summary>Response text associated with an IMAP command failure notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.authenticationcancelled">
            <summary>Response text associated with an IMAP authentication cancellation notification.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextType.protocolerror">
            <summary>Response text associated with an IMAP command protocol error notification.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextCode">
            <summary>
            The text code associated with IMAP response text. See <see cref="F:work.bacome.imapclient.cResponseText.Code"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.none">
            <summary>There was no code.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unknown">
            <summary>There was a code, but it wasn't recognised.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alert">
            <summary>RFC 3501 ALERT: the text is an alert.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.badcharset">
            <summary>RFC 3501 BADCHARSET.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.parse">
            <summary>RFC 3501 PARSE: there was an error parsing a message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.trycreate">
            <summary>RFC 3501 TRYCREATE: try creating the mailbox.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unavailable">
            <summary>RFC 5530 UNAVAILABLE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed">
            <summary>RFC 5530 AUTHENTICATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed">
            <summary>RFC 5530 AUTHORIZATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expired">
            <summary>RFC 5530 EXPIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.privacyrequired">
            <summary>RFC 5530 PRIVACYREQUIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.contactadmin">
            <summary>RFC 5530 CONTACTADMIN.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.noperm">
            <summary>RFC 5530 NOPERM.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.inuse">
            <summary>RFC 5530 INUSE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expungeissued">
            <summary>RFC 5530 EXPUNGEISSUED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.corruption">
            <summary>RFC 5530 CORRUPTION.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.serverbug">
            <summary>RFC 5530 SERVERBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.clientbug">
            <summary>RFC 5530 CLIENTBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.cannot">
            <summary>RFC 5530 CANNOT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.limit">
            <summary>RFC 5530 LIMIT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.overquota">
            <summary>RFC 5530 OVERQUOTA.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alreadyexists">
            <summary>RFC 5530 ALREADYEXISTS.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.nonexistent">
            <summary>RFC 5530 NONEXISTENT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.referral">
            <summary>RFC 2193 REFERRAL.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.useattr">
            <summary>RFC 6154 USEATTR.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unknowncte">
            <summary>RFC 3516 UNKNOWNCTE: the server can't decode the content.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cResponseText">
            <summary>
            IMAP response text. See <see cref="F:work.bacome.imapclient.cResponseTextEventArgs.Text"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Code">
            <summary>
            The code associated with the response text. If this is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> then the text of the code is in <see cref="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Strings">
            <summary>
            The data associated with the <see cref="F:work.bacome.imapclient.cResponseText.Code"/>. 
            If the code is <see cref="F:work.bacome.imapclient.eResponseTextCode.badcharset"/> it may contain a list of valid charsets.
            If the code is <see cref="F:work.bacome.imapclient.eResponseTextCode.referral"/> it should contain the URL(s).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom">
            <summary>
            If the <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> this is the text of the code, otherwise null.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeText">
            <summary>
            If the <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.unknown"/> this is the text following the code, otherwise null. (May also be null if there was no text.)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cResponseTextEventArgs">
            <summary>
            See <see cref="E:work.bacome.imapclient.cIMAPClient.ResponseText"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.TextType">
            <summary>
            The response text type
            </summary>
            <remarks>
            Indicates the situation in which the response text was received
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="T:work.bacome.async.cCancellationManager">
            <summary>
            Manages sets of concurrent asynchronous operations that are attached to a common <see cref="T:System.Threading.CancellationTokenSource"/>. 
            Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor(System.Action{work.bacome.trace.cTrace.cContext})">
            <summary>
            Creates an instance specifying a callback to be used when the <see cref="P:work.bacome.async.cCancellationManager.Count"/> property changes.
            </summary>
            <param name="pCountChanged">The callback to be used when the <see cref="P:work.bacome.async.cCancellationManager.Count"/> property changes.</param>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.GetToken(work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object (the <see cref="T:work.bacome.async.cCancellationManager.cToken"/>) containing a <see cref="T:System.Threading.CancellationToken"/> that is attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>.
            Dispose the <see cref="T:work.bacome.async.cCancellationManager.cToken"/> when the operation being controlled by the contained <see cref="T:System.Threading.CancellationToken"/> completes.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns>A disposable object containing a <see cref="T:System.Threading.CancellationToken"/>.</returns>
        </member>
        <member name="P:work.bacome.async.cCancellationManager.Count">
            <summary>
            The number of concurrent operations attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.Cancel(work.bacome.trace.cTrace.cContext)">
            <summary>
            Cancels all of the operations attached to the current <see cref="T:System.Threading.CancellationTokenSource"/>.
            This causes the allocation of a new <see cref="T:System.Threading.CancellationTokenSource"/> so a new set of operations can be started immediately.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="T:work.bacome.async.cCancellationManager.cToken">
            <summary>
            Contains a <see cref="T:System.Threading.CancellationToken"/> attached to the <see cref="T:System.Threading.CancellationTokenSource"/> of a <see cref="T:work.bacome.async.cCancellationManager"/>.
            Dispose instances when the operation being controlled by the contained <see cref="F:work.bacome.async.cCancellationManager.cToken.CancellationToken"/> completes.
            </summary>
        </member>
        <member name="F:work.bacome.async.cCancellationManager.cToken.CancellationToken">
            <summary>
            The cancellation token to use in the controlled operation.
            </summary>
        </member>
        <member name="T:work.bacome.async.cCountdownTimer">
            <summary>
            Manages tasks that complete after a specified length of time.
            Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.#ctor(System.Int32,work.bacome.trace.cTrace.cContext)">
            <summary>
            Constructs a new instance. The first countdown commences immediately.
            </summary>
            <param name="pTimeout">The duration of each countdown task.</param>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.GetAwaitCountdownTask">
            <summary>
            Gets the currently running countdown task.
            </summary>
            <returns>The currently running countdown task.</returns>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.Restart(work.bacome.trace.cTrace.cContext)">
            <summary>
            Starts a new countdown task.
            Cannot be called if there is a countdown running.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess">
            <summary>
            Instances provide a mechanism to control exclusive access using a <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/>.
            </summary>
            <remarks>
            <para>Each instance is allocated a unique sequence number (within the exe) that is used in trace messages.</para>
            <para>Only one <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> can be issued at one time.</para>
            <para>Issue of the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> may be blocked by the issue of <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/> objects. Several <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/> objects can be on issue at the same time.</para>
            <para>If there are blocks issued, or if the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> is already issued, the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> cannot be issued.</para>
            <para>If the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> is issued, blocks cannot be issued.</para>
            <para>Use <see cref="M:work.bacome.async.cExclusiveAccess.GetTokenAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)"/> to get the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/>. This method will not complete until the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> can be issued or it throws due to the the passed <see cref="T:work.bacome.async.cMethodControl"/>.</para>
            <para>Use <see cref="M:work.bacome.async.cExclusiveAccess.GetBlockAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)"/> to get a <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/>. This method will not complete until a <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/> can be issued it throws due to the the passed <see cref="T:work.bacome.async.cMethodControl"/>.</para>
            <para>Use <see cref="M:work.bacome.async.cExclusiveAccess.TryGetBlock(work.bacome.trace.cTrace.cContext)"/> to try to get a <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/>. This method will return a <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/> if the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> is not currenly issued, otherwise it will return null.</para>
            <para>Note that the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> and <see cref="T:work.bacome.async.cExclusiveAccess.cBlock"/> objects implement <see cref="T:System.IDisposable"/> so they must be disposed when you are finished with them.</para>
            <para>Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.async.cExclusiveAccess.Released">
            <summary>
            Raised when the <see cref="T:work.bacome.async.cExclusiveAccess.cToken"/> is returned from issue.
            </summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance with a name and sequence number.
            </summary>
            <param name="pName">The instance name to include in trace messages written by the instance.</param>
            <param name="pSequence">The sequence number to give the instance. Sequence numbers can be used by external code to ensure that the program's locks are being taken in a consistent order (to avoid deadlocks).</param>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetBlockAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a block on the issue of the exclusive access.
            This method will not complete until the block is issued or it throws due to the <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the returned object to release the block.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns>An object that represents a block on the issue exclusive access.</returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.TryGetBlock(work.bacome.trace.cTrace.cContext)">
            <summary>
            May return a disposable object that represents a block on the issue exclusive access.
            This method will return a block if the exclusive access is not currently issued, otherwise it will return null.
            Dispose the returned object to release the block.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns>An object that represents a block on the issue of exclusive access, or null.</returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetTokenAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a grant of exclusive access.
            This method will not complete until the exclusive access is granted or it throws due to the <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the object to release the exclusive access.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns>An object that represents a grant of exclusive access.</returns>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cBlock">
            <summary>
            Instances represent a block on the issue of excusive access from a <see cref="T:work.bacome.async.cExclusiveAccess"/>. Dispose the instance to release the block.
            </summary>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cBlock.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cToken">
            <summary>
            Instances represent a grant of exclusive access from a <see cref="T:work.bacome.async.cExclusiveAccess"/>. Dispose the instance to release the exclusive access.
            </summary>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cToken.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="T:work.bacome.async.cMethodControl">
            <summary>
            Instances represent controls on the execution of an asynchronous method. Instances have a timeout and a <see cref="P:work.bacome.async.cMethodControl.CancellationToken"/>. 
            </summary>
            <remarks>
            Any timeout runs from when the instance is created; each time the value of the <see cref="P:work.bacome.async.cMethodControl.Timeout"/> property is retrieved only the time remaining is returned. 
            i.e. if the method being controlled has many internal async calls the timeout applies to the total time of all the internal calls.
            Infinite timeouts are supported (use -1 or <see cref="F:System.Threading.Timeout.Infinite"/> for the timeout).
            </remarks>
        </member>
        <member name="M:work.bacome.async.cMethodControl.#ctor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance. 
            </summary>
            <param name="pTimeout">The timeout to use (use -1 or <see cref="F:System.Threading.Timeout.Infinite"/> for no timeout).</param>
            <param name="pCancellationToken">The cancellation token to use (use <see cref="P:System.Threading.CancellationToken.None"/> for no cancellation).</param>
        </member>
        <member name="P:work.bacome.async.cMethodControl.Timeout">
            <summary>
            The amount of time remaining (or <see cref="F:System.Threading.Timeout.Infinite"/> if there is no timeout for this instance).
            </summary>
        </member>
        <member name="P:work.bacome.async.cMethodControl.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> being used.
            </summary>
        </member>
        <member name="T:work.bacome.async.cReleaser">
            <summary>Instances coordinate tasks that work together using internal coordinating tasks.</summary>
            <remarks>
            <para>One of the coordinated tasks is the worker task. This task does work when it is available. This task should;
            <list type="number">
            <item>Call the <see cref="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)"/> method to indicate that it is about to start working.</item>
            <item>Check for and do the work.</item>
            <item>Call the <see cref="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)"/> method to get a coordinating task to await.</item>
            </list>
            </para>
            <para>The other coordinated tasks are work requesting tasks. These tasks should;
            <list type="number">
            <item>Queue items of work.</item>
            <item>Call the <see cref="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)"/> method (this causes the current coordinating task to complete).</item>
            </list>
            </para>
            <para>Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            <para>Also note that before disposing an instance the <see cref="T:System.Threading.CancellationToken"/> provided to the constructor must be cancelled, otherwise the dispose may never complete.</para>
            </remarks>
        </member>
        <member name="M:work.bacome.async.cReleaser.#ctor(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new instance.</para>
            </summary>
            <param name="pName">A name to use when tracing.</param>
            <param name="pCancellationToken">A cancellation token to use on the coordinating tasks.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets the current coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns>The coordinating task.</returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)">
            <summary>
            Completes the current coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.IsReleased(work.bacome.trace.cTrace.cContext)">
            <summary>
            Determines if the current coordinating task is complete.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)">
            <summary>
            Indicates that work is about to be checked for and done.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="T:work.bacome.async.cAwaiter">
            <summary>
            Provides services for waiting on a number of tasks with timeout and/or cancellation.
            Note that this class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </summary>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(work.bacome.async.cMethodControl)">
            <summary>
            Creates an instance with timeout and cancellation. If a timeout is specified then it runs from when the instance is created.
            </summary>
            <param name="pMC">The timeout and cancellation to use.</param>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(System.Threading.CancellationToken)">
            <summary>
            Creates an instance with just cancellation.
            </summary>
            <param name="pCancellationToken">The cancellationtoken to use.</param>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAny(System.Threading.Tasks.Task,System.Threading.Tasks.Task[])">
            <summary>
            This method completes when any one of the passed tasks completes.
            If the task that completed failed (timed-out, was cancelled, or threw) then this method throws.
            If the instance timeout or cancellation token indicate that waiting should stop before a task completes, then this method throws.
            </summary>
            <param name="pTask">A task, can't be null.</param>
            <param name="pTasks">A set of tasks, any or all can be null.</param>
            <returns>The task that completed.</returns>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Threading.Tasks.Task[])">
            <summary>
            This method completes when all of the passed tasks complete OR when the <see cref="T:work.bacome.async.cMethodControl"/> indicates that waiting should stop.
            If any of the passed tasks fail (timed-out, was cancelled, or threw) then this method throws.
            If the <see cref="T:work.bacome.async.cMethodControl"/> indicates that waiting should stop before all the tasks complete then this method throws.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pTasks">The set of tasks to wait for. Tasks in the set can be null.</param>
            <returns>A task that can be awaited</returns>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            This method completes when all of the passed tasks complete OR when the <see cref="T:work.bacome.async.cMethodControl"/> indicates that waiting should stop.
            If any of the passed tasks fail (timed-out, was cancelled, or threw) then this method throws.
            If the <see cref="T:work.bacome.async.cMethodControl"/> indicates that waiting should stop before all the tasks complete then this method throws.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pTasks">The set of tasks to wait for. Tasks in the set can be null.</param>
            <returns>A task that can be awaited</returns>
        </member>
        <member name="T:work.bacome.trace.cTrace">
            <summary>
            Provides services for tracing to a <see cref="T:System.Diagnostics.TraceSource"/> with trace message indenting and context information.
            </summary>
            <remarks>
            <para>The concept is that trace messages are written in a context. Root-contexts can be established independently and sub-contexts can be created from root-contexts and sub-contexts.</para>
            <para>If a new sub-context is created for each call then call stack information can be built and included in the trace.</para>
            <para>
            Writing of context trace messages can be delayed until a non-context trace message is written, or context trace messages can be written as contexts are created.
            Note that if the writing is delayed then the generation of the context trace message is also delayed.
            If there are mutable objects to be included in the context trace message then this may lead to a misleading context trace message.
            (It is done like this for efficiency reasons.)
            </para>
            <para>
            Tracing can be disabled.
            When tracing is disabled contexts are not created and trace messages are not emitted, so most of the tracing overhead is eliminated.
            Tracing is disabled under the following circumstances;
            <list type="bullet">
            <item>The assembly is compiled without the "TRACE" conditional attribute.</item>
            <item>If there aren't any listeners attached to the <see cref="T:System.Diagnostics.TraceSource"/> when the instance is created.</item>
            <item>The <see cref="T:System.Diagnostics.TraceSource"/> isn't configured to emit critical messages when the instance is created.</item>
            </list>
            </para>
            <para>Root-contexts have a name and a number. The name is programmer assigned, the number is internally assigned and is unique for an exe.</para>
            <para>Trace messages are indented by a number of spaces that equals the context stack depth.</para>
            <para>Trace messages are written in a tab delimited form, the tab delimited 'columns' contain;
            <list type="number">
            <item>The <see cref="T:System.Diagnostics.TraceSource"/> defined data.</item>
            <item>The date and time that the message was written.</item>
            <item>The name and number of the root-context of this trace message.</item>
            <item>The thread number on which the trace message was written.</item>
            <item>The space indented trace message.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pTraceSourceName">The trace source name to use.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.NewRoot(System.String,System.Boolean)">
            <summary>
            Create a new independent root-context.
            </summary>
            <param name="pInstanceName">The name to give the context.</param>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed.</param>
            <returns>The new root-context.</returns>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext">
            <summary>
            A <see cref="T:work.bacome.trace.cTrace"/> tracing context.
            </summary>
            <remarks>
            Will be either a root-context or a sub-context. See <see cref="T:work.bacome.trace.cTrace"/> for more information.
            </remarks>
        </member>
        <member name="F:work.bacome.trace.cTrace.cContext.Null">
            <summary>A tracing context that does not create contexts or emit messages. Used to suppress tracing.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRoot(System.String,System.Boolean)">
            <summary>
            Creates a new root-context tied (in name only) to the root-context of this instance.
            </summary>
            <param name="pInstanceName">The name to use when creating the new the context.</param>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <returns>The new root-context with a name reflecting the root-context name of this instance and the specified name.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.Boolean,System.String,System.Object[])">
            <summary>
            Creates a new sub-context with a free form trace message.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
            <returns>A new sub-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])">
            <summary>
            Creates a new sub-context with a trace message in 'object constructor' form.
            Use when creating a context for a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that you want traced.</param>
            <returns>A new sub-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Creates a new sub-context with a trace message in 'property setter' form.
            Use when creating a context for a property setter.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns>A new sub-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Creates a new sub-context with a trace message in 'method' form.
            Use when creating a context for a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that you want traced.</param>
            <returns>A new sub-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.Boolean,System.String)">
            <summary>
            Creates a new root-context with a trace message in 'object constructor' form.
            Use when creating a new root-context in a constructor.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <returns>A new root-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.Boolean,System.String,System.String)">
            <summary>
            Creates a new root-context with a trace message in 'method' form.
            Use when creating a new root-context in a method.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context trace messages should be delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns>A new root-context.</returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.String,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.Boolean,System.String,System.Object[])"/> with delayed tracing set to false.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.String,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])"/> with delayed tracing set to false and the version number set to 1.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.Boolean,System.String,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])"/> with the version number set to 1.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.String,System.Int32,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])"/> with delayed tracing set to false.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.String,System.String,System.Object)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.Boolean,System.String,System.String,System.Object)"/> with delayed tracing set to false.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.String,System.String,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])"/> with delayed tracing set to false and the version number set to 1.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.Boolean,System.String,System.String,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])"/> with the version number set to 1.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.String,System.String,System.Int32,System.Object[])">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])"/> with delayed tracing set to false.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.String)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.Boolean,System.String)"/> with delayed tracing set to false.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.String,System.String)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.Boolean,System.String,System.String)"/> with delayed tracing set to false.</summary>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.ContextTraceDelay">
            <summary>Indicates if context tracing being delayed. See <see cref="T:work.bacome.trace.cTrace"/> for more information.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace message.
            </summary>
            <param name="pTraceEventType">The trace event type.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.EmitsVerbose">
            <summary>Indicates if the underlying context emits verbose trace messages.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceCritical(System.String,System.Object[])">
            <summary>
            Writes a critcal trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> form.</param>
            <param name="pArgs">The objects to place in the trace message.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with the event type set to <see cref="F:System.Diagnostics.TraceEventType.Error"/> and a default message.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.String,System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with the event type set to <see cref="F:System.Diagnostics.TraceEventType.Error"/>.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.Exception)">
            <summary>A version of <see cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)"/> with a default message.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)">
            <summary>
            Writes a trace message reporting an exception.
            </summary>
            <remarks>
            Designed for use in a conditional catch clause to trace the exception as it 'flies by': e.g. <code>catch (Exception e) when (lContext.TraceException(e)) { }</code>.
            </remarks>
            <param name="pTraceEventType">The trace event type to use.</param>
            <param name="pMessage">A message to trace.</param>
            <param name="e">The exception to trace.</param>
            <returns>Always returns false.</returns>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext.cRoot">
            <summary>
            A <see cref="T:work.bacome.trace.cTrace"/> root-context.
            </summary>
        </member>
    </members>
</doc>
