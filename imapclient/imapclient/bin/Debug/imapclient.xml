<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imapclient</name>
    </assembly>
    <members>
        <member name="T:work.bacome.imapclient.cIMAPClient">
            <summary>
            <para>Instances of this class can connect to an IMAP server.</para>
            <para>Before calling one of the <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> methods set the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> properties at a minimum.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/> and <see cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/></para>
            <para>Also consider setting the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/> property.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pInstanceName">The instance name used to tag trace messages. Useful if you have multiple instances in one exe.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.InstanceName">
            <summary>
            <para>The instance name used to tag trace messages.</para>
            <para>Set using the constructor.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext">
            <summary>
            <para>The synchronisation context on which callbacks (including events) are made.</para>
            <para>If set to null callbacks are made by the thread that discovers the need to do the callback.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.ResponseText">
            <summary>
            <para>Fired when the server sends response text.</para>
            <para>The IMAP spec says that alerts MUST be brought to the users attention.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkReceive">
            <summary>
            <para>Fired when the server sends a response.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkSend">
            <summary>
            <para>Fired when the client sends a command.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged">
            <summary>
            <para>Fired when a <see cref="T:work.bacome.imapclient.cMailbox"/> instance property changes.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery">
            <summary>
            <para>Fired when new messages appear in a <see cref="T:work.bacome.imapclient.cMailbox"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged">
            <summary>
            <para>Fired when a <see cref="T:work.bacome.imapclient.cMessage"/> instance property changes.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.CallbackException">
            <summary>
            <para>Fired when an exception is raised by a callback.</para>
            <para>The library ignores the exception other than raising this event.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Timeout">
            <summary>
            <para>Sets the timeout for calls that involve network access.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.CancellableCount">
            <summary>
            <para>Returns the number of currently running cancellable operations.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.Cancel"/></para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Cancel">
            <summary>
            <para>Cancels currently running cancellable operations.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Capabilities">
            <summary>
            <para>Returns the capabilities of the connected (or most recently connected) server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions">
            <summary>
            <para>Returns the extensions that the library enabled on the connected (or most recently connected) server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId">
            <summary>
            <para>Returns the accountid of the current (or most recent) connection.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral">
            <summary>
            <para>The login referral (rfc 2221), if received.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities">
            <summary>
            <para>Capabilities that you wish the instance to ignore.</para>
            <para>Must be set before connecting.</para>
            <para>Useful for testing or if your server (or the library) has a bug in its implementation of an IMAP extension.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Server">
            <summary>
            <para>The server that the instance should connect to.</para>
            <para>Must be set before connecting.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/> or <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/></para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)">
            <summary>
            <para>Sets the server that the instance should connect to, defaulting the port to 143 and SSL to false.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)">
            <summary>
            <para>Sets the server that the instance should connect to, specifying whether SSL is required or not.</para>
            <para>If SSL is required the port is set to 993, otherwise it is set to 143.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)">
            <summary>
            <para>Sets the server that the instance should connect to, specifying the port and whether SSL is required or not.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Credentials">
            <summary>
            <para>The credentials to be used to connect to the server.</para>
            <para>Must be set before connecting.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/></para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials">
            <summary>
            <para>Sets no credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>Useful to retrieve the capabilities of the server without connecting or when there is external authentication.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            <para>Sets anonymous credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>May fall back to LOGIN if SASL ANONYMOUS isn't available.</para>
            </summary>
            <param name="pTrace">The trace information sent to the server</param>
            <param name="pTLSRequirement"></param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try SASL ANONYMOUS mechanism even if it isn't advertised</param>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            <para>Sets plain credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>May fall back to LOGIN if SASL PLAIN isn't available.</para>
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try SASL PLAIN mechanism even if it isn't advertised</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals">
            <summary>
            <para>Indicates if the caller can handle mailbox referrals.</para>
            <para>If this is set to false the instance will not return remote mailboxes in mailbox lists.</para>
            <para>Being able to handle mailbox referrals means handling the exceptions that may be raised by the library when accessing remote mailboxes.</para>
            <para>See RFC 2193, <see cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>, <see cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>, <see cref="F:work.bacome.imapclient.cResponseText.Strings"/>, <see cref="T:work.bacome.imapclient.cURL"/> and <see cref="T:work.bacome.imapclient.support.cURI"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData">
            <summary>
            <para>Determines what details about mailboxes are available from the mailbox cache.</para>
            <para>Can't be set while connected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration">
            <summary>
            <para>Controls the size of writes to the network.</para>
            <para>You might want to limit this to increase the speed with which you can terminate the instance.</para>
            <para>Higher values are presumably more efficient.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration">
            <summary>
            <para>Sets parameters that control what the instance does while idle.</para>
            <para>Set to null to stop the instance from doing anything.</para>
            <para>If set, the instance determines that it is idle after the specified time and then issues periodic IDLE (rfc 2177) or CHECK/ NOOP commands.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration">
            <summary>
            <para>The default control on the size of reads from streams provided to append.</para>
            <para>You might want to limit this to increase the speed with which you can terminate the instance.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration">
            <summary>
            <para>The configuration that controls the number of messages fetched at one time.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration">
            <summary>
            <para>The configuration that controls the number of bytes fetched from the server at one time.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration">
            <summary>
            <para>The configuration that controls the number of bytes written to the output stream at one time when fetching.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Encoding">
            <summary>
            <para>The encoding to use when UTF8 (rfc 6855) is not supported directly by the server.</para>
            <para>The default value is UTF8.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientId">
            <summary>
            <para>The ID details to send to the server if it supports the ID command (rfc 2971).</para>
            <para>This is the ASCII version of the details.</para>
            <para>If the server supports UTF8 and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> is set, those details will be used in preference to these.</para>
            <para>The default details are those of the library.</para>
            <para>Set to null to send nothing.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8">
            <summary>
            <para>The ID details to send to the server if it supports the ID command (rfc 2971).</para>
            <para>This is the UTF8 version of the details.</para>
            <para>If this is set to null or the server does not support UTF8 then the <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> details will be used instead.</para>
            <para>The default is null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ServerId">
            <summary>
            <para>The ID details of the connected (or last connected) server, if it supports the ID command (rfc 2971).</para>
            <para>Set during connect.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Namespaces">
            <summary>
            <para>The namespace details for the connected (or last connected) account.</para>
            <para>Set during connect.</para>
            <para>If namespaces (rfc 2342) are not supported by the server the library creates one personal namespace using the delimiter retrieved using LIST.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Inbox">
            <summary>
            <para>The inbox of the connected (or last connected) account.</para>
            <para>Set during connect.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails">
            <summary>
            <para>Details of the currently selected mailbox, if any.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox">
            <summary>
            <para>The currently selected mailbox, if any.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)">
            <summary>
            <para>Returns the named mailbox.</para>
            </summary>
            <param name="pMailboxName">The mailbox name</param>
            <returns>The named mailbox</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.HasCachedChildren(work.bacome.imapclient.support.iMailboxHandle)">
            <summary>
            <para>Intended for internal use by the library.</para>
            <para>Checks if the cache contains mailboxes that are children of the specified mailbox.</para>
            <para>Used when the server has not indicated whether the mailbox has children or not.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts">
            <summary>
            <para>Intended for debugging use.</para>
            <para>Returns the number of subscriptions to the various events.</para>
            <para>Used to check that events are being 'unsubscribed' correctly.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems">
            <summary>
            Specifies the cache items that are fetched by default when message lists are generated using the mailbox's message list methods
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultSort">
            <summary>
            Specifies the sort that is used by default when message lists are generated using the mailbox's message list methods
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List subscribed mailboxes using an IMAP wildcard search
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter</param>
            <param name="pHasSubscribedChildren">Include in the list mailboxes that are not themselves subscribed but that have subscribed children</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes</param>
            <returns>A list of mailboxes</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SubscribedAsync(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List subscribed mailboxes using an IMAP wildcard search
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter</param>
            <param name="pHasSubscribedChildren">Include in the list mailboxes that are not themselves subscribed but that have subscribed children</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes</param>
            <returns>A list of mailboxes</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List mailboxes using an IMAP wildcard search
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes</param>
            <returns>A list of mailboxes</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.MailboxesAsync(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List mailboxes using an IMAP wildcard search
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes</param>
            <returns>A list of mailboxes</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Poll">
            <summary>
            Poll the server using CHECK (if a mailbox is selected) and NOOP to see if the server has pending notifications for us
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.PollAsync">
            <summary>
            Poll the server using CHECK (if a mailbox is selected) and NOOP to see if the server has pending notifications for us
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataSets">
            <summary>
            <para>Sets of data that can be fetched about a mailbox.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.list">
            <summary>
            <para>Data returned by the LIST command.</para>
            <para>Affects the following properties;
            <list type="table">
            <listheader><term>When</term><term>Properties</term></listheader>
            <item>Always</item><description><see cref="P:work.bacome.imapclient.cMailbox.Exists"/><see cref="P:work.bacome.imapclient.cMailbox.CanHaveChildren"/><see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/><see cref="P:work.bacome.imapclient.cMailbox.IsMarked"/><see cref="P:work.bacome.imapclient.cMailbox.IsRemote"/></description>
            <item>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.children"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/></description>
            <item>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/>, <see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/> etc</description>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub">
            <summary>
            <para>Data returned by the LSUB command.</para>
            <para>Affects <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.status">
            <summary>
            <para>Data returned by the STATUS command.</para>
            <para>Affects the following properties;
            <list type="table">
            <listheader><term>When caching</term><term>Property</term></listheader>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.messagecount"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/></description>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.recentcount"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/></description>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.uidnext"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/></description>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/></description>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.unseencount"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/></description>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq"/></item><description><see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/></description>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eStoreOperation">
            <summary>
            The store operation type
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.add">
            <summary>add flags to the flags already set</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.remove">
            <summary>remove flags from the flags already set</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.replace">
            <summary>replace the flags</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fCacheAttributes">
            <summary>
            A set of IMAP message attributes
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedback">
            <summary>
            Returned from copy operations if the server supports the UIDCOPY response code of rfc 4315
            </summary>
            <remarks>
            Contains pairs of UIDs of messages involved in the copy.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.eAccountType">
            <summary>
            The type of account
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.none">
            <summary> the library has no idea about the account that is in use </summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.anonymous">
            <summary> the account is an anonymous one </summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.userid">
            <summary> the account has a userid </summary>"
        </member>
        <member name="T:work.bacome.imapclient.cAccountId">
            <summary>
            Describes an IMAP account
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Host">
            <summary>
            The host that contains the account
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Type">
            <summary>
            The account type
            </summary>
            <remarks>
            If the connection was PREAUTHed then this will be none
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.UserId">
            <summary>
            If account's userid, if any
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.fCapabilities">
            <summary>
            A set of server capabilities
            </summary>
            <remarks>
            The elements of this enum are all the capabilities that the library understands in some way.
            The full list of server capabilities can be found in a cCapabilities instance
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cCapabilities">
            <summary>
            A set of server capabilities
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.Capabilities">
            <summary>
            Contains the capabilities as presented by the server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms">
            <summary>
            Contains the authentication mechanisms supported by the server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities">
            <summary>
            Contains the set of server capabilities that the instance is assuming
            </summary>
            <remarks>
            This is the set of recognised capabilities less the set that the instance has been told to ignore
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cCredentials">
            <summary>
            Describes a set of credentials
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Type">
            <summary>
            The account type that the credentials give access to
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.UserId">
            <summary>
            The userid for the credentials
            </summary>
            <remarks>
            may be null for anonymous and NONE; must not be null otherwise
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Login">
            <summary>
            The parameters to use with the IMAP LOGIN command for these credentials
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.TryAllSASLs">
            <summary>
            Whether all authentication mechanisms should be tried regardless of whether they are advertised by the server or not
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.mSASLs">
            <summary>
            The set of SASL objects to try when authenticating
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.None">
            <summary>
            An empty set of credentials
            </summary>
            <remarks>
            Useful for testing, checking what capabilities the server offers without connecting and for pre-authorised connections
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Anonymous(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Generates an anonymous set of credentials
            </summary>
            <param name="pTrace">The trace information to be sent to the server when connecting</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try AUTHENTICATE ANONYMOUS even if it isn't advertised</param>
            <returns>Anonymous credentials</returns>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Plain(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Generates a plain set of credentials
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try AUTHENTICATE PLAIN even if it isn't advertised</param>
            <returns>Plain credentials</returns>
        </member>
        <member name="T:work.bacome.imapclient.cLogin">
            <summary>
            Parameters to use with the LOGIN command
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.TLSRequirement">
            <summary>
            The TLS requirement for LOGIN to be used with this userid and password
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cLogin.TryConstruct(System.String,System.String,work.bacome.imapclient.eTLSRequirement,work.bacome.imapclient.cLogin@)">
            <summary>
            Tries to create a cLogin instance.
            LOGIN only allows ASCII userids and passwords, so this may fail.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
            <param name="rLogin"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cServer">
            <summary>
            Specifies an IMAP server
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String)">
            <summary>
            Port defaulted to 143 and SSL to false
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Boolean)">
            <summary>
            Port defaulted to 143 if SSL is false, otherwise 993
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eTLSRequirement">
            <summary>
            The TLS requirement
            </summary>
            <remarks>
            TLS can be established by specifying SSL in the server to be used or by the use of the STARTTLS command during connect if it is supported by the server.
            The library will automatically use STARTTLS if it is offered and the server does not specify SSL unless the instance has been told to ignore the STARTTLS capability.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Server"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
            
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.indifferent">
            <summary>Don't care whether TLS is active or not</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.required">
            <summary>TLS must be active</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.disallowed">
            <summary>TLS must not be active</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheData">
            <summary>
            A set of optionally cached mailbox attributes
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.subscribed">
            <summary>
            the backing data for the cMailbox.IsSubscribed property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.children">
            <summary>
            the backing data for the cMailbox.HasChildren property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.HasChildren"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.specialuse">
            <summary>
            the backing data for the cMailbox Contains* properties and the IsArchive property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.IsArchive"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.messagecount">
            <summary>
            the backing data for the cMailbox.MessageCount property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.MessageCount"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.recentcount">
            <summary>
            the backing data for the cMailbox.RecentCount property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.RecentCount"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidnext">
            <summary>
            the backing data for the cMailbox.UIDNext property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.UIDNext"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity">
            <summary>
            the backing data for the cMailbox.UIDValidity property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.unseencount">
            <summary>
            the backing data for the cMailbox.UnseenCount property
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq">
            <summary>
            the backing data for the cMailbox.HighestModSeq property
            </summary>
            <remarks>
            Note that if the mailbox does not support CONDSTORE (RFC 7162) then the value will be null
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItemBase">
            <summary>
            Base class for feedback on one message from a store operation
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.ReceivedFlagsUpdate">
            <summary>
            True if a fetch response containing the flags for this message was received during the store operation
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.WasNotUnchangedSince">
            <summary>
            True if this message was mentioned in the RFC 7162 MODIFIED response code from the store operation
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedbackItemBase.IncrementSummary(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,work.bacome.imapclient.sStoreFeedbackSummary@)">
            <summary>
            Intended for internal use
            </summary>
            <param name="pHandle"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pSummary"></param>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a store operation
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedback">
            <summary>
            Contains feedback from a store operation
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback
            </summary>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.sStoreFeedbackSummary">
            <summary>
            A summary of a store operation
            </summary>
            <remarks>
            each message counts towards ONE of the updated, wasnotunchangedsince, expunged, unknown, reflects and notreflects counts
             generally expunged + notreflects is the number of definite non-updates
             generally notreflects > 0 indicates that a poll of the server may be worth trying to get any pending updates (which should convert all the notreflects to expunged or reflects)
             unknown indicates that a blind update was done so there isn't enough information to say if the store happened or not
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount">
            <summary> the number where a fetch was received during the command execution and no 'modified' response was received (=> _likely_ to have been updated by the command) </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount">
            <summary> a 'modified' response was received (=> _NOT_ updated by the command) </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount">
            <summary> the number where the message handle indicates that the message is expunged </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount">
            <summary> the number where the handle isn't known (uidstore) or the handle does not contain the flags </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount">
            <summary> the flags in the handle reflect the update </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount">
            <summary> the flags in the handle do not reflect the update </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a UID store operation
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedback">
            <summary>
            Contains feedback from a UID store operation
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback
            </summary>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cASCII">
            <summary>
            Intended for internal use by the library
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cChar">
            <summary>
            Intended for internal use by the library
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cCharset">
            <summary>
            Intended for internal use by the library
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cASCIIMonth">
            <summary>
            Intended for internal use by the library
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cTools">
            <summary>
            Intended for internal use by the library
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailbox">
            <summary>
            <para>Provides an API that allows interaction with an IMAP mailbox.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.MessageDelivery">
            <summary>
            <para>Fired when new messages arrive in the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Path">
            <summary>
            <para>The fully qualified name of the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in the mailbox path.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ParentPath">
            <summary>
            <para>The path of the parent mailbox.</para>
            <para>Will be null if there is no parent mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Name">
            <summary>
            <para>The name of the mailbox.</para>
            <para>As compared to the <see cref="P:work.bacome.imapclient.cMailbox.Path"/> this does not include the hierarchy.</para>
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsInbox">
            <summary>
            <para>True if this instance represents the inbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Exists">
            <summary>
            <para>True if the mailbox exists on the server.</para>
            <para>Subscribed mailboxes and levels in the mailbox hierarchy do not need to exist.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanHaveChildren">
            <summary>
            <para>False if the mailbox can definitely not contain child mailboxes.</para>
            <para>See the IMAP \Noinferiors flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanSelect">
            <summary>
            <para>True if the mailbox can be selected</para>
            <para>See the IMAP \Noselect flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsMarked">
            <summary>
            <para>Indicates if the mailbox has been marked "interesting" by the server.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \Marked and \Unmarked flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsRemote">
            <summary>
            <para>If true the mailbox is definitely a remote mailbox.</para>
            <para>If the connected server supports rfc 5258, if this flag is false the mailbox is definitely not a remote mailbox, otherwise it still may be one.</para>
            <para>Remote mailboxes will never be returned by the library if the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/> is set to false.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasChildren">
            <summary>
            <para>Indicates if the mailbox had children when the property was refreshed.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \HasChildren and \HasNoChildren flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsAll">
            <summary>
            <para>If true the mailbox was marked with the \All flag indicating that the mailbox contains all messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsArchive">
            <summary>
            <para>If true the mailbox was marked with the \Archive flag indicating that the mailbox contains the message archive.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsDrafts">
            <summary>
            <para>If true the mailbox was marked with the \Drafts flag indicating that the mailbox contains draft messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsFlagged">
            <summary>
            <para>If true the mailbox was marked with the \Flagged flag indicating that the mailbox contains flagged messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsJunk">
            <summary>
            <para>If true the mailbox was marked with the \Junk flag indicating that the mailbox contains junk mail.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsSent">
            <summary>
            <para>If true the mailbox was marked with the \Sent flag indicating that the mailbox contains copies of messages that have been sent.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsTrash">
            <summary>
            <para>If true the mailbox was marked with the \Trash flag indicating that the mailbox contains copies of messages that are deleted.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSubscribed">
            <summary>
            <para>Indicates if this mailbox is subscribed.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageCount">
            <summary>
            <para>The number of messages in the mailbox.</para>
            <para>Null indicates that the messagecount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.RecentCount">
            <summary>
            <para>The number of recent messages in the mailbox.</para>
            <para>Null indicates that the recentcount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNext">
            <summary>
            <para>The predicted UID that will be given to the next new message entering the mailbox.</para>
            <para>Null indicates that the uidnext is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected, zero indicates that the value is unknown.</para>
            <para>When the mailbox is selected this property may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount"/> for the potential inaccuracy in this property value.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount">
            <summary>
            <para>When the mailbox is not selected this will be zero.</para>
            <para>Otherwise it is the number of messages that have arrived since the mailbox was opened for which the library has not seen the value of the UID.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDValidity">
            <summary>
            <para>The UIDValidity of the mailbox.</para>
            <para>Null indicates that the mailbox does not support UIDs or that the UIDValidity is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>).</para>
            <para>This property always has a value when the mailbox is selected, however zero indicates that the server does not support UIDs. (Also see <see cref="P:work.bacome.imapclient.cMailbox.UIDNotSticky"/>.)</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenCount">
            <summary>
            <para>The number of unseen messages in the mailbox.</para>
            <para>Null indicates that the unseencount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but it may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount"/> for the potential inaccuracy of this property value.</para>
            <para>To initialise the value of this property value when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.SetUnseen"/>.</para>
            <para>To maintain the value of this property when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/> on the new messages that arrive (see <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>).</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount">
            <summary>
            <para>When the mailbox is not selected this will be zero.</para>
            <para>Otherwise it is the number of messages for which the library is unsure of the value of the \Seen flag.</para>
            <para>To keep this value at zero see the technique outlined here: <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HighestModSeq">
            <summary>
            <para>See RFC 7162.</para>
            <para>Null indicates that the highestmodseq is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but zero indicates that RFC 7162 is not supported on the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelected">
            <summary>
            <para>Indicates if the mailbox has been selected once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox has been selected for update once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedReadOnly">
            <summary>
            <para>Indicates if the mailbox has been selected readonly once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNotSticky">
            <summary>
            <para>Indicates if the mailbox has sticky UIDs.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageFlags">
            <summary>
            <para>The defined flags in the mailbox.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected for update.</para>
            <para>Null if the mailbox has never been selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected readonly.</para>
            <para>Null if the mailbox has never been selected readonly.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelected">
            <summary>
            <para>Indicates if the mailbox is currently the selected mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox is currently selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsAccessReadOnly">
            <summary>
            <para>Indicates if the mailbox is currently selected but the mailbox can't be modified.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Gets the mailbox's child mailboxes.</para>
            </summary>
            <param name="pDataSets">
            <para>The sets of data to retrieve when getting the child mailboxes.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </param>
            <returns>A list of mailboxes</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            </summary>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.fMessageProperties">
            <summary>
            Specifies a set of message class properties
            </summary>
            <seealso cref="T:work.bacome.imapclient.cMessage"/>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItems">
            <summary>
            Specifies a set of items that can be cached in the internal message cache
            </summary>
            <remarks>
            Note that the class has three implicit conversions, including one from fMessageProperties.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.fMessageProperties"/>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Attributes">
            <summary>
            A set of IMAP message attributes
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Names">
            <summary>
            A list of header field names
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSortItem">
            <summary>
            An item to sort messages by
            </summary>
            <remarks>
            Use the static instances that are members of the class to improve readability of your sort specification
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Attribute">
            <summary>
            If sorting is to be done client-side this is the message cache attribute that is required
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Desc">
            <summary>
            Indicates descending sort
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSort">
            <summary>
            Defines a sort order for message lists
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.support.iMessageHandle)">
            <summary>
            Compares two message handles according to the sort definition.
            If the attributes required for the comparision are not in the message cache the results are undefined.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <summary>
            Compares two messages according to the sort definition.
            If the attributes required for the comparision are not in the message cache the attributes are fetched.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)">
            <summary>
            Returns the set of message attributes required by this sort and whether SORT=DISPLAY (RFC 5957) support is required for the server to do the sort.
            </summary>
            <param name="rDisplay">Set to true if SORT=DISPLAY (RFC 5957) support is required for the server to do the sort</param>
            <returns>The set of message attributes required by this sort</returns>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResultType">
            <summary>
            The IMAP command completion type
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResponseText">
            <summary>
            The IMAP response text associated with the command completion
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPException">
            <summary>
            Base class for all of the library's custom exceptions
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnsuccessfulCompletionException">
            <summary>
            Thrown on a 'NO' command response
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText">
            <summary>
            The response text associated with the 'NO'
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cProtocolErrorException">
            <summary>
            Thrown on a 'NO' or 'BAD' command response
            </summary>
            <remarks>
            Thrown on a 'NO' only when the 'NO' is an unexpected possibility
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.CommandResult">
            <summary>
            The command result associated with the response
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cUnexpectedServerActionException">
            <summary>
            thrown when something happens that shouldn't (according to my reading of the rfcs)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnexpectedServerActionException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cInternalErrorException">
            <summary>
            thrown when something happens that shouldn't
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cConnectByeException">
            <summary>
            thrown when the server said bye at connect
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cConnectByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHomeServerReferralException">
            <summary>
            thrown when the server rejects connection but suggests that we try a different server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText">
            <summary>
            The response text associated with the rejection
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentialsException">
            <summary>
            thrown when the server didn't accept the credentials provided
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentialsException.ResponseText">
            <summary>
            Filled in if there was an explicit rejection of the credetials by the server
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAuthenticationMechanismsException">
            <summary>
            thrown to indicate that the inability to connect is related to the lack of usable authentication mechanisms offered by the server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue">
            <summary>
            This is set to true if the problem might be fixed by using TLS
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnilateralByeException">
            <summary>
            thrown to indicate that a server initiated 'BYE' occurred
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnilateralByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurityException">
            <summary>
            thrown when SASL security layer encoding or decoding fails
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineConflictException">
            <summary>
            thrown when there are two pipelined commands that conflict in some way
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineStoppedException">
            <summary>
            thrown when the internal command pipeline has stopped processing commands
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStreamClosedException">
            <summary>
            thrown when the internal network stream has been closed
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDValidityChangedException">
            <summary>
            thrown when the UIDValidity changed while doing something that depended on it not changing
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cContentTransferDecodingException">
            <summary>
            thrown when the CTE can't be handled
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNException">
            <summary>
            thrown when a handle can't resolved when building the filter
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilterMSNException.Handle">
            <summary>
            The handle that couldn't be resolved to an MSN
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Code">
            <summary>
            The IMAP response text code associated with the response text
            </summary>
            <remarks>
            If there was no code 'none' is used. 
            If there was a code but it wasn't recognised then 'unknown' is used here and the text of the code is stored in UnknownCodeAtom.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Strings">
            <summary>
            Data associated with the response text code
            </summary>
            <remarks>
            For badcharset it may contain the list of valid charsets.
            For referral it should contain the URL(s).
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom">
            <summary>
            If the response text code was unrecognised the text of the code is made available here
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeText">
            <summary>
            If the unrecognised response text code had text following it the text is made available here
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Text">
            <summary>
            The response text
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.TextType">
            <summary>
            The response text type
            </summary>
            <remarks>
            Indicates the situation in which the response text was received
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Text">
            <summary>
            The response text
            </summary>
        </member>
    </members>
</doc>
