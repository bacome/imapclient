using System;
using System.IO;
using work.bacome.mailclient.support;

namespace work.bacome.imapclient
{
    public abstract class cSectionCacheItem
    {
        protected enum eItemState { deleted, exists }
        protected internal enum eSectionIdRecordState { notrecorded, cannotberecorded, recorded }

        private readonly object mLock = new object();

        public readonly cSectionCache Cache;
        public readonly int ItemSequence;
        public readonly object ItemId;
        private readonly Stream mReadWriteStream;
        private long mLength;
        private bool mCanGetReaderWriter;
        private bool mCached;
        private eSectionIdRecordState mSectionIdRecordState;

        // incremented when something significant changes about the cache item that should stop it from being deleted if the change wasn't taken into account by the decision to delete
        private int mChangeSequence = 0;

        private int mOpenStreamCount = 0;
        private bool mDeleted = false;
        private bool mToBeDeleted = false;
        private bool mIndexed = false;

        // these are only set for items generated internally, not for items generated by the concrete class
        private cSectionId mSectionId = null;
        private cSectionHandle mSectionHandle = null;

        public cSectionCacheItem(cSectionCache pCache, object pItemId, long pLength)
        {
            Cache = pCache ?? throw new ArgumentNullException(nameof(pCache));
            ItemSequence = pCache.GetItemSequence();
            ItemId = pItemId ?? throw new ArgumentNullException(nameof(pItemId));
            mReadWriteStream = null;
            if (mLength < 0) throw new ArgumentOutOfRangeException(nameof(pLength));
            mLength = pLength;
            mCanGetReaderWriter = false;
            mCached = true;
            mSectionIdRecordState = eSectionIdRecordState.recorded;
        }

        public cSectionCacheItem(cSectionCache pCache, object pItemId, Stream pReadWriteStream, uint pUIDValidity, bool pUIDNotSticky)
        {
            Cache = pCache ?? throw new ArgumentNullException(nameof(pCache));
            ItemSequence = pCache.GetItemSequence();
            ItemId = pItemId ?? throw new ArgumentNullException(nameof(pItemId));
            mReadWriteStream = pReadWriteStream ?? throw new ArgumentNullException(nameof(pReadWriteStream));
            if (!pReadWriteStream.CanRead || !pReadWriteStream.CanSeek || !pReadWriteStream.CanWrite || pReadWriteStream.Position != 0) throw new ArgumentOutOfRangeException(nameof(pReadWriteStream));
            mLength = -1;
            mCanGetReaderWriter = true;
            mCached = false;

            if (pUIDValidity == 0 || pUIDNotSticky) mSectionIdRecordState = eSectionIdRecordState.cannotberecorded;
            else mSectionIdRecordState = eSectionIdRecordState.notrecorded;
        }

        internal void SetSectionId(cSectionId pSectionId, cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(SetSectionId), pSectionId);
            if (mCached || mSectionId != null || mSectionHandle != null) throw new InvalidOperationException();
            mSectionId = pSectionId;
        }

        internal void SetSectionHandle(cSectionHandle pSectionHandle, cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(SetSectionHandle), nameof(SetSectionId), pSectionHandle);
            if (mCached || mSectionId != null || mSectionHandle != null) throw new InvalidOperationException();
            mSectionHandle = pSectionHandle;
        }

        protected abstract Stream YGetReadStream(cTrace.cContext pParentContext);
        protected abstract void YDelete(cTrace.cContext pParentContext);

        public int ChangeSequence => mChangeSequence;

        protected virtual eItemState YTouch(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(YTouch));
            return eItemState.exists;
        }

        protected virtual eSectionIdRecordState YTryRecordSectionId(bool pItemClosed, cSectionId pSectionId, cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(YTryRecordSectionId), pItemClosed, pSectionId);
            return eSectionIdRecordState.cannotberecorded;
        }

        protected internal bool TryDelete(int pChangeSequence, cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(TryDelete), pChangeSequence);

            if (mCanGetReaderWriter) throw new InvalidOperationException();

            lock (mLock)
            {
                if (mDeleted)
                {
                    lContext.TraceVerbose("already deleted");
                    return true;
                }

                if (mToBeDeleted)
                {
                    lContext.TraceVerbose("already scheduled for deletion");
                    return true;
                }

                if (mOpenStreamCount != 0)
                {
                    if (pChangeSequence == -2)
                    {
                        lContext.TraceVerbose("open, marking as todelete");
                        mToBeDeleted = true;
                    }
                    else lContext.TraceVerbose("open, not deleting");

                    return false;
                }

                if (pChangeSequence >= 0 && pChangeSequence != mChangeSequence)
                {
                    lContext.TraceVerbose("modified, not deleting");
                    return false;
                }

                try
                {
                    YDelete(lContext);
                    lContext.TraceVerbose("deleted");
                }
                catch (Exception e)
                {
                    lContext.TraceException("delete failure, marked as deleted", e);
                }

                mDeleted = true;
            }

            return true;
        }

        internal long Length => mLength;
        internal bool CanGetReaderWriter => mCanGetReaderWriter;
        internal bool Cached => mCached;
        internal eSectionIdRecordState SectionIdRecordState => mSectionIdRecordState;
        internal bool Deleted => mDeleted;
        internal bool ToBeDeleted => mToBeDeleted;
        internal bool Indexed => mIndexed;
        internal cSectionId SectionId => mSectionId;
        internal cSectionHandle SectionHandle => mSectionHandle;

        internal bool CameFromCache => mReadWriteStream == null;

        internal cSectionCacheItemReaderWriter GetReaderWriter(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(GetReaderWriter));

            cSectionCacheItemReaderWriter lReaderWriter;

            lock (mLock)
            {
                if (!mCanGetReaderWriter) throw new InvalidOperationException();
                mCanGetReaderWriter = false;
                lReaderWriter = new cSectionCacheItemReaderWriter(mReadWriteStream, ZDecrementOpenStreamCount, lContext);
                mOpenStreamCount++;
            }

            return lReaderWriter;
        }

        internal void SetCached(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(SetCached));

            if (mCanGetReaderWriter) throw new InvalidOperationException();

            lock (mLock)
            {
                if (mCached) throw new InvalidOperationException();

                mLength = mReadWriteStream.Length;
                mCached = true;

                ZTryRecordSectionId(lContext);
            }
        }

        internal void TryRecordSectionId(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(TryRecordSectionId));

            lock (mLock)
            {
                if (!mCached) throw new InvalidOperationException();
                ZTryRecordSectionId(lContext);
            }
        }

        internal void SetIndexed(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(SetIndexed));
            mIndexed = true;
        }

        internal bool TryGetReader(out cSectionCacheItemReader rReader, cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(TryGetReader));

            if (mCanGetReaderWriter) throw new InvalidOperationException();

            lock (mLock)
            {
                if (!mCached) throw new InvalidOperationException();

                if (mDeleted)
                {
                    lContext.TraceVerbose("deleted");
                    rReader = null;
                    return false;
                }

                if (mToBeDeleted)
                {
                    lContext.TraceVerbose("to be deleted");
                    rReader = null;
                    return false;
                }

                Stream lStream = null;

                try { lStream = YGetReadStream(lContext); }
                catch (Exception e) { lContext.TraceException("ygetreadstream failure", e); }

                if (lStream == null || lStream.Length != mLength)
                {
                    lContext.TraceWarning("marking as deleted because no stream was returned or the stream was the wrong length");
                    mDeleted = true;
                    rReader = null;
                    return false;
                }

                if (!lStream.CanRead || !lStream.CanSeek)
                {
                    lStream.Dispose();
                    throw new cUnexpectedSectionCacheActionException(lContext);
                }

                rReader = new cSectionCacheItemReader(lStream, ZDecrementOpenStreamCount, lContext);
                mOpenStreamCount++;

                return true;
            }
        }

        internal bool TryTouch(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(TryTouch));

            lock (mLock)
            {
                if (!mCached) throw new InvalidOperationException();
                if (mDeleted || mToBeDeleted) return false;
                if (mOpenStreamCount != 0) return true;
                return ZTryTouch(lContext);
            }
        }

        private void ZDecrementOpenStreamCount(cTrace.cContext pParentContext)
        {
            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(ZDecrementOpenStreamCount));

            lock (mLock)
            {
                if (mDeleted || --mOpenStreamCount != 0) return;

                if (!mCached || mToBeDeleted || (Cache.IsDisposed && mSectionIdRecordState != eSectionIdRecordState.recorded))
                {
                    lContext.TraceVerbose("item closed but either; not cached or, marked as to-be-deleted or, cache is disposed and sectionid hasn't been recorded");

                    try
                    {
                        YDelete(lContext);
                        lContext.TraceVerbose("deleted");
                    }
                    catch (Exception e)
                    {
                        lContext.TraceException("delete failure, marked as deleted", e);
                    }

                    mDeleted = true;

                    return;
                }

                ZTryRecordSectionId(lContext);
                ZTryTouch(lContext);
            }
        }

        private void ZTryRecordSectionId(cTrace.cContext pParentContext)
        {
            // must be called inside the lock

            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(ZTryRecordSectionId));

            if (mDeleted || mToBeDeleted || mSectionIdRecordState != eSectionIdRecordState.notrecorded) return;

            if (mSectionHandle != null && mSectionHandle.MessageHandle.Expunged)
            {
                lContext.TraceVerbose("marking as cannotberecorded because it is expunged");
                mSectionIdRecordState = eSectionIdRecordState.cannotberecorded;
                return;
            }

            if (mSectionId == null)
            {
                if (mSectionHandle == null) throw new InvalidOperationException();
                if (mSectionHandle.MessageHandle.UID == null) return;
                mSectionId = new cSectionId(new cMessageUID(mSectionHandle.MessageHandle.MessageCache.MailboxHandle.MailboxId, mSectionHandle.MessageHandle.UID), mSectionHandle.Section, mSectionHandle.Decoding);
            }

            try
            {
                mSectionIdRecordState = YTryRecordSectionId(mOpenStreamCount == 0, SectionId, lContext);
                if (mSectionIdRecordState == eSectionIdRecordState.recorded) mChangeSequence++;
            }
            catch (Exception e)
            {
                lContext.TraceException("marking as cannotberecorded because of tryrecordsectionid failure", e);
                mSectionIdRecordState = eSectionIdRecordState.cannotberecorded;
            }
        }

        private bool ZTryTouch(cTrace.cContext pParentContext)
        {
            // must be called inside the lock

            var lContext = pParentContext.NewMethod(nameof(cSectionCacheItem), nameof(ZTryTouch));

            try
            {
                if (YTouch(lContext) == eItemState.exists)
                {
                    lContext.TraceVerbose("touched");
                    mChangeSequence++;
                    return true;
                }
                else
                {
                    lContext.TraceVerbose("deleted");
                    mDeleted = true;
                    return false;
                }
            }
            catch (Exception e)
            {
                lContext.TraceException("marking as deleted because of touch failure", e);
                mDeleted = true;
                return false;
            }
        }

        public override string ToString() => $"{nameof(cSectionCacheItem)}({Cache},{ItemId})";
    }
}