<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imapclient</name>
    </assembly>
    <members>
        <member name="T:work.bacome.imapclient.sEventSubscriptionCounts">
            <summary>
            Contains the counts of the subscriptions to various <see cref="T:work.bacome.imapclient.cIMAPClient"/> events.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts"/>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.PropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.PropertyChanged"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.ResponseTextSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.ResponseText"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.NetworkReceiveSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkReceive"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.NetworkSendSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.NetworkSend"/> event.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.MailboxPropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.MailboxMessageDeliverySubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMailbox"/> with some <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.MessagePropertyChangedSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged"/> event. The count includes one for each <see cref="T:work.bacome.imapclient.cMessage"/> with some <see cref="E:work.bacome.imapclient.cMessage.PropertyChanged"/> subscriptions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sEventSubscriptionCounts.CallbackExceptionSubscriptionCount">
            <summary>The count of subscriptions to the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event.</summary>
        </member>
        <member name="M:work.bacome.imapclient.sEventSubscriptionCounts.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient">
            <summary>
            Instances of this class can interact with an IMAP server.
            </summary>
            <remarks>
            <para>
            An instance may connect many times, possibly to different servers, but it can only be connected to one server at a time.
            </para>
            <para>
            To connect to a server use <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            Before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> set <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> at a minimum.
            Also consider setting <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>.
            </para>
            <para>This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.Version">
            <summary>The version number of the library. Used in the default value of <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.ReleaseDate">
            <summary>The release date of the library. Used in the default value of <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIMAPClient.TraceSourceName">
            <summary>The trace source name used when tracing. See <see cref="T:work.bacome.trace.cTrace"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pInstanceName">The instance name to use for the instance's <see cref="T:work.bacome.trace.cTrace"/> root-context.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.InstanceName">
            <summary>
            Gets the instance name used in the tracing done by the instance.
            </summary>
            <seealso cref="T:work.bacome.trace.cTrace"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.#ctor(System.String)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext">
            <summary>
            Gets and sets the <see cref="T:System.Threading.SynchronizationContext"/> on which callbacks and events are invoked. May be set to <see langword="null"/>.
            </summary>
            <remarks>
            If this property is not <see langword="null"/>, callbacks and events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>, otherwise they are invoked directly by the initiating library thread. 
            Defaults to the <see cref="T:System.Threading.SynchronizationContext"/> of the instantiating thread.
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.PropertyChanged">
            <summary>
            Fired when a property value of the instance changes.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.ResponseText">
            <summary>
            Fired when the server sends response text.
            </summary>
            <remarks>
            <para>The IMAP spec says that <see cref="F:work.bacome.imapclient.eResponseTextCode.alert"/> text MUST be brought to the user's attention. See <see cref="F:work.bacome.imapclient.cResponseTextEventArgs.Text"/>.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler then the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkReceive">
            <summary>
            Fired when the server sends a response.
            </summary>
            <remarks>
            <para>This event is provided to aid in the debugging of the library.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler then the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkSend">
            <summary>
            Fired when the client sends an IMAP command.
            </summary>
            <remarks>
            <para>This event is provided to aid in the debugging of the library.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler then the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </para>
            </remarks>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged">
            <summary>
            Fired when the server notifies the client of a change that could affect a property value of a <see cref="T:work.bacome.imapclient.cMailbox"/> instance.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery">
            <summary>
            Fired when the server notifies the client that messages have arrived in a mailbox.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged">
            <summary>
            Fired when the server notifies the client of a change that could affect a property value of a <see cref="T:work.bacome.imapclient.cMessage"/> instance.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.CallbackException">
            <summary>
            Fired when an exception is raised by external code in a callback or event handler.
            </summary>
            <remarks>
            <para>The library ignores the exception other than raising this event. This event is provided to aid in the debugging of external code.</para>
            <para>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler of this event then the exception is completely ignored.
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Timeout">
            <summary>
            Gets and sets the timeout for library calls where no operation specific value for a timeout can be (or has been) specified.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.CancellableCount">
            <summary>
            Gets the current number of cancellable operations.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Cancel"/>
            <seealso cref="T:work.bacome.async.cCancellationManager"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Cancel">
            <summary>
            Cancels the current cancellable operations.
            </summary>
            <seealso cref="M:work.bacome.async.cCancellationManager.Cancel(work.bacome.trace.cTrace.cContext)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectionState">
            <summary>
            Gets the connection state of the instance.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsUnconnected">
            <summary>
            Indicates whether the instance is currently unconnected.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsConnected">
            <summary>
            Indicates whether the instance is currently connected.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Capabilities">
            <summary>
            Gets the capabilities of the connected (or most recently connected) server. May be <see langword="null"/>.
            </summary>
            <remarks>
            The capabilities reflect the server capabilities less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions">
            <summary>
            Gets the extensions that the library has enabled on the connected (or most recently connected) server.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId">
            <summary>
            Gets the accountid of the current (or most recent) connection. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral">
            <summary>
            Gets the login referral (RFC 2221), if received. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities">
            <summary>
            Gets and sets the server capabilities that the instance should ignore.
            </summary>
            <remarks>
            May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Useful for testing or if your server (or the library) has a bug in its implementation of an IMAP extension.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Server">
            <summary>
            Gets and sets the server to connect to. 
            </summary>
            <remarks>
            Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, defaulting the port to 143 and SSL to <see langword="false"/>. 
            </summary>
            <param name="pHost"></param>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, defaulting the port to 143 (no SSL) or 993 otherwise.
            </summary>
            <param name="pHost"></param>
            <param name="pSSL">Indicates whether the host requires that TLS be established immediately upon connect.</param>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>.
            </summary>
            <param name="pHost"></param>
            <param name="pPort"></param>
            <param name="pSSL">Indicates whether the host requires that TLS be established immediately upon connect.</param>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Credentials">
            <summary>
            Gets and sets the credentials to be used by <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <remarks>
            Must be set before calling <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>. 
            May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to no credentials. 
            </summary>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Useful to retrieve the property values set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> without actually connecting.
            Also useful when there is external authentication.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to anonymous credentials. 
            </summary>
            <param name="pTrace">The trace information to be sent to the server.</param>
            <param name="pTLSRequirement">The TLS requirement for the credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Indicates whether the SASL ANONYMOUS mechanism should be tried even if not advertised.</param>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            The credentials may fall back to IMAP LOGIN if SASL ANONYMOUS isn't available.
            This method will throw if <paramref name="pTrace"/> can be used in neither <see cref="F:work.bacome.imapclient.cLogin.Password"/> nor <see cref="T:work.bacome.imapclient.cSASLAnonymous"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> to plain credentials.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for the credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Indicates whether the SASL PLAIN mechanism should be tried even if not advertised.</param>
            <remarks>
            May only be called while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            The credentials may fall back to IMAP LOGIN if SASL PLAIN isn't available.
            This method will throw if the userid and password can be used in neither <see cref="T:work.bacome.imapclient.cLogin"/> nor <see cref="T:work.bacome.imapclient.cSASLPlain"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals">
            <summary>
            Gets and sets whether mailbox referrals will be handled.
            </summary>
            <remarks>
            The default value is <see langword="false"/>.
            May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            If this is set to <see langword="false"/> the instance will not return remote mailboxes in mailbox lists.
            Handling mailbox referrals means handling the exceptions that could be raised when accessing remote mailboxes.
            See RFC 2193 for details.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
            <seealso cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>
            <seealso cref="F:work.bacome.imapclient.cResponseText.Arguments"/>
            <seealso cref="T:work.bacome.imapclient.cURL"/>
            <seealso cref="T:work.bacome.imapclient.cURI"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems">
            <summary>
            Gets and sets the set of optionally requested mailbox data items.
            </summary>
            <remarks>
            The default set is <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.messagecount"/> and <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.unseencount"/>.
            May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            <note type="note" >
            The mailbox data items that are actually requested depends on the <see cref="T:work.bacome.imapclient.fMailboxCacheDataSets"/> value used at the time of the request.
            </note>
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Refresh(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxContainer.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxContainer.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration">
            <summary>
            Gets and sets the network-write batch-size configuration. You might want to limit this to increase the speed with which you can terminate the instance. May only be set while <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            </summary>
            <remarks>
            Limits the size of the buffer used when sending data to the server. Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration">
            <summary>
            Gets and sets the idle configuration. May be <see langword="null"/>.
            </summary>
            <remarks>
            For details of the idling process, see <see cref="T:work.bacome.imapclient.cIdleConfiguration"/>.
            Set this property to <see langword="null"/> to prevent the instance from idling.
            The default value is a default instance of <see cref="T:work.bacome.imapclient.cIdleConfiguration"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration">
            <summary>
            Gets and sets the default append-stream-read batch-size configuration. You might want to limit this to increase the speed with which you can terminate the instance.
            </summary>
            <remarks>
            Limits the size of the buffer when reading from the client-side stream (e.g. when reading an attachment from local disk). Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration">
            <summary>
            Gets and sets the fetch-cache-items batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the number of messages per batch when requesting cache-items from the server. Measured in number of messages.
            The default value is min=1 message, max=1000 messages, maxtime=10s, initial=1 message.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration">
            <summary>
            Gets and sets the fetch-body-read batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the size of the partial fetches used when getting body sections from the server. Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration">
            <summary>
            Gets and sets the fetch-body-write batch-size configuration. You might want to limit this to increase the speed with which you can cancel the fetch.
            </summary>
            <remarks>
            Limits the size of the buffer when writing to the client-side stream (e.g. when writing to the local disk). Measured in bytes.
            The default value is min=1000b, max=1000000b, maxtime=10s, initial=1000b.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Encoding">
            <summary>
            Gets and sets the encoding to use when <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> is not enabled.
            </summary>
            <remarks>
            The default value is <see cref="P:System.Text.Encoding.UTF8"/>.
            Only used when filtering by message content.
            If the connected server does not support the encoding it will reject filters that use it and the library will throw <see cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/> with <see cref="F:work.bacome.imapclient.eResponseTextCode.badcharset"/>.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cFilterPart"/>
            <seealso cref="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>
            <seealso cref="F:work.bacome.imapclient.cResponseText.Code"/>
            <seealso cref="F:work.bacome.imapclient.cResponseText.Arguments"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientId">
            <summary>
            Gets and sets the ASCII ID (RFC 2971) details. 
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Id"/> is in use, these details are sent to the server during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            If <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> has been enabled and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> is not <see langword="null"/>, then <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> will be used in preference to the value of this property.
            The default value is details about the library.
            Set this and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> to <see langword="null"/> to send nothing to the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8">
            <summary>
            Gets and sets the UTF8 ID (RFC 2971) details.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or <see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> has not been enabled then <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> is used instead.
            The default value of this property is <see langword="null"/>.
            See <see cref="T:work.bacome.imapclient.cClientId"/> and/ or <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> for more details.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ServerId">
            <summary>
            Gets the ID (RFC 2971) details of the connected (or last connected) server, if they were sent. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Namespaces">
            <summary>
            Gets the namespace details for the connected (or last connected) account. May be <see langword="null"/>.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Inbox">
            <summary>
            Gets the inbox of the connected (or last connected) account.
            </summary>
            <remarks>
            Set during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails">
            <summary>
            Gets the details of the currently selected mailbox, or <see langword="null"/> if there is no mailbox currently selected.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> to select a mailbox.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox">
            <summary>
            Gets an object that represents the currently selected mailbox, or <see langword="null"/> if there is no mailbox currently selected.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> to select a mailbox.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)">
            <summary>
            Gets an object that represents the named mailbox.
            </summary>
            <param name="pMailboxName"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts">
            <summary>
            Gets a report on the number of subscriptions to the events of the instance.
            </summary>
            <remarks>
            This report is provided to aid in the debugging of external code.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Connect">
            <summary>
            Connects to the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> using the <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
            May only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Will throw if an authenticated IMAP connection cannot be established.
            </summary>
            <remarks>
            <para>
            TLS is established if possible before authentication is attempted.
            TLS will be established immediately upon connect if <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> indicates that the host requires this (<see cref="F:work.bacome.imapclient.cServer.SSL"/>),
            otherwise the library will use the IMAP STARTTLS command if <see cref="P:work.bacome.imapclient.cCapabilities.StartTLS"/> is in use.
            </para>
            <para>
            During the authentication part of connecting the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> will be set (most likely more than once).
            The <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/> value is used to determine what capabilities offered by the server are actually used by the client.
            It is possible that the <see cref="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral"/> will be set during authentication: this indicates that the connected server suggests that we disconnect and try a different server.
            If authentication is successful then <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId"/> will be set.
            </para>
            <para>
            After authentication, depending on what the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> allow;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.fEnableableExtensions.utf8"/> is enabled (see <see cref="P:work.bacome.imapclient.cCapabilities.UTF8Accept"/> and <see cref="P:work.bacome.imapclient.cCapabilities.UTF8Only"/>); this sets <see cref="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions"/>.</item>
            <item>ID (RFC 2971) information is exchanged with the server; this sends <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> (or <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/>) and sets <see cref="P:work.bacome.imapclient.cIMAPClient.ServerId"/>.</item>
            <item>Namespace (RFC 2342) information is retrieved from the server; this sets <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>.</item>
            <item>A special syntax IMAP LIST command is used to discover the hierarchy delimiter and one personal namespace may be generated using it; this sets <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>.</item>
            </list>
            </para>
            <para>
            Normally only one of Namespace and LIST are used during connect, but under some strange circumstances both may be required.
            (The specific case is when the personal namespaces retrieved from the server do not contain the INBOX.)
            Once <see cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/> is known <see cref="P:work.bacome.imapclient.cIMAPClient.Inbox"/> is set.
            </para>
            <para>
            At the end of a successful connect the <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/> will be <see cref="F:work.bacome.imapclient.eConnectionState.notselected"/>,
            at the end of a failed connect <see cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/> will be <see cref="F:work.bacome.imapclient.eConnectionState.disconnected"/> and this method will throw.
            </para>
            <para>Some of the exceptions that might be thrown and why;
            <list type="bullet">
            <item>
              <term><see cref="T:work.bacome.imapclient.cConnectByeException"/></term>
              <description>
              The server actively rejected the connection.
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cCredentialsException"/></term>
              <description>
              The client was able to try credentials from <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>, but they didn't work.
              If the server explicitly rejected the credentials using one of the 
              <see cref="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed"/>, <see cref="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed"/> or <see cref="F:work.bacome.imapclient.eResponseTextCode.expired"/> codes,
              then <see cref="F:work.bacome.imapclient.cCredentialsException.ResponseText"/> will contain the details (otherwise the <see cref="F:work.bacome.imapclient.cCredentialsException.ResponseText"/> will be <see langword="null"/>).
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cAuthenticationMechanismsException"/></term>
              <description>
              The client was not able to try any credentials from <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
              If the TLS state was to blame for this then <see cref="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue"/> will be set to <see langword="true"/>.
              </description>
            </item>
            <item>
              <term><see cref="T:work.bacome.imapclient.cHomeServerReferralException"/></term>
              <description>
              While connecting the server either refused to connect or refused to authenticate and suggested that we try a different server instead
              (see <see cref="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText"/> and the contained <see cref="F:work.bacome.imapclient.cResponseText.Arguments"/>).
              </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.ConnectAsync">
            <summary>
            Ansynchronously connects to the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> using the <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>. 
            May only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsUnconnected"/>.
            Will throw if an authenticated IMAP connection cannot be established.
            </summary>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Connect" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <remarks>
            <para>
            Some servers exhibit unusual behaviour when the mailbox name includes 'unusual' characters (e.g. '/' when it isn't the delimiter). 
            Observed behaviours are;
            <list type="bullet">
            An <item>'OK' reply, but the mailbox created has a truncated name.</item>
            </list>
            </para>
            <para>
            Some servers exhibit unusual behaviour when <paramref name="pAsFutureParent"/> is <see langword="true"/> despite this appearing to be in violation of RFC 3501 section 6.3.3.
            Observed behaviours are;
            <list type="bullet">
            <item>An 'OK' reply and a mailbox created with the name specified (correct behaviour according to RFC 3501).</item>
            <item>A 'NO' reply and no mailbox created.</item>
            <item>An 'OK [CANNOT]' reply and no mailbox created.</item>
            <item>An 'OK' reply and a mailbox created with the name specified, but the mailbox has the \NoSelect flag set (so the mailbox can't be used to store messages).</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.CreateAsync(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Ansynchronously creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems">
            <summary>
            Gets and sets the items that are cached by default when message lists are generated.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultSort">
            <summary>
            Gets and sets the default message sort order.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Disconnect">
            <summary>
            Disconnects gracefully from the connected server.
            May only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.
            </summary>
            <remarks>
            The IMAP connection is closed gracefully, however any multi-part operations in progress will throw exceptions.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.DisconnectAsync">
            <summary>
            Disconnects gracefully and asynchronously from the connected server.
            May only be called when the instance <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.
            </summary>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Disconnect" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a set of messages. The mailbox that the messages are in must be selected.
            </summary>
            <param name="pMessages"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
            <remarks>
            <paramref name="pIfUnchangedSinceModSeq"/> may only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero. 
            (i.e. <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is in use and the mailbox supports the persistent storage of mod-sequences.)
            If a message has been modified since the specified value then the server will fail the store for that message.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a set of messages. The mailbox that the messages are in must be selected.
            </summary>
            <param name="pMessages"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Ensures that the specified items are cached for the specified messages.
            </summary>
            <param name="pMessages"></param>
            <param name="pItems"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where something went wrong and the cache was not populated.</returns>
            <remarks>
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.FetchAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously ensures that the specified items are cached for the specified messages.
            </summary>
            <param name="pMessages"></param>
            <param name="pItems"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets a list subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pHasSubscribedChildren">Specifies if mailboxes that are not themselves subscribed, but that have subscribed children, are included in the returned list.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SubscribedAsync(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets a list subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pHasSubscribedChildren">Specifies if mailboxes that are not themselves subscribed, but that have subscribed children, are included in the returned list.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets a list of mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            <para>
            The IMAP wildcards are;
            <list type="bullet">
            <item><token>*</token><description>Matches zero or more characters.</description></item>
            <item><token>%</token><description>Matches zero or more characters but not the hierarchy delimiter.</description></item>
            </list>
            </para>
            <para>
            <paramref name="pDelimiter"/> is used in preparing <paramref name="pListMailbox"/> for sending to the server.
            It should be correctly specified.
            The value specified does not affect what character is not matched by the % wildcard.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.MailboxesAsync(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets a list of mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string possibly including IMAP wildcards.</param>
            <param name="pDelimiter">The hierarchy delimiter used in <paramref name="pListMailbox"/>.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Poll">
            <summary>
            Solicits pending notifications from the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.PollAsync">
            <summary>
            Asynchronously solicits pending notifications from the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient._Tests(work.bacome.trace.cTrace.cContext)">
            <summary>
            Internal library tests.
            </summary>
            <param name="pParentContext"></param>
        </member>
        <member name="T:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event">
            <summary>
            
            </summary>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is not <see langword="null"/>, events and callbacks are invoked on the specified <see cref="T:System.Threading.SynchronizationContext"/>.
            If an exception is raised in an event handler or callback then the <see cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/> event is raised, but otherwise the exception is ignored.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.#ctor">
            <summary>
            Initialises a new instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.CompareTo(System.Object)">
            <summary>
            Compares this instance with the specified object.
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count">
            <summary>Gets the number of items in the set.</summary>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)">
            <summary>
            Gets one item.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode">
            <summary>
            Returns the hash code for the instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)">
            <summary>
            Determines whether two instances are the same.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)">
            <summary>
            Determines whether two instances are different.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample1">
            <summary>
            Contains ...
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample1.Constant">
            <summary>fred</summary>
        </member>
        <member name="T:work.bacome.imapclient.apidocumentation.eAPIDocumentationExample">
            <summary>
            The ...
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.eAPIDocumentationExample.fred">
            <summary>The ...</summary>
        </member>
        <member name="T:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2">
            <summary>
            Represents a ...
            A ... collection.
            A ... list.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate" select="returns|remarks"/>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.PSR">
            <summary>An apidocumentation that represents ...</summary>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Field1">
            <summary>
            The field1.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance {so it ... | with the specified ... }
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Contains(System.String)">
            <summary>
            Determines whether the { collection | list } contains ...
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.AMethod">
            <summary>
            Returns | Indicates whether ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.op_Implicit(System.String)~work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2">
            <summary>
            Returns a new instance containing [a copy of] ...
            </summary>
            <param name="pParam"></param>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.#ctor">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.#ctor"/>
        </member>
        <member name="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Event">
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.CompareTo(System.Object)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.CompareTo(System.Object)"/>
        </member>
        <member name="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Equals(work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.op_Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2,work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2.op_Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2,work.bacome.imapclient.apidocumentation.cAPIDocumentationExample2)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eConnectionState">
            <summary>
            Represents the connection state of an IMAP client instance.
            </summary>
            <remarks>
            In the <see cref="F:work.bacome.imapclient.eConnectionState.disconnected"/> state some <see cref="T:work.bacome.imapclient.cIMAPClient"/> properties retain their values from when the instance was connecting/ was connected.
            For example <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> may have a value in this state, whereas it definitely won't have one in the <see cref="F:work.bacome.imapclient.eConnectionState.notconnected"/> state.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectionState"/>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notconnected">
            <summary>The instance is not connected and never has been.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.connecting">
            <summary>The instance is in the process of connecting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notauthenticated">
            <summary>The instance is in the process of connecting, it is currently not authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.authenticated">
            <summary>The instance is in the process of connecting, it is authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.enabled">
            <summary>The instance is in the process of connecting, it has enabled all the server features it is going to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notselected">
            <summary>The instance is connected, there is no mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.selected">
            <summary>The instance is connected, there is a mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.disconnected">
            <summary>The instance is not connected, but it was connected, or tried to connect, once.</summary>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataSets">
            <summary>
            Represents sets of data items that can be requested about a mailbox. 
            </summary>
            <remarks>
            <para>
            The exact data items requested depend on the value of <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>.
            </para>
            <para>
            The <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.list"/> set of data will request data items that back the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item>
            Always;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.Exists"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.CanHaveChildren"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsMarked"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsRemote"/></item>
              </list>
            </item>
            <item>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.children"/>;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/></item>
              </list>
            </item>
            <item>
            If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/>;
              <list type="bullet">
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
              <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
              </list>
            </item>
            </list>
            </para>
            <para>
            The <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub"/> set of data will request data items that back <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>. 
            </para>
            <para>
            The <see cref="F:work.bacome.imapclient.fMailboxCacheDataSets.status"/> set of data will request data items that back the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.messagecount"/>: <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/></item>
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.recentcount"/>: <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/></item>
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidnext"/>: <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/></item>
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidvalidity"/>: <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/></item>
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.unseencount"/>: <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/></item>
            <item>If <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/> includes <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.highestmodseq"/>: <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/></item>
            </list>
            </para>
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Refresh(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxContainer.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.iMailboxContainer.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.list">
            <summary>The data returned by the IMAP LIST command.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub">
            <summary>The data returned by the IMAP LSUB command.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.status">
            <summary>The data returned by the IMAP STATUS command.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.all">
            <summary>The data returned by the IMAP LIST, LSUB and STATUS commands.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eStoreOperation">
            <summary>
            Represents a store operation type.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.add">
            <summary>Add flags to the flags that are already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.remove">
            <summary>Remove flags from the flags that are already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.replace">
            <summary>Replace the flags that are already set.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fMessageCacheAttributes">
            <summary>
            Represents a set of IMAP message attributes that can be cached.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cMessageCacheItems"/>
            <seealso cref="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)"/>
            <seealso cref="T:work.bacome.imapclient.cSortItem"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Attributes"/>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.flags">
            <summary>The flags that are set for the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.envelope">
            <summary>The envelope structure of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.received">
            <summary>The internal date of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.size">
            <summary>The RFC 2822 size of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.body">
            <summary>The non-extensible form of <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure">
            <summary>The MIME body structure of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.uid">
            <summary>The unique identifier of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.modseq">
            <summary>The mod-sequence of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.macrofast">
            <summary>The IMAP FAST macro (equivalent to: <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.received"/> and <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.size"/>).</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.macroall">
            <summary>The IMAP ALL macro (equivalent to: <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.received"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.size"/> and <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.envelope"/>).</summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageCacheAttributes.macrofull">
            <summary>The IMAP FULL macro (equivalent to: <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.received"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.size"/>, <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.envelope"/> and <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.body"/>).</summary>
        </member>
        <member name="T:work.bacome.imapclient.kHeaderFieldName">
            <summary>
            Contains named header-field-name constants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.InReplyTo">
            <summary>In-Reply-To</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.MessageId">
            <summary>Message-Id</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.References">
            <summary>References</summary>
        </member>
        <member name="F:work.bacome.imapclient.kHeaderFieldName.Importance">
            <summary>Importance</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            An immutable header-field-name collection. 
            </summary>
            <remarks>
            Header field names are case insensitive and have a limited grammar - see RFC 5322. 
            (Header field names may only include <see cref="F:work.bacome.imapclient.support.cCharset.FText"/> characters.)
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cSection"/>
            <seealso cref="T:work.bacome.imapclient.cMessageCacheItems"/>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.Empty">
            <summary>An empty header-field-name collection.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.References">
            <summary>A header-field-name collection containing only <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.Importance">
            <summary>A header-field-name collection containing only <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])">
            <summary>
            Initalises a new instance with a duplicate free (case insensitive) copy of the specified names. Will throw if the specified names aren't valid header field names.
            </summary>
            <param name="pNames"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cHeaderFieldNames" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String)">
            <summary>
            Determines whether the collection contains the specifed name (case insensitive).
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])">
            <summary>
            Determines whether the collection contains all the specified names (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Union(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set-union of this and the specified collection of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Intersect(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set-intersection of this and the specified collection of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Except(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the set-difference of this and the specified collection of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNames.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNames.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Equals(work.bacome.imapclient.cHeaderFieldNames)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Equality(work.bacome.imapclient.cHeaderFieldNames,work.bacome.imapclient.cHeaderFieldNames)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Inequality(work.bacome.imapclient.cHeaderFieldNames,work.bacome.imapclient.cHeaderFieldNames)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.op_Implicit(work.bacome.imapclient.cHeaderFieldNameList)~work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            Returns a new instance containing a copy of the specified list.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNameList">
            <summary>
            A header field name list.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cHeaderFieldNames" select="remarks"/>
            <seealso cref="T:work.bacome.imapclient.cHeaderFieldNames"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor">
            <summary>
            Initialises a new empty instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(System.String[])">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNames.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.#ctor(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Initalises a new instance with a copy of the specified names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String)">
            <summary>
            Determines whether the list contains the specified name (case insensitive).
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])">
            <summary>
            Determines whether the list contains all the specified names (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String)">
            <summary>
            Adds the specified name to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String[])">
            <summary>
            Adds each specified name to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String)">
            <summary>
            Removes the specified name from the list if it is there (case insensitive).
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String[])">
            <summary>
            Removes each specified name from the list if it is there (case insensitive).
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Union(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Returns the set-union of this and the specified list of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Intersect(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Returns the set-intersection of this and the specified list of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Except(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>
            Returns the set-difference of this and the specified list of names (case insensitive).
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNameList.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFieldNameList.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cHeaderField">
            <summary>
            Represents a message header field.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Name">
            <summary>
            The header field name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Value">
            <summary>
            The header field value.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderField.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgId">
            <summary>
            Represents a header field where the value is a message-id.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.MessageId"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgId.MsgId">
            <summary>
            The value of the field as a normalised (delimiters, quoting, comments and white space removed) message-id.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldMsgId.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgIds">
            <summary>
            Represents a header field where the value is a set of message-ids.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="P:work.bacome.imapclient.cHeaderFields.References"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.InReplyTo"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgIds.MsgIds">
            <summary>
            The value of the field as normalised (delimiters, quoting, comments and white space removed) message-ids.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldMsgIds.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldImportance">
            <summary>
            Represents a header field where the value is an importance.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cHeaderFields"/>
            <seealso cref="P:work.bacome.imapclient.cHeaderFields.Importance"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Low">
            <summary>The string constant for low importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Normal">
            <summary>The string constant for normal importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.High">
            <summary>The string constant for high importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Importance">
            <summary>The value of the field as an importance code.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.FieldValue(work.bacome.imapclient.eImportance)">
            <summary>
            Returns the string constant associated with the specified importance.
            </summary>
            <param name="pImportance"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFields">
            <summary>
            An immutable collection of message header fields.
            </summary>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.HeaderFields"/>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFields.Empty">
            <summary>An empty collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(System.String)">
            <summary>
            Determines whether the collection has been populated with header fields of the name specified (case insensitive). 
            </summary>
            <param name="pName"></param>
            <returns></returns>
            <remarks>
            <see langword="true"/> does not mean that there are header fields of the specified name in the collection.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines whether the collection has been populated with header fields of all the names specified (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
            <remarks>
            <see langword="true"/> does not mean that there are any header fields of the specified names in the collection.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ContainsNone(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Determines whether the collection has not been populated with header fields of any of the names specified (case insensitive). 
            </summary>
            <param name="pNames"></param>
            <returns></returns>
            <remarks>
            <see langword="false"/> does not mean that there are any header fields of the specified names in the collection.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Missing(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Returns the header field names from the specified collection that this instance has not been populated with (case insensitive).
            </summary>
            <param name="pNames"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.FirstNamed(System.String)">
            <summary>
            Returns one header field that has the specified name (case insensitive), or <see langword="null"/>. Throws if the collection has not been populated with header fields of the specified name.
            </summary>
            <param name="pName"></param>
            <returns></returns>
            <remarks>
            <see langword="null"/> indicates that there are no header fields of the specified name in the collection.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.AllNamed(System.String)">
            <summary>
            Returns all header fields that have the specified name (case insensitive). Throws if the collection has not been populated with header fields of the specified name.
            </summary>
            <param name="pName"></param>
            <returns></returns>
            <remarks>
            An empty set will be returned if there are no header fields of the specified name in the collection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.References">
            <summary>
            Returns the normalised message-ids from the references header field, or <see langword="null"/>. Throws if the collection has not been populated with the references header field.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            <see langword="null"/> indicates that there is either no references header field in the collection or that the references header field could not be parsed.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.Importance">
            <summary>
            Returns the importance value from the importance header field, or <see langword="null"/>. Throws if the collection has not been populated with the importance header field.
            </summary>
            <remarks>
            <see langword="null"/> indicates that there is either no importance header field in the collection or that the importance header field could not be parsed.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.op_Addition(work.bacome.imapclient.cHeaderFields,work.bacome.imapclient.cHeaderFields)">
            <summary>
            Returns a collection that is the combination of the two specified header field collections.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.eImportance">
            <summary>
            Represents the message's importance.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.Importance"/>
            <seealso cref="T:work.bacome.imapclient.cFilterImportance"/>
            <seealso cref="P:work.bacome.imapclient.cHeaderFields.Importance"/>
            <seealso cref="T:work.bacome.imapclient.cHeaderFieldImportance"/>
        </member>
        <member name="F:work.bacome.imapclient.eImportance.low">
            <summary>Low importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eImportance.normal">
            <summary>Normal importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eImportance.high">
            <summary>High importance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedbackItem">
            <summary>
            Contains feedback on one message in a copy operation, based on the RFC 4315 UIDCOPY response.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCopyFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cCopyFeedbackItem.SourceMessageUID">
            <summary>The UID of the source message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCopyFeedbackItem.CreatedMessageUID">
            <summary>The UID of the newly created message.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedbackItem.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedback">
            <summary>
            Contains feedback on a copy operation, based on the RFC 4315 UIDCOPY response.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)"/>
        </member>
        <member name="P:work.bacome.imapclient.cCopyFeedback.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="P:work.bacome.imapclient.cCopyFeedback.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedback.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cCopyFeedback.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItemFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token and progress-increment callback. Intended for use when doing large message cache population operations.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Timeout">
            <summary>The timeout for the operation. May be <see cref="F:System.Threading.Timeout.Infinite"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation. May be <see cref="P:System.Threading.CancellationToken.None"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Increment">
            <summary>
            The progress-increment callback for the operation. May be <see langword="null"/>. Invoked once for each batch of messages fetched, the argument specifies how many messages were fetched in the batch.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cCacheItemFetchConfiguration" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItemFetchConfiguration.#ctor(System.Int32)">
            <summary>
            Initialises a new instance with the specified timeout. Intended for use with synchronous APIs.
            </summary>
            <param name="pTimeout">May be <see cref="F:System.Threading.Timeout.Infinite"/>.</param>
        </member>
        <member name="M:work.bacome.imapclient.cCacheItemFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32})">
            <summary>
            Initialises a new instance with the specified cancellation token and progress-increment callback. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
        </member>
        <member name="T:work.bacome.imapclient.cBodyFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token, progress-increment callback and write-size configuration. Intended for use when fetching large message body parts into a stream.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <inheritdoc cref="T:work.bacome.imapclient.cCacheItemFetchConfiguration" select="remarks"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Timeout">
            <inheritdoc cref="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Timeout"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.CancellationToken">
            <inheritdoc cref="F:work.bacome.imapclient.cCacheItemFetchConfiguration.CancellationToken"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Increment">
            <inheritdoc cref="F:work.bacome.imapclient.cCacheItemFetchConfiguration.Increment"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Write">
            <summary>
            The output-stream-write batch-size configuration. If <see langword="null"/> <see cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/> will be used.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyFetchConfiguration.#ctor(System.Int32,work.bacome.imapclient.cBatchSizerConfiguration)">
            <summary>
            Initialises a new instance with the specified timeout and optional output-stream-write batch-size configuration. Intended for use with synchronous APIs.
            </summary>
            <param name="pTimeout">May be <see cref="F:System.Threading.Timeout.Infinite"/>.</param>
            <param name="pWrite">If <see langword="null"/> then <see cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/> will be used.</param>
        </member>
        <member name="M:work.bacome.imapclient.cBodyFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32},work.bacome.imapclient.cBatchSizerConfiguration)">
            <summary>
            Initialises a new instance with the specified cancellation token, progress-increment callback and optional output-stream-write batch-size configuration. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
            <param name="pWrite">If <see langword="null"/> then <see cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/> will be used.</param>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFetchConfiguration">
            <summary>
            Contains an operation specific timeout, cancellation token, progress-setcount and progress-increment callbacks. Intended for use when retrieving a large number of messages from the server.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cCacheItemFetchConfiguration" select="remarks"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessageFetchConfiguration.SetCount">
            <summary>
            The progress-setcount callback for the operation. May be <see langword="null"/>. Invoked once before any progress-increment invokes, the argument specifies how many messages are going to be fetched.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cCacheItemFetchConfiguration" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFetchConfiguration.#ctor(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.cCacheItemFetchConfiguration.#ctor(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFetchConfiguration.#ctor(System.Threading.CancellationToken,System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            Initialises a new instance with the specified cancellation token, progress-setcount and progress-increment callbacks. Intended for use with asynchronous APIs.
            </summary>
            <param name="pCancellationToken">May be <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="pSetCount">May be <see langword="null"/>.</param>
            <param name="pIncrement">May be <see langword="null"/>.</param>
        </member>
        <member name="T:work.bacome.imapclient.cMessageHandleList">
            <summary>
            A list of messages.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageHandleList.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cStrings">
            <summary>
            A read-only collection of strings.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStrings.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.eAccountType">
            <summary>
            Represents the type of an IMAP account.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAccountId"/>
            <seealso cref="T:work.bacome.imapclient.cCredentials"/>
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.unknown">
            <summary>The library has no idea about the type of the account.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.anonymous">
            <summary>The account is an anonymous one.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.userid">
            <summary>The account has a userid.</summary>"
        </member>
        <member name="T:work.bacome.imapclient.cAccountId">
            <summary>
            Represents an IMAP account.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId"/>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Host">
            <summary>
            The host that contains the account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Type">
            <summary> 
            The type of the account.
            </summary>
            <remarks>
            If the connection was IMAP PREAUTHed then this will be <see cref="F:work.bacome.imapclient.eAccountType.unknown"/>.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.UserId">
            <summary>
            The account's userid. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.Equals(work.bacome.imapclient.cAccountId)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.op_Equality(work.bacome.imapclient.cAccountId,work.bacome.imapclient.cAccountId)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cAccountId.op_Inequality(work.bacome.imapclient.cAccountId,work.bacome.imapclient.cAccountId)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.fCapabilities">
            <summary>
            Represents a set of IMAP capabilities.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCapabilities"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
            <seealso cref="T:work.bacome.imapclient.cProtocolErrorException"/>
            <seealso cref="T:work.bacome.imapclient.cUnexpectedServerActionException"/>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.logindisabled">
            <summary>IMAP LOGINDISABLED</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.starttls">
            <summary>IMAP STARTTLS</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.idle">
            <summary>RFC 2177 IDLE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.literalplus">
            <summary>RFC 7888 LITERAL+</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.literalminus">
            <summary>RFC 7888 LITERAL-</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.enable">
            <summary>RFC 5161 ENABLE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.utf8accept">
            <summary>RFC 6855 UTF8=ACCEPT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.utf8only">
            <summary>RFC 6855 UTF8=ONLY</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.listextended">
            <summary>RFC 5258 LIST extensions</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.children">
            <summary>RFC 3348 Child mailboxes</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sasl_ir">
            <summary>RFC 4959 SASL initial client response</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.loginreferrals">
            <summary>RFC 2221 Login referrals</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.mailboxreferrals">
            <summary>RFC 2193 Mailbox referrals</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.id">
            <summary>RFC 2971 Id</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.binary">
            <summary>RFC 3516 Binary content</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.namespaces">
            <summary>RFC 2342 Namespaces</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.liststatus">
            <summary>RFC 5819 STATUS information in LIST</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.specialuse">
            <summary>RFC 6154 Special use</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.esearch">
            <summary>RFC 4731 ESEARCH</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sort">
            <summary>RFC 5256 SORT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.sortdisplay">
            <summary>RFC 5256 SORT=DISPLAY</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.esort">
            <summary>RFC 5267 ESORT</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.condstore">
            <summary>RFC 7162 CONDSTORE</summary>
        </member>
        <member name="F:work.bacome.imapclient.fCapabilities.qresync">
            <summary>RFC 7162 QRESYNC</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCapabilities">
            <summary>
            An immutable collection of IMAP capabilities.
            </summary>
            <remarks>
            The properties of this class reflect the value of <see cref="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities"/>.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.Capabilities">
            <summary>
            The capabilities advertised by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms">
            <summary>
            The authentication mechanisms advertised by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities">
            <summary>
            The set of capabilities that are in use.
            </summary>
            <remarks>
            This value reflects the recognised elements of <see cref="F:work.bacome.imapclient.cCapabilities.Capabilities"/> less the <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginDisabled">
            <summary>Indicates whether IMAP LOGIN is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.StartTLS">
            <summary>Indicates whether IMAP STARTTLS is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Idle">
            <summary>Indicates whether RFC 2177 IDLE is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralPlus">
            <summary>Indicates whether RFC 7888 LITERAL+ is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LiteralMinus">
            <summary>Indicates whether RFC 7888 LITERAL- is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Enable">
            <summary>Indicates whether RFC 5161 ENABLE is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Accept">
            <summary>Indicates whether RFC 6855 UTF8=ACCEPT is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.UTF8Only">
            <summary>Indicates whether RFC 6855 UTF8=ONLY is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListExtended">
            <summary>Indicates whether RFC 5258 LIST extensions is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Children">
            <summary>Indicates whether RFC 3348 Child mailboxes is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SASL_IR">
            <summary>Indicates whether RFC 4959 SASL initial client response is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.LoginReferrals">
            <summary>Indicates whether RFC 2221 Login referrals is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.MailboxReferrals">
            <summary>Indicates whether RFC 2193 Mailbox referrals is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Id">
            <summary>Indicates whether RFC 2971 Id is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Binary">
            <summary>Indicates whether RFC 3516 Binary content is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Namespace">
            <summary>Indicates whether RFC 2342 Namespaces is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ListStatus">
            <summary>Indicates whether RFC 5819 STATUS information in LIST is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SpecialUse">
            <summary>Indicates whether RFC 6154 Special use is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESearch">
            <summary>Indicates whether RFC 4731 ESEARCH is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.Sort">
            <summary>Indicates whether RFC 5256 SORT is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.SortDisplay">
            <summary>Indicates whether RFC 5256 SORT=DISPLAY is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.ESort">
            <summary>Indicates whether RFC 5267 ESORT is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.CondStore">
            <summary>Indicates whether RFC 7162 CONDSTORE is in use.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cCapabilities.QResync">
            <summary>Indicates whether RFC 7162 QRESYNC is in use.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCapabilities.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cCredentials">
            <summary>
            Represents credentials that can be used during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Type">
            <summary>
            The type of account that the credentials give access to.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.UserId">
            <summary>
            The userid of the account that the credentials give access to. May be <see langword="null"/>.
            </summary>
            <remarks>
            Will be <see langword="null"/> when <see cref="F:work.bacome.imapclient.cCredentials.Type"/> is <see cref="F:work.bacome.imapclient.eAccountType.anonymous"/> or <see cref="F:work.bacome.imapclient.eAccountType.unknown"/>, will not be <see langword="null"/> otherwise.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Login">
            <summary>
            The arguments to use with the IMAP LOGIN command for these credentials.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.TryAllSASLs">
            <summary>
            Indicates whether all <see cref="P:work.bacome.imapclient.cCredentials.SASLs"/> should be tried even if the server doesn't advertise the associated authentication mechanism.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms"/>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.mSASLs">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.#ctor(System.String,work.bacome.imapclient.cLogin,System.Boolean)">
            <summary></summary>
        </member>
        <member name="P:work.bacome.imapclient.cCredentials.SASLs">
            <summary>
            Gets the set of SASL objects that can used used during <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.None">
            <summary>
            An empty set of credentials. 
            </summary>
            <remarks>
            Useful for testing.
            Useful for pre-authorised connections.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Anonymous(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns a new set of anonymous credentials.
            </summary>
            <param name="pTrace">The trace information to be sent to the server.</param>
            <param name="pTLSRequirement">The TLS requirement for the credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Indicates whether the SASL ANONYMOUS mechanism should be tried even if not advertised.</param>
            <returns></returns>
            <remarks>
            The credentials returned may fall back to IMAP LOGIN if SASL ANONYMOUS isn't available.
            This method will throw if <paramref name="pTrace"/> can be used in neither <see cref="F:work.bacome.imapclient.cLogin.Password"/> nor <see cref="T:work.bacome.imapclient.cSASLAnonymous"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Plain(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Returns a new set of plain credentials.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for the credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Indicates whether the SASL PLAIN mechanism should be tried even if not advertised.</param>
            <returns></returns>
            <remarks>
            The credentials returned may fall back to IMAP LOGIN if SASL PLAIN isn't available.
            This method will throw if the userid and password can be used in neither <see cref="T:work.bacome.imapclient.cLogin"/> nor <see cref="T:work.bacome.imapclient.cSASLPlain"/>.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cLogin">
            <summary>
            Contains arguments for use with the IMAP LOGIN command.
            </summary>
            <remarks>
            The IMAP LOGIN command limits userids and passwords to ASCII characters excluding the NUL character.
            </remarks>
            <seealso cref="F:work.bacome.imapclient.cCredentials.Login"/>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.UserId">
            <summary>The userid to use.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.Password">
            <summary>The password to use.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.TLSRequirement">
            <summary>The TLS requirement for the userid and password to be used.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cLogin.#ctor(System.String,System.String,work.bacome.imapclient.eTLSRequirement)">
            <summary>
            Initialises a new instance with the specified userid, password and TLS requirement. Will throw if the userid and password specified can't be used with IMAP LOGIN.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for the userid and password to be used.</param>
            <inheritdoc cref="T:work.bacome.imapclient.cLogin" select="remarks"/>
        </member>
        <member name="T:work.bacome.imapclient.cServer">
            <summary>
            Represents an IMAP server.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Server"/>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Host">
            <summary>The host name of the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.Port">
            <summary>The port number to connect to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cServer.SSL">
            <summary>Indicates whether the host requires that TLS be established immediately upon connect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String)">
            <summary>
            Initialises a new instance with the specified host name.
            </summary>
            <param name="pHost"></param>
            <remarks>
            The port number is set to 143 and SSL set to <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Boolean)">
            <summary>
            Initialises a new instance with the specified host name and SSL setting.
            </summary>
            <param name="pHost"></param>
            <param name="pSSL">Indicates whether the host requires that TLS be established immediately upon connect.</param>
            <remarks>
            The port number is set to 143 if <paramref name="pSSL"/> is <see langword="false"/>, otherwise the port number is set to 993.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initialises a new instance with the specified host name, port number and SSL setting.
            </summary>
            <param name="pHost"></param>
            <param name="pPort"></param>
            <param name="pSSL">Indicates whether the host requires that TLS be established immediately upon connect.</param>
        </member>
        <member name="M:work.bacome.imapclient.cServer.Equals(work.bacome.imapclient.cServer)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cServer.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cServer.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cServer.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cServer.op_Equality(work.bacome.imapclient.cServer,work.bacome.imapclient.cServer)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cServer.op_Inequality(work.bacome.imapclient.cServer,work.bacome.imapclient.cServer)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eTLSRequirement">
            <summary>
            Represents a TLS requirement.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>
            <seealso cref="T:work.bacome.imapclient.cLogin"/>
            <seealso cref="T:work.bacome.imapclient.cSASLPlain"/>
            <seealso cref="T:work.bacome.imapclient.cSASLAnonymous"/>
            <seealso cref="T:work.bacome.imapclient.cSASL"/>
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.indifferent">
            <summary>Don't care whether TLS is active or not.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.required">
            <summary>TLS must be active.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.disallowed">
            <summary>TLS must not be active.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.eDecodingRequired">
            <summary>
            Represents the decoding required for message data.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cAttachment.DecodingRequired"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/>
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.other">
            <summary>Decoding is required, but it is not <see cref="F:work.bacome.imapclient.eDecodingRequired.quotedprintable"/> or <see cref="F:work.bacome.imapclient.eDecodingRequired.base64"/> decoding.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.none">
            <summary>No decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.quotedprintable">
            <summary>Quoted-printable decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.base64">
            <summary>BASE64 decoding is required.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fEnableableExtensions">
            <summary>
            Represents a set of enableable IMAP extensions.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions"/>
        </member>
        <member name="F:work.bacome.imapclient.fEnableableExtensions.none">
            <summary>A constant representing no extensions.</summary>
        </member>
        <member name="F:work.bacome.imapclient.fEnableableExtensions.utf8">
            <summary><see cref="P:work.bacome.imapclient.cCapabilities.UTF8Accept"/>, <see cref="P:work.bacome.imapclient.cCapabilities.UTF8Only"/></summary>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataItems">
            <summary>
            Represents a set of optionally requested mailbox data items.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.subscribed">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.children">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse">
            <summary>
            The backing data for;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
            </list>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.messagecount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.recentcount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.uidnext">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.uidvalidity">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.unseencount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.highestmodseq">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/>. The value is only requested if <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is in use and the mailbox supports the persistent storage of mod-sequences.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataItems.allstatus">
            <summary>
            The backing data retrieved by the IMAP STATUS command (equivalent to: <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.messagecount"/>, <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.recentcount"/>, <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidnext"/>, <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidvalidity"/>, <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.unseencount"/> and <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.highestmodseq"/>). 
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCallbackExceptionEventArgs">
            <summary>
            Carries exceptions raised by external code.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.CallbackException"/>
        </member>
        <member name="F:work.bacome.imapclient.cCallbackExceptionEventArgs.Exception">
            <summary>
            The exception that was raised.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCallbackExceptionEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cNetworkReceiveEventArgs">
            <summary>
            Carries a response received from a server.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.NetworkReceive"/>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkReceiveEventArgs.Response">
            <summary>
            The response that was received.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNetworkReceiveEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cNetworkSendEventArgs">
            <summary>
            Carries data sent to a server.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.NetworkSend"/>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkSendEventArgs.Bytes">
            <summary>
            The number of bytes sent (<see langword="null"/> if this can't be disclosed).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNetworkSendEventArgs.Buffers">
            <summary>
            The bytes sent (sensitive data redacted).
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cNetworkSendEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItemBase">
            <summary>
            Represents feedback on one message in a store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cStoreFeedbackItem"/>
            <seealso cref="T:work.bacome.imapclient.cUIDStoreFeedbackItem"/>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.ReceivedFlagsUpdate">
            <summary>
            Indicates whether an IMAP FETCH response containing the flags was received for the message during the store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.WasNotUnchangedSince">
            <summary>
            Indicates whether the message was mentioned in the RFC 7162 MODIFIED response code of the store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItem">
            <summary>
            Contains feedback on one message in a store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cStoreFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItem.MessageHandle">
            <summary>The message that the feedback relates to.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedbackItem.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedback">
            <summary>
            Contains feedback on a store operation.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback. May return a different value after a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cStoreFeedback.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="P:work.bacome.imapclient.cStoreFeedback.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.sStoreFeedbackSummary">
            <summary>
            Contains a summary of store operation feedback.
            </summary>
            <remarks>
            <para>Each message counts towards ONE of;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount"/></item>
            <item><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/></item>
            </list>
            </para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount"/> + <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/> + <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> is the number of definite non-updates.</para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> > 0 indicates that a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may be worth trying to get any pending updates from the server (which should convert all the notreflects to expunged or reflects).</para>
            <note type="note">After a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> you should get the summary again to see the effect of any updates sent by the server.</note>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/> > 0 indicates that a blind store was done so there isn't enough information to say whether the store happened or not.</para>
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cStoreFeedback.Summary"/>
            <seealso cref="M:work.bacome.imapclient.cUIDStoreFeedback.Summary"/>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount">
            <summary>The count where an IMAP FETCH response containing the flags for the message was received during the store operation AND the message wasn't mentioned in the RFC 7162 MODIFIED response code of the store operation (=> the message was _likely_ to have been updated by the store).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount">
            <summary>The count where the message was mentioned in the RFC 7162 MODIFIED response code of the store operation (=> _NOT_ updated by the store).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount">
            <summary>The count where the message cache indicates that the message has been expunged.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount">
            <summary>The count where the entry in the message cache for the message can't be found, or where it can be found but it doesn't contain the flags for the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount">
            <summary>The count where the flags in the message cache reflect the store operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount">
            <summary>The count where the flags in the message cache do not reflect the store operation.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyOKCount">
            <summary>Gets the count of messages that were likely to have been updated by the store.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyFailedCount">
            <summary>Gets the count of messages that most likely were NOT updated by the store.</summary>
        </member>
        <member name="P:work.bacome.imapclient.sStoreFeedbackSummary.LikelyWorthPolling">
            <summary>Gets the count of messages for which doing a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may increase our knowledge of what happened.</summary>
        </member>
        <member name="M:work.bacome.imapclient.sStoreFeedbackSummary.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedbackItem">
            <summary>
            Contains feedback on one message in a UID store operation.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cUIDStoreFeedback"/>
        </member>
        <member name="F:work.bacome.imapclient.cUIDStoreFeedbackItem.UID">
            <summary>The UID that the feedback relates to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cUIDStoreFeedbackItem.MessageHandle">
            <summary>The message that the feedback relates to. May be <see langword="null"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedbackItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedback">
            <summary>
            Contains feedback on a UID store operation.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.Summary">
            <inheritdoc cref="M:work.bacome.imapclient.cStoreFeedback.Summary" select="summary|returns|remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cUIDStoreFeedback.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="P:work.bacome.imapclient.cUIDStoreFeedback.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.support.cListFlags">
            <summary>
            Contains some cached mailbox data. Intended for internal use.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.iMailboxHandle"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cListFlags.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.support.cLSubFlags">
            <summary>
            Contains some cached mailbox data. Intended for internal use.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.iMailboxHandle"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cLSubFlags.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.support.iMessageCache">
            <summary>
            Represents a message cache.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.iMessageHandle"/>
            <seealso cref="T:work.bacome.imapclient.support.iSelectedMailboxDetails"/>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.MailboxHandle">
            <summary>Gets the mailbox that this message cache belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.NoModSeq">
            <summary>Indicates that the mailbox does not support the persistent storage of mod-sequences.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.RecentCount">
            <summary>
            Gets the number of recent messages in the mailbox.
            </summary>
            <remarks>
            See RFC 3501 for a definition of recent.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.UIDNext">
            <summary>
            Gets the predicted next UID for the mailbox. May be zero.
            </summary>
            <remarks>
            Zero indicates that the value is not known.
            The value may not be up-to-date.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.UIDNextUnknownCount">
            <summary>
            Indicates how out-of-date the <see cref="P:work.bacome.imapclient.support.iMessageCache.UIDNext"/> is.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.UIDValidity">
            <summary>
            Gets the UIDValidity of the mailbox. May be zero.
            </summary>
            <remarks>
            Zero indicates that the server does not support unique identifiers.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.UnseenCount">
            <summary>
            Gets the number of unseen messages in the mailbox.
            </summary>
            <remarks>
            The value may not be accurate.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.UnseenUnknownCount">
            <summary>Indicates how inaccurate the <see cref="P:work.bacome.imapclient.support.iMessageCache.UnseenCount"/> may be.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageCache.HighestModSeq">
            <summary>
            Gets the highest mod-sequence for the mailbox. May be zero.
            </summary>
            <remarks>
            Zero indicates that <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is not in use or that the mailbox does not support the persistent storage of mod-sequences.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.support.iSelectedMailboxDetails">
            <summary>
            Represents a selected mailbox.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails"/>
        </member>
        <member name="P:work.bacome.imapclient.support.iSelectedMailboxDetails.MailboxHandle">
            <summary>Gets the mailbox that is selected.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iSelectedMailboxDetails.SelectedForUpdate">
            <summary>Indicates whether the mailbox is selected for update.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iSelectedMailboxDetails.AccessReadOnly">
            <summary>Indicates whether the mailbox can be modified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iSelectedMailboxDetails.MessageCache">
            <summary>Gets the message cache of the selected mailbox.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.iMailboxHandle">
            <summary>
            Represents an IMAP mailbox uniquely within a mailbox cache.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cMailbox.MailboxHandle"/>
            <seealso cref="T:work.bacome.imapclient.support.iSelectedMailboxDetails"/>
            <seealso cref="T:work.bacome.imapclient.support.iMessageCache"/>
            <seealso cref="T:work.bacome.imapclient.cMailboxPropertyChangedEventArgs"/>"/>
            <seealso cref="T:work.bacome.imapclient.cMailboxMessageDeliveryEventArgs"/>"/>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.MailboxCache">
            <summary>Gets the mailbox cache that the instance belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.MailboxName">
            <summary>Gets the name of the mailbox.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.Exists">
            <summary>Indicates whether the mailbox exists on the server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.ListFlags">
            <summary>Gets an object that contains a subset of the data held about the mailbox, may be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.LSubFlags">
            <summary>Gets an object that contains a subset of the data held about the mailbox, may be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.MailboxStatus">
            <summary>Gets an object that contains a subset of the data held about the mailbox, may be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMailboxHandle.SelectedProperties">
            <summary>Gets an object that contains a subset of the data held about the mailbox.</summary>
        </member>
        <member name="T:work.bacome.imapclient.support.cMailboxSelectedProperties">
            <summary>
            Contains some cached mailbox data. Intended for internal use.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.iMailboxHandle"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cMailboxSelectedProperties.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.support.cMailboxStatus">
            <summary>
            Contains some cached mailbox data. Intended for internal use.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.iMailboxHandle"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cMailboxStatus.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.support.cBinarySizes">
            <summary>
            An immutable mapping from a message body-part that can be fetched using the BINARY (RFC 3516) command to the decoded size in bytes of that body-part.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBinarySizes.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.support.cBinarySizes.op_Addition(work.bacome.imapclient.support.cBinarySizes,work.bacome.imapclient.support.cBinarySizes)">
            <summary>
            Returns a map that is the combination of the two specified two maps.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.iMessageHandle">
            <summary>
            Represents an IMAP message uniquely within a message cache.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cMessageHandleList"/>
            <seealso cref="T:work.bacome.imapclient.cMessageDeliveryEventArgs"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/>
            <seealso cref="F:work.bacome.imapclient.cAttachment.MessageHandle"/>
            <seealso cref="F:work.bacome.imapclient.cMessage.MessageHandle"/>
            <seealso cref="T:work.bacome.imapclient.cStoreFeedbackItem"/>
            <seealso cref="T:work.bacome.imapclient.cUIDStoreFeedbackItem"/>
            <seealso cref="T:work.bacome.imapclient.cSort"/>
            <seealso cref="T:work.bacome.imapclient.support.iMessageCache"/>
            <seealso cref="T:work.bacome.imapclient.cMessagePropertyChangedEventArgs"/>
            <seealso cref="T:work.bacome.imapclient.cMessageExpungedException"/>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.MessageCache">
            <summary>Gets the message cache that the instance belongs to.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.CacheSequence">
            <summary>Gets the message's sequence in the <see cref="P:work.bacome.imapclient.support.iMessageHandle.MessageCache"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Expunged">
            <summary>Indicates whether the message exists on the server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Attributes">
            <summary>Gets the attributes that the message cache currently contains for the message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Body">
            <summary>
            Gets the IMAP BODY data, <see langword="null"/> if this data isn't cached.
            </summary>
            <remarks>
            The BODY data is the same as the BODYSTRUCTURE data but is missing the 'extension data'.
            In particular the following elements (and the properties that derive from them) will be <see langword="null"/>;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cMultiPartBody.ExtensionData"/></item>
            <item><see cref="F:work.bacome.imapclient.cSinglePartBody.ExtensionData"/></item>
            </list>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure">
            <summary>Gets the IMAP BODYSTRUCTURE data, <see langword="null"/> if this data isn't cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Envelope">
            <summary>Gets the IMAP ENVELOPE data, <see langword="null"/> if this data isn't cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Flags">
            <summary>Gets the current IMAP FLAGS data, <see langword="null"/> if this data isn't cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.ModSeq">
            <summary>
            Gets the RFC 7162 mod-sequence data, <see langword="null"/> if this data isn't cached, may be zero.
            </summary>
            <remarks>
            Zero indicates that either <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is not in use or that the mailbox does not support the persistent storage of mod-sequences.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Received">
            <summary>Gets the IMAP INTERNALDATE data, <see langword="null"/> if this data isn't cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.Size">
            <summary>Gets the IMAP RFC822.SIZE data, <see langword="null"/> if this data isn't cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.UID">
            <summary>
            Gets the UID of the message, may be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that either the data isn't cached or that the mailbox does not support unique identifiers.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.HeaderFields">
            <summary>Gets the set of header fields that are currently cached for the message, will be <see langword="null"/> if none have been cached.</summary>
        </member>
        <member name="P:work.bacome.imapclient.support.iMessageHandle.BinarySizes">
            <summary>Gets the binary body-part sizes that are currently cached for the message, will be <see langword="null"/> if none have been cached.</summary>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Contains(work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Determines whether all the specified items are cached for the message.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.ContainsNone(work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Determines whether none of the specified items are cached for the message.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.iMessageHandle.Missing(work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Returns those items from the specified items that are not cached for the message.
            </summary>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cBytes">
            <summary>
            An immutable collection of bytes.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNetworkSendEventArgs"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cBytes.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.support.cResponseLine">
            <summary>
            Represents a line of a server response.
            </summary>
            <seealso cref="T:work.bacome.imapclient.support.cResponse"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cResponseLine.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.support.cResponse">
            <summary>
            Represents a server response.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNetworkReceiveEventArgs"/>
        </member>
        <member name="M:work.bacome.imapclient.support.cResponse.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.support.cCharset">
            <summary>
            Represents a set of characters that are valid in a parsing context. Intended for internal use.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.support.cCharset.Contains(System.Byte)">
            <summary>
            Determines whether the specified byte is contained in the set of characters.
            </summary>
            <param name="pByte"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.support.cCharset.Contains(System.Char)">
            <summary>
            Determines whether the specified char is contained in the set of characters.
            </summary>
            <param name="pChar"></param>
            <returns></returns>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Alpha">
            <summary>Represents the characters A-Z and a-z.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Digit">
            <summary>Represents the characters 0-9.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AlphaNumeric">
            <summary>Represents the characters A-Z, 0-9 and a-z.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Scheme">
            <summary>Represents the characters used in RFC 3986 'scheme'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.UserInfo">
            <summary>Represents the characters used in RFC 3986 'userinfo'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Atom">
            <summary>Represents the characters used in RFC 3501 'atom'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AString">
            <summary>Represents the characters used in RFC 3501 'astring'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.TextNotRBRACKET">
            <summary>Represents the characters used in RFC 3501 response text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.ListMailbox">
            <summary>Represents the characters used in RFC 3501 'list-mailbox'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AChar">
            <summary>Represents the characters used in RFC 5092 'achar'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.BChar">
            <summary>Represents the characters used in RFC 5092 'bchar'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.PathSegment">
            <summary>Represents the characters used in RFC 3986 'segment'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.PathSegmentNoColon">
            <summary>Represents the characters used in RFC 3986 'segment-nz-nc'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Path">
            <summary>Represents the characters used in various RFC 3986 path components (= PathSegment + '/').</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AfterPath">
            <summary>Represents the characters used in RFC 3986 'query' and 'fragment'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.RegName">
            <summary>Represents the characters used in RFC 3986 'reg-name'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.IPLiteral">
            <summary>Represents the characters used in RFC 3986 'IP-literal'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.UAuthMechanism">
            <summary>Represents the characters used in RFC 5092 'uauth-mechanism'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Hexidecimal">
            <summary>Represents the characters A-F, 0-9 and a-f.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.CharsetName">
            <summary>Represents the characters used in RFC 2978 'mime-charset-chars'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.CharsetNameDash">
            <summary>Represents the characters used in RFC 2231 'charset'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.All">
            <summary>Represents a character set that contains all characters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.Base64">
            <summary>Represents the characters A-Z, 0-9, a-z, +, /, and =.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.QEncoding">
            <summary>Represents the characters used in RFC 2047 Quoted-Printable.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.CText">
            <summary>Represents the characters used in RFC 6532 'ctext'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.AText">
            <summary>Represents the characters used in RFC 6532 'atext'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.QText">
            <summary>Represents the characters used in RFC 6532 'qtext'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.DText">
            <summary>Represents the characters used in RFC 6532 'dtext'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.FText">
            <summary>Represents the characters used in RFC 5322 'ftext'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.support.cCharset.VSChar">
            <summary>Represents the characters used in RFC 6749 'VSCHAR'.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailbox">
            <summary>
            Represents an IMAP mailbox.
            </summary>
            <remarks>
            <para>
            Instances of this class are only valid whilst the <see cref="F:work.bacome.imapclient.cMailbox.Client"/> remains connected.
            Reconnecting the client will not bring instances back to life.
            </para>
            <para>
            To interact with messages in a mailbox, IMAP requires that the mailbox be selected - use <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/> to select the mailbox.
            Each IMAP connection (and hence each <see cref="T:work.bacome.imapclient.cIMAPClient"/> instance) can have at most one mailbox selected – selecting a mailbox automatically un-selects the previously selected mailbox.
            An instance of this class may be selected and un-selected many times in its lifetime.
            <see cref="T:work.bacome.imapclient.cMessage"/> instances are valid only whilst the mailbox they are in remains selected.
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Inbox"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMailbox.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailbox.MailboxHandle">
            <summary>The mailbox that this instance represents.</summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a change that affects a property value of this instance.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.MessageDelivery">
            <summary>
            Fired when the server notifies the client that messages have arrived in the mailbox.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Path">
            <summary>
            Gets the mailbox name including the full hierarchy.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Delimiter">
            <summary>
            Gets the hierarchy delimiter used in <see cref="P:work.bacome.imapclient.cMailbox.Path"/>. May be <see langword="null"/>. 
            </summary>
            <remarks>
            Will be <see langword="null"/> if the server has no hierarchy in its names.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ParentPath">
            <summary>
            Gets the path of the parent mailbox. Will be <see langword="null"/> if there is no parent mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Name">
            <summary>
            Gets the name of the mailbox. As compared to <see cref="P:work.bacome.imapclient.cMailbox.Path"/> this does not include the hierarchy.
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsInbox">
            <summary>
            Indicates whether this instance represents the INBOX.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Exists">
            <summary>
            Indicates whether the mailbox exists on the server.
            </summary>
            <remarks>
            Subscribed mailboxes and levels in the mailbox hierarchy do not necessarily exist as mailboxes on the server. Mailboxes can also be deleted.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanHaveChildren">
            <summary>
            Indicates whether the mailbox can definitely not contain child mailboxes. May be <see langword="null"/>.
            </summary>
            <remarks>
            Reflects the IMAP \Noinferiors flag. Will be <see langword="null"/> if the mailbox does not exist on the server.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.Exists"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanSelect">
            <summary>
            Indicates whether the mailbox can be selected.
            </summary>
            <remarks>
            Reflects the IMAP \Noselect flag.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsMarked">
            <summary>
            Indicates whether the mailbox has been marked "interesting" by the server. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the server didn't say either way. Reflects the IMAP \Marked and \Unmarked flags.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsRemote">
            <summary>
            Indicates whether the mailbox is a remote mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> will only be returned under the following set of circumstances;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/> is set to <see langword="true"/>, and</item>
            <item><see cref="P:work.bacome.imapclient.cCapabilities.MailboxReferrals"/> is in use, and</item>
            <item><see cref="P:work.bacome.imapclient.cCapabilities.ListExtended"/> is not in use.</item>
            </list>
            Under these circumstances it is not possible to reliably determine if the mailbox is remote or not.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasChildren">
            <summary>
            Indicates whether the mailbox has child mailboxes. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the server didn't say either way, which may be because;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.children"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item><see cref="P:work.bacome.imapclient.cCapabilities.Children"/> is not in use.</item>
            </list>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsAll">
            <summary>
            Indicates whether the mailbox contains all messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \All flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsArchive">
            <summary>
            Indicates whether the mailbox contains the message archive. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Archive flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsDrafts">
            <summary>
            Indicates whether the mailbox contains message drafts. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Drafts flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsFlagged">
            <summary>
            Indicates whether the mailbox contains flagged messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Flagged flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsJunk">
            <summary>
            Indicates whether the mailbox contains junk mail. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Junk flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsSent">
            <summary>
            Indicates whether the mailbox contains sent messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Sent flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsTrash">
            <summary>
            Indicates whether the mailbox contains deleted or to-be deleted messages. May be <see langword="null"/>.
            </summary>
            <remarks>
            Refects the RFC 6154 \Trash flag.
            <see langword="null"/> indicates that <see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.specialuse"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>).
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cCapabilities.SpecialUse"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSubscribed">
            <summary>
            Indicates whether the mailbox is subscribed-to or not.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageCount">
            <summary>
            Gets the number of messages in the mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <para>
            This property always has a value when the mailbox is selected. 
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.messagecount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            <para>
            When the mailbox is selected the library maintains the value of this property by monitoring responses from the server,
            but for the value to be up-to-date 
            the responses have to be solicited (use <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> or allow idling using <see cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>).
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.RecentCount">
            <summary>
            Gets the number of recent messages in the mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <para>
            See RFC 3501 for a definition of recent.
            </para>
            <para>
            This property always has a value when the mailbox is selected.
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.recentcount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            <para>
            When the mailbox is selected the library maintains the value of this property by monitoring responses from the server,
            but for the value to be up-to-date 
            the responses have to be solicited (use <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> or allow idling using <see cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>).
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNext">
            <summary>
            Gets the predicted next UID for the mailbox. May be <see langword="null"/> or zero.
            </summary>
            <remarks>
            <para>
            This property always has a value when the mailbox is selected, but zero indicates that the value is not known.
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidnext"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            <para>
            When the mailbox is selected the library maintains the value of this property by monitoring IMAP FETCH responses from the server,
            but for the value to be up-to-date 
            FETCH responses containing the UID have to be solicited for new messages  
            (to get notification of new messages via <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> use <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> or allow idling using <see cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>; to solicit the FETCH responses required
            use <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/> with <see cref="F:work.bacome.imapclient.cMessageDeliveryEventArgs.MessageHandles"/> and <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.uid"/>
            ).
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount">
            <summary>
            Gets the count of messages added to the message cache since the mailbox was selected for which the library has not seen the value of the UID.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDValidity">
            <summary>
            Gets the UIDValidity of the mailbox. May be <see langword="null"/> or zero.
            </summary>
            <remarks>
            <para>
            This property always has a value when the mailbox is selected but zero indicates that the server does not support unique identifiers.
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox does not support unique identifiers, or</item>
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.uidvalidity"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.UIDNotSticky"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenCount">
            <summary>
            Gets the number of unseen messages in the mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <para>
            This property always has a value when the mailbox is selected.
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.unseencount"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            <para>
            When the mailbox is selected the library maintains the value of this property by monitoring IMAP FETCH responses from the server, 
            but for the value to be accurate it has to be initialised after the mailbox is selected using <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/> and
            FETCH responses containing the message flags have to be solicited for new messages  
            (to get notification of new messages via <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> use <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> or allow idling using <see cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>; to solicit the FETCH responses required
            use <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/> with <see cref="F:work.bacome.imapclient.cMessageDeliveryEventArgs.MessageHandles"/> and <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/>
            ).
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount">
            <summary>
            Gets the count of messages added to the message cache since the mailbox was selected for which the library is unsure of the value of the <see cref="F:work.bacome.imapclient.kMessageFlag.Seen"/> flag.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HighestModSeq">
            <summary>
            Gets the highest mod-sequence (see RFC 7162) for the mailbox. May be <see langword="null"/> or zero.
            </summary>
            <remarks>
            <para>
            When the mailbox is selected this property will always have a value but zero indicates that <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is not in use or that the mailbox does not support the persistent storage of mod-sequences.
            </para>
            <para>
            <see langword="null"/> indicates that either;
            <list type="bullet">
            <item>The mailbox is not <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, or</item>
            <item><see cref="F:work.bacome.imapclient.fMailboxCacheDataItems.highestmodseq"/> is not being requested (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheDataItems"/>), or</item>
            <item>The value was not sent when requested.</item>
            </list>
            </para>
            <para>
            When the mailbox is selected the library maintains the value of this property by monitoring responses from the server,
            but for the value to be up-to-date 
            the responses have to be solicited (use <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> or allow idling using <see cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>).
            </para>
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelected">
            <summary>
            Indicates whether the mailbox has been selected at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedForUpdate">
            <summary>
            Indicates whether the mailbox has been selected for update at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedReadOnly">
            <summary>
            Indicates whether the mailbox has been selected read-only at least once on the current connection.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNotSticky">
            <summary>
            Indicates whether the mailbox has persistent UIDs (see RFC 4315). May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox has never been selected on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageFlags">
            <summary>
            Gets the message flags defined in the mailbox. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox has never been selected on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags">
            <summary>
            Gets the flags that the client can change permanently on messages in the mailbox when it is selected for update. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox has never been selected for update on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags">
            <summary>
            Gets the flags that the client can change permanently on messages in the mailbox when it is selected read-only. May be <see langword="null"/>.
            </summary>
            <remarks>
            <see langword="null"/> indicates that the mailbox has never been selected read-only on the current connection.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelected">
            <summary>
            Indicates whether the mailbox is the currently selected mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelectedForUpdate">
            <summary>
            Indicates whether the mailbox is currently selected for update.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsAccessReadOnly">
            <summary>
            Indicates whether the mailbox is currently selected, but can't be modified.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailbox's child mailboxes.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailbox's child mailboxes.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailbox's subscribed child mailboxes.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            Mailboxes that do not exist may be returned.
            Subscribed mailboxes and levels in the mailbox hierarchy do not necessarily exist as mailboxes on the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailbox's subscribed child mailboxes.
            </summary>
            <param name="pDescend">If <see langword="true"/> all descendants are returned (not just children, but also grandchildren ...).</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.GetMailboxName(System.String)">
            <inheritdoc cref="M:work.bacome.imapclient.iMailboxContainer.GetMailboxName(System.String)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a child mailbox of the mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a child mailbox of the mailbox.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribe">
            <summary>
            Subscribes to the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribeAsync">
            <summary>
            Asynchronously subscribes to the mailbox.
            </summary>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Subscribe" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Unsubscribe">
            <summary>
            Unsubscribes from the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UnsubscribeAsync">
            <summary>
            Asynchronously unsubscribes from the mailbox.
            </summary>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Unsubscribe" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Rename(System.String)">
            <summary>
            Changes the <see cref="P:work.bacome.imapclient.cMailbox.Name"/> of the mailbox.
            </summary>
            <param name="pName">The new mailbox name.</param>
            <returns></returns>
            <remarks>
            After renaming the current instance will continue to have the same <see cref="P:work.bacome.imapclient.cMailbox.Path"/>, which means that it will no longer represent a mailbox that <see cref="P:work.bacome.imapclient.cMailbox.Exists"/> on the server (unless the mailbox <see cref="P:work.bacome.imapclient.cMailbox.IsInbox"/>).
            A new instance representing a mailbox with the new <see cref="P:work.bacome.imapclient.cMailbox.Path"/> is returned.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RenameAsync(System.String)">
            <summary>
            Ansynchronously changes the <see cref="P:work.bacome.imapclient.cMailbox.Name"/> of the mailbox.
            </summary>
            <param name="pName"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Rename(System.String)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Rename(work.bacome.imapclient.iMailboxContainer,System.String)">
            <summary>
            Changes the <see cref="P:work.bacome.imapclient.cMailbox.Path"/> of the mailbox.
            </summary>
            <param name="pContainer">The mailbox container that provides first part of the new <see cref="P:work.bacome.imapclient.cMailbox.Path"/>.</param>
            <param name="pName">The new mailbox name inside the <paramref name="pContainer"/>. If <see langword="null"/> the current <see cref="P:work.bacome.imapclient.cMailbox.Name"/> is used.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Rename(System.String)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RenameAsync(work.bacome.imapclient.iMailboxContainer,System.String)">
            <summary>
            Ansynchronously changes the <see cref="P:work.bacome.imapclient.cMailbox.Path"/> of the mailbox.
            </summary>
            <param name="pContainer"></param>
            <param name="pName"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Rename(work.bacome.imapclient.iMailboxContainer,System.String)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Delete">
            <summary>
            Deletes the mailbox.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.DeleteAsync">
            <summary>
            Asynchronously deletes the mailbox.
            </summary>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Delete" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)">
            <summary>
            Selects the mailbox.
            </summary>
            <param name="pForUpdate">Indicates whether the mailbox should be selected for update or not</param>
            <remarks>
            Selecting a mailbox un-selects the previously selected mailbox (if there was one).
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SelectAsync(System.Boolean)">
            <summary>
            Asynchronously selects the mailbox.
            </summary>
            <param name="pForUpdate">Indicates whether the mailbox should be selected for update or not</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)">
            <summary>
            Expunges messages marked with the <see cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/> flag from the mailbox. The mailbox must be selected.
            </summary>
            <param name="pAndUnselect">Indicates whether the mailbox should also be un-selected.</param>
            <remarks>
            Setting <paramref name="pAndUnselect"/> to <see langword="true"/> also un-selects the mailbox; this reduces the amount of network activity associated with the expunge.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMessage.Deleted"/>
            <seealso cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ExpungeAsync(System.Boolean)">
            <summary>
            Asynchronously expunges messages marked with the <see cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/> flag from the mailbox. The mailbox must be selected.
            </summary>
            <param name="pAndUnselect">Indicates whether the mailbox should also be un-selected.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)" select="remarks"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.Deleted"/>
            <seealso cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.StoreAsync(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            Gets a list of messages contained in the mailbox from the server. The mailbox must be selected.
            </summary>
            <param name="pFilter">The filter to use to restrict the set of messages returned.</param>
            <param name="pSort">The sort to use to order the set of messages returned. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/> will be used.</param>
            <param name="pItems">The set of items to ensure are cached for the returned messages. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/> will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
            <remarks>
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            Asynchronously gets a list of messages contained in the mailbox from the server. The mailbox must be selected.
            </summary>
            <param name="pFilter">The filter to use to restrict the set of messages returned.</param>
            <param name="pSort">The sort to use to order the set of messages returned. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/> will be used.</param>
            <param name="pItems">The set of items to ensure are cached for the returned messages. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/> will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Gets a list of messages. (Useful when handling <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>.)
            </summary>
            <param name="pMessageHandles"></param>
            <param name="pItems">The set of items to ensure are cached for the returned messages. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/> will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
            <remarks>
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously gets a list of messages. (Useful when handling <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>.)
            </summary>
            <param name="pMessageHandles"></param>
            <param name="pItems">The set of items to ensure are cached for the returned messages. If not specified <see cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/> will be used.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCount">
            <summary>
            Initialises the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>. The mailbox must be selected.
            </summary>
            <returns>A list of the unseen messages.</returns>
            <remarks>
            <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> must be initialised after the mailbox is selected if the value is to be accurate while the mailbox is selected. See <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> for more detail.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCountAsync">
            <summary>
            Asynchronously initialises the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>. The mailbox must be selected.
            </summary>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Gets a <see cref="T:work.bacome.imapclient.cMessage"/> from a <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pItems">The set of items to ensure are cached for the returned message.</param>
            <returns></returns>
            <remarks>
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessageAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Asynchronously gets a <see cref="T:work.bacome.imapclient.cMessage"/> from a <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pItems">The set of items to ensure are cached for the returned message.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Gets a list of <see cref="T:work.bacome.imapclient.cMessage"/> from a set of <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUIDs">.</param>
            <param name="pItems">The set of items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
            <remarks>
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)">
            <summary>
            Asynchronously gets a list of <see cref="T:work.bacome.imapclient.cMessage"/> from a set of <see cref="T:work.bacome.imapclient.cUID"/>. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pItems">The set of items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Refresh(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Refreshes the data that is cached for the mailbox.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RefreshAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously refreshes the data that is cached for the mailbox.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Refresh(work.bacome.imapclient.fMailboxCacheDataSets)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            Copies a set of messages to the mailbox represented by the instance.
            </summary>
            <param name="pMessages"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response an object containing the pairs of UIDs involved in the copy, otherwise <see langword="null"/>.</returns>
            <remarks>
            The messages must be in the currently selected mailbox.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            Asynchronously copies a set of messages to the mailbox represented by the instance.
            </summary>
            <param name="pMessages"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches a section of a message into a stream. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pSection"></param>
            <param name="pDecoding"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <remarks>
            Will throw if <paramref name="pUID"/> does not exist in the mailbox.
            If <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use and the entire body-part (<see cref="F:work.bacome.imapclient.cSection.TextPart"/> is <see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then
            unless <paramref name="pDecoding"/> is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required (i.e. the decoding specified is ignored).
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetchAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches a section of a message into a stream. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pSection"></param>
            <param name="pDecoding"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a message. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
            <remarks>
            <paramref name="pIfUnchangedSinceModSeq"/> may only be specified if <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero. 
            (i.e. <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is in use and the mailbox supports the persistent storage of mod-sequences.)
            If the message has been modified since the specified value then the server will fail the store.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a message. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for a set of messages. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for a set of messages. The mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            Copies a message in this mailbox to another mailbox. The mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response, the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies a message in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUID"></param>
            <param name="pDestination"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            Copies messages in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response, an object containing the pairs of UIDs involved in the copy, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies messages in this mailbox to another mailbox. This mailbox must be selected.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Equals(work.bacome.imapclient.cMailbox)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Equals(work.bacome.imapclient.iMailboxContainer)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.op_Equality(work.bacome.imapclient.cMailbox,work.bacome.imapclient.cMailbox)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.op_Inequality(work.bacome.imapclient.cMailbox,work.bacome.imapclient.cMailbox)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.iMailboxContainer">
            <summary>
            Represents a mailbox container.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNamespace"/>
            <seealso cref="T:work.bacome.imapclient.cMailbox"/>
        </member>
        <member name="P:work.bacome.imapclient.iMailboxContainer.Delimiter">
            <summary>
            Gets the hierarchy delimiter used in the container. May be <see langword="null"/>. 
            </summary>
            <remarks>
            Will be <see langword="null"/> if the server has no hierarchy in its names.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailboxes at the top level of hierarchy in the container.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailboxes at the top level of hierarchy in the container.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the subscribed mailboxes in the container.
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the container are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            Mailboxes that do not exist may be returned.
            Subscribed mailboxes and levels in the mailbox hierarchy do not necessarily exist as mailboxes on the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the subscribed mailboxes in the container.
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the container are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.iMailboxContainer.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.GetMailboxName(System.String)">
            <summary>
            Gets the full mailbox name of a contained mailbox with the specified name.
            </summary>
            <param name="pName"></param>
            <returns></returns>
            <remarks>
            <paramref name="pName"/> may not include <see cref="P:work.bacome.imapclient.iMailboxContainer.Delimiter"/> and must be a valid IMAP mailbox name.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a mailbox at the top level of hierarchy in the container.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.iMailboxContainer.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a mailbox at the top level of hierarchy in the container.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.iMailboxContainer.CreateChild(System.String,System.Boolean)" select="remarks"/>
        </member>
        <member name="T:work.bacome.imapclient.fMessageProperties">
            <summary>
            Represents a set of <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
            <remarks>
            The <see cref="T:work.bacome.imapclient.cMessageCacheItems"/> class defines an implicit conversion from this type, so you can use values of this type in places that take a <see cref="T:work.bacome.imapclient.cMessageCacheItems"/>.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cMessageCacheItems"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.envelope">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Envelope"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.sent">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Sent"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.subject">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Subject"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.basesubject">
            <summary><see cref="P:work.bacome.imapclient.cMessage.BaseSubject"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.from">
            <summary><see cref="P:work.bacome.imapclient.cMessage.From"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.sender">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Sender"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.replyto">
            <summary><see cref="P:work.bacome.imapclient.cMessage.ReplyTo"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.to">
            <summary><see cref="P:work.bacome.imapclient.cMessage.To"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.cc">
            <summary><see cref="P:work.bacome.imapclient.cMessage.CC"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.bcc">
            <summary><see cref="P:work.bacome.imapclient.cMessage.BCC"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.inreplyto">
            <summary><see cref="P:work.bacome.imapclient.cMessage.InReplyTo"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.messageid">
            <summary><see cref="P:work.bacome.imapclient.cMessage.MessageId"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.flags">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Flags"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.answered">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Answered"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.flagged">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Flagged"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.deleted">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Deleted"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.seen">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Seen"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.draft">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Draft"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.recent">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Recent"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.forwarded">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Forwarded"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.submitpending">
            <summary><see cref="P:work.bacome.imapclient.cMessage.SubmitPending"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.submitted">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Submitted"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.received">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Received"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.size">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Size"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.uid">
            <summary><see cref="P:work.bacome.imapclient.cMessage.UID"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.modseq">
            <summary><see cref="P:work.bacome.imapclient.cMessage.ModSeq"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.bodystructure">
            <summary><see cref="P:work.bacome.imapclient.cMessage.BodyStructure"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.attachments">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Attachments"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.plaintextsizeinbytes">
            <summary><see cref="P:work.bacome.imapclient.cMessage.PlainTextSizeInBytes"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.references">
            <summary><see cref="P:work.bacome.imapclient.cMessage.References"/></summary>
        </member>
        <member name="F:work.bacome.imapclient.fMessageProperties.importance">
            <summary><see cref="P:work.bacome.imapclient.cMessage.Importance"/></summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailboxName">
            <summary>
            Represents an IMAP mailbox name.
            </summary>
            <remarks>
            IMAP mailbox names have few grammatical restrictions, but may not include the NUL character.
            IMAP hierarchy delimitiers have few grammatical restrictions, but must be ASCII, and not NUL, CR or LF.
            Be careful to correctly specify the hierarchy delimiter, it is used in preparing the mailbox name for sending to the server.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)"/>
            <seealso cref="P:work.bacome.imapclient.support.iMailboxHandle.MailboxName"/>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Path">
            <summary>
            The mailbox path including the full hierarchy.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Delimiter">
            <summary>
            The hierarchy delimiter used in this mailbox name. May be <see langword="null"/>. 
            </summary>
            <remarks>
            Will be <see langword="null"/> if the server has no hierarchy in its names.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.#ctor(System.String,System.Nullable{System.Char})">
            <summary>
            Initialises a new instance with the specified path and hierarchy delimiter. Will throw if the arguments provided are not valid.
            </summary>
            <param name="pPath"></param>
            <param name="pDelimiter"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cMailboxName" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.ParentPath">
            <summary>
            Gets the path of the parent mailbox. Will be <see langword="null"/> if there is no parent mailbox.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.Name">
            <summary>
            Gets the name of the mailbox. As compared to <see cref="F:work.bacome.imapclient.cMailboxName.Path"/> this does not include the hierarchy.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.IsInbox">
            <summary>
            Indicates whether this is 'INBOX'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.CompareTo(work.bacome.imapclient.cMailboxName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.CompareTo(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.Equals(work.bacome.imapclient.cMailboxName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.op_Equality(work.bacome.imapclient.cMailboxName,work.bacome.imapclient.cMailboxName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.op_Inequality(work.bacome.imapclient.cMailboxName,work.bacome.imapclient.cMailboxName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cMailboxPropertyChangedEventArgs">
            <summary>
            Carries mailbox property change event data.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged"/>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxPropertyChangedEventArgs.MailboxHandle">
            <summary>The mailbox that changed.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxPropertyChangedEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cMessageDeliveryEventArgs">
            <summary>
            Carries message delivery event data.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessageDeliveryEventArgs.MessageHandles">
            <summary>The messages that were delivered.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageDeliveryEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cMailboxMessageDeliveryEventArgs">
            <summary>
            Carries message delivery event data.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery"/>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxMessageDeliveryEventArgs.MailboxHandle">
            <summary>The mailbox that the messages were delivered to.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxMessageDeliveryEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cAddress">
            <summary>
            Represents an email address.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cAddress.DisplayName">
            <summary>
            The display name for the address.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAddresses">
            <summary>
            An immutable collection of email addresses.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.BCC"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.CC"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.From"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.ReplyTo"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.Sender"/>
            <seealso cref="P:work.bacome.imapclient.cMessage.To"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.BCC"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.CC"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.From"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.ReplyTo"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.Sender"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.To"/>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.SortString">
            <summary>
            The RFC 5256 sort string for the collection of addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.DisplaySortString">
            <summary>
            The RFC 5957 display sort string for the collection of addresses.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAddresses.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cEmailAddress">
            <summary>
            Represents an individual email address.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.Address">
            <summary>
            The raw form of the address (local-part@domain-name), with an un-decoded domain-name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.DisplayAddress">
            <summary>
            The display form of the address (local-part@domain-name), with any punycode (RFC 3492) domain-name decoded.
            </summary>
            <remarks>
            <note type="note">Punycode decoding is not currently implemented so this contains the same value as <see cref="F:work.bacome.imapclient.cEmailAddress.Address"/>.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cEmailAddress.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cGroupAddress">
            <summary>
            Represents a named group of email addresses.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cAddresses"/>
        </member>
        <member name="F:work.bacome.imapclient.cGroupAddress.Addresses">
            <summary>
            The collection of group members (may be empty).
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cGroupAddress.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cAttachment">
            <summary>
            Represents a message attachment.
            </summary>
            <remarks>
            Instances of this class are only valid whilst the mailbox that they are in remains selected. 
            Re-selecting the mailbox will not bring instances back to life.
            Instances of this class are only valid whilst the containing mailbox has the same UIDValidity.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMessage.Attachments"/>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Client">
            <summary>The client that the instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.MessageHandle">
            <summary>The message that the attachment belongs to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Part">
            <summary>The body-part of the attachment.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Type">
            <summary>
            Gets the MIME type of the attachment as a string.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.TypeCode">
            <summary>
            Gets the MIME type of the attachment as a code.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.SubType">
            <summary>
            Gets the MIME subtype of the attachment as a string.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Parameters">
            <summary>
            Gets the MIME type parameters of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentId">
            <summary>
            Gets the MIME content-id of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Description">
            <summary>
            Gets the MIME content description of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentTransferEncoding">
            <summary>
            Gets the MIME content-transfer-encoding of the attachment as a string.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.DecodingRequired">
            <summary>
            Gets the MIME content-transfer-encoding of the attachment as a code.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.PartSizeInBytes">
            <summary>
            Gets the size in bytes of the encoded attachement.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.MD5">
            <summary>
            Gets the MD5 value of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.FileName">
            <summary>
            Gets the suggested filename of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.CreationDate">
            <summary>
            Gets the creation date of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ModificationDate">
            <summary>
            Gets the modification date of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ReadDate">
            <summary>
            Gets the last read date of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ApproximateFileSizeInBytes">
            <summary>
            Gets the approximate size of the attachment in bytes. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Languages">
            <summary>
            Gets the language(s) of the attachment. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes">
            <summary>
            Gets the number of bytes that will have to come over the network from the server to save the attachment.
            </summary>
            <returns></returns>
            <remarks>
            This may be smaller than <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/> if <see cref="P:work.bacome.imapclient.cAttachment.DecodingRequired"/>) isn't <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> and <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use.
            The size may have to be fetched from the server, but once fetched it will be cached.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytesAsync">
            <summary>
            Asynchronously gets the number of bytes that will have to come over the network from the server to save the attachment
            </summary>
            <inheritdoc cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Saves the attachment to the specified path.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAsAsync(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously saves the attachment to the specified path.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.Equals(work.bacome.imapclient.cAttachment)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.op_Equality(work.bacome.imapclient.cAttachment,work.bacome.imapclient.cAttachment)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.op_Inequality(work.bacome.imapclient.cAttachment,work.bacome.imapclient.cAttachment)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eBodyPartTypeCode">
            <summary>
            Represents the RFC 2045 MIME type of a message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cBodyPart.TypeCode"/>
            <seealso cref="P:work.bacome.imapclient.cAttachment.TypeCode"/>"/>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.other">
            <summary>The MIME type was not recognised by the library.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.text">
            <summary>Text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.image">
            <summary>Image data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.audio">
            <summary>Audio data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.video">
            <summary>Video data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.application">
            <summary>Some other kind of data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.multipart">
            <summary>Multiple entities of independent data types.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eBodyPartTypeCode.message">
            <summary>An encapsulated message.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eDispositionTypeCode">
            <summary>
            Represents the RFC 2183 disposition type of a message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cBodyPartDisposition.TypeCode"/>
        </member>
        <member name="F:work.bacome.imapclient.eDispositionTypeCode.other">
            <summary>The disposition type was not recognised by the library.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eDispositionTypeCode.inline">
            <summary>Inline.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eDispositionTypeCode.attachment">
            <summary>Attachment.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eTextBodyPartSubTypeCode">
            <summary>
            Represents the RFC 2045 MIME subtype of a text message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cTextBodyPart.SubTypeCode"/>
        </member>
        <member name="F:work.bacome.imapclient.eTextBodyPartSubTypeCode.other">
            <summary>The subtype was not recognised by the library.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eTextBodyPartSubTypeCode.plain">
            <summary>Plain text.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eTextBodyPartSubTypeCode.html">
            <summary>HTML.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eMultiPartBodySubTypeCode">
            <summary>
            Represents the RFC 2045 MIME subtype of a multipart message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cMultiPartBody.SubTypeCode"/>
        </member>
        <member name="F:work.bacome.imapclient.eMultiPartBodySubTypeCode.other">
            <summary>The subtype was not recognised by the library.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eMultiPartBodySubTypeCode.mixed">
            <summary>Independent parts in a particular order.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eMultiPartBodySubTypeCode.digest">
            <summary>Independent parts in a particular order.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eMultiPartBodySubTypeCode.alternative">
            <summary>Alternative versions of the same information.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eMultiPartBodySubTypeCode.related">
            <summary>Inter-related parts (RFC 2387).</summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPart">
            <summary>
            Represents a message body-part.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.BodyStructure"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Body"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.BodyStructure"/>
            <seealso cref="P:work.bacome.imapclient.cMessageBodyPart.Body"/>
            <seealso cref="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure"/>
            <seealso cref="F:work.bacome.imapclient.cMultiPartBody.Parts"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Type">
            <summary>
            The MIME type of the body-part as a string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.SubType">
            <summary>
            The MIME subtype of the body-part as a string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Section">
            <summary>
            The IMAP section specification of the body-part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.TypeCode">
            <summary>
            The MIME type of the body-part as a code.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Disposition">
            <summary>
            Gets the disposition of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Languages">
            <summary>
            Gets the language(s) of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Location">
            <summary>
            Gets the location URI of the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.ExtensionValues">
            <summary>
            Gets any additional extension-data for the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPart.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValue">
            <summary>
            Represents an element of additional IMAP BODYSTRUCTURE extension-data.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionString">
            <summary>
            Contains an element of additional IMAP BODYSTRUCTURE extension-data that is a string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionString.String">
            <summary>The additional extension-data.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartExtensionString.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionNumber">
            <summary>
            Contains an element of additional IMAP BODYSTRUCTURE extension-data that is a number.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionNumber.Number">
            <summary>The additional extension-data.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartExtensionNumber.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValues">
            <summary>
            Contains an element of additional IMAP BODYSTRUCTURE extension-data that is a collection of values.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cBodyPart.ExtensionValues"/>
            <seealso cref="F:work.bacome.imapclient.cBodyPartExtensionData.ExtensionValues"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionValues.Values">
            <summary>The additional extension-data.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartExtensionValues.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartExtensionValues.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyParts">
            <summary>
            An immutable collection of message body-parts.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cMultiPartBody.Parts"/>
        </member>
        <member name="M:work.bacome.imapclient.cBodyParts.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionData">
            <summary>
            Represents IMAP BODYSTRUCTURE extension-data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Disposition">
            <summary>
            The disposition of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Languages">
            <summary>
            The language(s) of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Location">
            <summary>
            The location URI of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.ExtensionValues">
            <summary>
            Any additional extension-data for the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartExtensionData.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartExtensionData">
            <summary>
            Contains the IMAP BODYSTRUCTURE extension-data of a multipart message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cMultiPartBody.ExtensionData"/>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartExtensionData.Parameters">
            <summary>
            The MIME-type parameters of the body-part. May be <see langword="null"/>. 
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMultiPartExtensionData.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartExtensionData">
            <summary>
            Containts the IMAP BODYSTRUCTURE extension-data of a single-part message body-part.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.ExtensionData"/>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartExtensionData.MD5">
            <summary>The MD5 value of the body-part. May be <see langword="null"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cSinglePartExtensionData.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartBody">
            <summary>
            Represents a multipart message body-part.
            </summary>
            <remarks>
            The following elements of instances will be <see langword="null"/> when populated with IMAP BODY data rather than IMAP BODYSTRUCTURE data;
            <list type="bullet">
            <item><see cref="F:work.bacome.imapclient.cMultiPartBody.ExtensionData"/></item>
            <item><see cref="P:work.bacome.imapclient.cMultiPartBody.Parameters"/></item>
            <item><see cref="P:work.bacome.imapclient.cMultiPartBody.Disposition"/></item>
            <item><see cref="P:work.bacome.imapclient.cMultiPartBody.Languages"/></item>
            <item><see cref="P:work.bacome.imapclient.cMultiPartBody.Location"/></item>
            <item><see cref="P:work.bacome.imapclient.cMultiPartBody.ExtensionValues"/></item>
            </list>
            Instances populated with BODY data are only available via <see cref="P:work.bacome.imapclient.support.iMessageHandle.Body"/>.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.Parts">
            <summary>
            The contained body-parts.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.SubTypeCode">
            <summary>
            The MIME subtype of the body-part as a code.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.ExtensionData">
            <summary>
            The IMAP BODYSTRUCTURE extension-data for the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Parameters">
            <summary>
            Gets the MIME-type parameters of the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Disposition">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Languages">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Location">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.ExtensionValues">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMultiPartBody.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartDisposition">
            <summary>
            Contains RFC 2183 disposition data.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cBodyPart.Disposition"/>
            <seealso cref="F:work.bacome.imapclient.cBodyPartExtensionData.Disposition"/>
            <seealso cref="P:work.bacome.imapclient.cSinglePartBody.Disposition"/>
            <seealso cref="P:work.bacome.imapclient.cMultiPartBody.Disposition"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Type">
            <summary>
            The disposition type as a string. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.TypeCode">
            <summary>
            The disposition type as a code. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Parameters">
            <summary>
            The disposition parameters. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.FileName">
            <summary>
            Gets the suggested filename. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.CreationDate">
            <summary>
            Gets the creation date. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ModificationDate">
            <summary>
            Gets the modification date. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ReadDate">
            <summary>
            Gets the last read date. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.Size">
            <summary>
            Gets the approximate size in bytes. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyPartDisposition.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartBody">
            <summary>
            Represents a single-part message body-part.
            </summary>
            <remarks>
            The following elements of instances will be <see langword="null"/> when populated with IMAP BODY data rather than IMAP BODYSTRUCTURE data;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cSinglePartBody.Disposition"/></item>
            <item><see cref="F:work.bacome.imapclient.cSinglePartBody.ExtensionData"/></item>
            <item><see cref="P:work.bacome.imapclient.cSinglePartBody.ExtensionValues"/></item>
            <item><see cref="P:work.bacome.imapclient.cSinglePartBody.Languages"/></item>
            <item><see cref="P:work.bacome.imapclient.cSinglePartBody.Location"/></item>
            <item><see cref="P:work.bacome.imapclient.cSinglePartBody.MD5"/></item>
            </list>
            Instances populated with BODY data are only available via <see cref="P:work.bacome.imapclient.support.iMessageHandle.Body"/>.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="F:work.bacome.imapclient.cAttachment.Part"/>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Parameters">
            <summary>
            The MIME-type parameters of the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentId">
            <summary>
            The MIME content-id of the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Description">
            <summary>
            The MIME content description of the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentTransferEncoding">
            <summary>
            The MIME content-transfer-encoding of the body-part as a string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired">
            <summary>
            The MIME content-transfer-encoding of the body-part as a code.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes">
            <summary>
            The size in bytes of the encoded body-part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ExtensionData">
            <summary>
            The IMAP BODYSTRUCTURE extension-data for the body-part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.MD5">
            <summary>Gets the MD5 value of the body-part. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Disposition">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Languages">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Location">
            <inheritdoc />
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.ExtensionValues">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSinglePartBody.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cMessageBodyPart">
            <summary>
            Represents a message body-part that contains a message.
            </summary>
            <remarks>
            The <see cref="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure"/> element of instances will be <see langword="null"/> when populated with IMAP BODY data rather than IMAP BODYSTRUCTURE data.
            Instances populated with BODY data are only available via <see cref="P:work.bacome.imapclient.support.iMessageHandle.Body"/>.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.Envelope">
            <summary>
            The IMAP ENVELOPE data of the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure">
            <summary>
            The IMAP BODYSTRUCTURE information for the encapsulated message. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.SizeInLines">
            <summary>
            The size in text-lines of the encapsulated message.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessageBodyPart.Body">
            <summary>
            Gets the IMAP BODY or BODYSTRUCTURE information for the encapsulated message, whichever is available.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageBodyPart.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cTextBodyPart">
            <summary>
            Represents a message body-part that contains text.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>.
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SubTypeCode">
            <summary>
            The MIME subtype of the body-part as a code.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SizeInLines">
            <summary>
            The size in text-lines of the body-part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cTextBodyPart.Charset">
            <summary>
            The character set of the text data.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cTextBodyPart.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameter">
            <summary>
            Represents an IMAP BODYSTRUCTURE attribute-value pair.
            </summary>
            <remarks>
            The value may have a language associated with it. See RFC 2184.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cAttachment.Parameters"/>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.Parameters"/>
            <seealso cref="P:work.bacome.imapclient.cMultiPartBody.Parameters"/>
            <seealso cref="F:work.bacome.imapclient.cBodyPartDisposition.Parameters"/>
            <seealso cref="T:work.bacome.imapclient.cMultiPartExtensionData"/>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.Name">
            <summary>
            The name of the attribute.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.RawValue">
            <summary>
            The un-decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.StringValue">
            <summary>
            The decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.LanguageTag">
            <summary>
            The language tag of the value. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.UIntValue">
            <summary>
            Gets the value as a <see cref="T:System.UInt32"/>. May be <see langword="null"/>.
            </summary>
            <remarks>
            Will return <see langword="null"/> if the value cannot be parsed as an IMAP 'number'.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.DateTimeValue">
            <summary>
            Gets the value as a <see cref="T:System.DateTime"/>. May be <see langword="null"/>.
            </summary>
            <remarks>
            Will return <see langword="null"/> if the value cannot be parsed as an RFC 5322 date-time.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameter.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameters">
            <summary>
            An immutable collection of IMAP BODYSTRUCTURE attribute-value pairs.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cAttachment.Parameters"/>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.Parameters"/>
            <seealso cref="P:work.bacome.imapclient.cMultiPartBody.Parameters"/>
            <seealso cref="F:work.bacome.imapclient.cBodyPartDisposition.Parameters"/>
            <seealso cref="T:work.bacome.imapclient.cMultiPartExtensionData"/>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameters.First(System.String)">
            <summary>
            Returns the first parameter with the specified attribute name.
            </summary>
            <param name="pName">The attribute name.</param>
            <returns>The parameter if there is at least one with a matching name, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameters.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cEnvelope">
            <summary>
            Contains IMAP message ENVELOPE data.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.Envelope"/>
            <seealso cref="F:work.bacome.imapclient.cMessageBodyPart.Envelope"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Envelope"/>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sent">
            <summary>The message sent date. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Subject">
            <summary>The message subject. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BaseSubject">
            <summary>
            The message base subject. May be <see langword="null"/>.
            </summary>
            <remarks>
            The base subject is defined RFC 5256 and is the subject with the RE: FW: etc artifacts removed.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.From">
            <summary>The message 'from' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sender">
            <summary>The message 'sender' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.ReplyTo">
            <summary>The message 'reply-to' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.To">
            <summary>The message 'to' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.CC">
            <summary>The message 'CC' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BCC">
            <summary>The message 'BCC' address(s). May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.InReplyTo">
            <summary>The normalised (delimiters, quoting, comments and white space removed) 'in-reply-to' message-ids. May be <see langword="null"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.MessageId">
            <summary>The normalised (delimiters, quoting, comments and white space removed) 'message-id' of the message. May be <see langword="null"/>.</summary> 
        </member>
        <member name="M:work.bacome.imapclient.cEnvelope.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cFilter">
            <summary>
            Represents a filter that can be passed to the server to restrict the set of messages passed back to the client.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.All">
            <summary>A filter that passes back all messages.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.MSN">
            <summary>Use the operators of this member to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.First">
            <summary>Represents the first message in a mailbox. Use the <see cref="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)"/> method of this member to generate <see cref="T:work.bacome.imapclient.cFilterMSNOffset"/> instances to use with <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Last">
            <summary>Represents the last message in a mailbox. Use the <see cref="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)"/> method of this member to generate <see cref="T:work.bacome.imapclient.cFilterMSNOffset"/> instances to use with <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.UID">
            <summary>Use the operators of this member to generate UID filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Answered">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Answered"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Flagged">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Flagged"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Deleted">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Seen">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Seen"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Draft">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Draft"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Recent">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Recent"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Forwarded">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Forwarded"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.SubmitPending">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.SubmitPending"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Submitted">
            <summary>A filter that passes back only messages with the <see cref="F:work.bacome.imapclient.kMessageFlag.Submitted"/> flag.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.BCC">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'BCC' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Body">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'body' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.CC">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'CC' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.From">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'from' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Subject">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'subject' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Text">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'text' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.To">
            <summary>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this member to generate filters on the content of message 'to' data. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Received">
            <summary>Use the operators of this member to generate filters on the message's received date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Sent">
            <summary>Use the operators of this member to generate filters on the message's sent date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Size">
            <summary>Use the operators of this member to generate filters on the message's size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Importance">
            <summary>Use the operators of this member to generate filters on the message's importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.None">
            <summary>A filter that passes back no messages.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="pUIDValidity"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.#ctor(System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="pContainsMessageHandles"></param>
            <param name="pUIDValidity"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.#ctor(work.bacome.imapclient.cFilter.sCTorParams)">
            <summary>
            
            </summary>
            <param name="pParams"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])">
            <summary>
            Returns a filter that passes back only messages that have all the specified message flags. Message flags are case insensitive.
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)">
            <summary>
            Returns a filter that passes back only messages that have the specified content in the specified header field. Header field names are case insensitive. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the filter to the server.
            </summary>
            <param name="pHeaderField"></param>
            <param name="pContains"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HasHeaderField(System.String)">
            <summary>
            Returns a filter that passes back only messages that have the specified header field. Header field names are case insensitive. 
            </summary>
            <param name="pHeaderField"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseAnd(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical AND of the two specified filters.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseOr(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical OR of the two specified filters.
            </summary>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_LogicalNot(work.bacome.imapclient.cFilter)">
            <summary>
            Returns a filter that is the logical NOT of the specified filter.
            </summary>
            <param name="pNot"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilter.sCTorParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.sCTorParams.ContainsMessageHandles">
            <summary></summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.sCTorParams.UIDValidity">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNOffset">
            <summary>
            Represents an offset from a specific message or from an end of a mailbox.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)"/> or the <see cref="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)"/> method of <see cref="F:work.bacome.imapclient.cFilter.First"/> and <see cref="F:work.bacome.imapclient.cFilter.Last"/> to generate instances of this class.
            Use instances of this class with the operators of <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSNOffset.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cFilterEnd">
            <summary>
            Represents an end of a mailbox.
            </summary>
            <remarks>
            Use <see cref="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)"/> to generate <see cref="T:work.bacome.imapclient.cFilterMSNOffset"/> instances to use with <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.
            </remarks>
            <seealso cref="F:work.bacome.imapclient.cFilter.First"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.Last"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)">
            <summary>
            Generates an offset from the end of the mailbox that the instance represents.
            </summary>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSN">
            <summary>
            Contains operators that generate message sequence number filters.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.MSN"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number less than the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number greater than the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number less than the specified offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThan(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number greater than the specified offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number less than or equal to the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cMessage)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number greater than or equal to the sequence number of the specified message.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pMessage"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_LessThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number less than or equal to the specified offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterMSN.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterMSN,work.bacome.imapclient.cFilterMSNOffset)">
            <summary>
            Returns a filter that passes back only messages that have a sequence number greater than or equal to the specified offset.
            </summary>
            <param name="pFilterMSN"><see cref="F:work.bacome.imapclient.cFilter.MSN"/></param>
            <param name="pOffset"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUID">
            <summary>
            Contains operators that generate message UID filters.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.UID"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_LessThan(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID less than the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_GreaterThan(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID greater than the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_LessThanOrEqual(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID less than or equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID greater than or equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_Equality(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID equal to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterUID.op_Inequality(work.bacome.imapclient.cFilterUID,work.bacome.imapclient.cUID)">
            <summary>
            Returns a filter that passes back only messages that have a UID different to the specified UID.
            </summary>
            <param name="pFilterUID"><see cref="F:work.bacome.imapclient.cFilter.UID"/></param>
            <param name="pUID"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPart">
            <summary>
            Contains the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method that generates message content filters. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the generated filters to the server.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.BCC"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.Body"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.CC"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.From"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.Subject"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.Text"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.To"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterPart.Contains(System.String)">
            <summary>
            Returns a filter that passes back only messages that have the specified message content. <see cref="P:work.bacome.imapclient.cIMAPClient.Encoding"/> may need to be used when passing the filter to the server.
            </summary>
            <param name="pContains"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDate">
            <summary>
            Contains operators that generate message date filters.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.Received"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.Sent"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_LessThan(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date less than the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_GreaterThan(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date greater than the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_Equality(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_Inequality(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date different to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_GreaterThanOrEqual(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date greater than or equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterDate.op_LessThanOrEqual(work.bacome.imapclient.cFilterDate,System.DateTime)">
            <summary>
            Returns a filter that passes back only messages that have a date less than or equal to the specified date.
            </summary>
            <param name="pFilterDate"><see cref="F:work.bacome.imapclient.cFilter.Received"/> or <see cref="F:work.bacome.imapclient.cFilter.Sent"/></param>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSize">
            <summary>
            Contains operators that generate message size filters.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.Size"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_LessThan(work.bacome.imapclient.cFilterSize,System.Int32)">
            <summary>
            Returns a filter that passes back only messages that have a size less than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_GreaterThan(work.bacome.imapclient.cFilterSize,System.Int32)">
            <summary>
            Returns a filter that passes back only messages that have a size greater than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_LessThan(work.bacome.imapclient.cFilterSize,System.UInt32)">
            <summary>
            Returns a filter that passes back only messages that have a size less than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterSize.op_GreaterThan(work.bacome.imapclient.cFilterSize,System.UInt32)">
            <summary>
            Returns a filter that passes back only messages that have a size greater than the specified size.
            </summary>
            <param name="pFitlerSize"><see cref="F:work.bacome.imapclient.cFilter.Size"/></param>
            <param name="pSize"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterImportance">
            <summary>
            Contains operators that generate message importance filters.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cFilter.Importance"/>
        </member>
        <member name="M:work.bacome.imapclient.cFilterImportance.op_Equality(work.bacome.imapclient.cFilterImportance,work.bacome.imapclient.eImportance)">
            <summary>
            Returns a filter that passes back only messages that have an importance equal to the specified importance.
            </summary>
            <param name="pImportance"><see cref="F:work.bacome.imapclient.cFilter.Importance"/></param>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cFilterImportance.op_Inequality(work.bacome.imapclient.cFilterImportance,work.bacome.imapclient.eImportance)">
            <summary>
            Returns a filter that passes back only messages that have an importance different to the specified importance.
            </summary>
            <param name="pImportance"><see cref="F:work.bacome.imapclient.cFilter.Importance"/></param>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cMessage">
            <summary>
            Represents an IMAP message.
            </summary>
            <remarks>
            Instances of this class are only valid whilst the mailbox that they are in remains selected. 
            Re-selecting the mailbox will not bring instances back to life.
            Instances of this class are only valid whilst the containing mailbox has the same UIDValidity.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="T:work.bacome.imapclient.cSort"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessage.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessage.MessageHandle">
            <summary>The message that this instance represents.</summary>
        </member>
        <member name="E:work.bacome.imapclient.cMessage.PropertyChanged">
            <summary>
            Fired when the server notifies the client of a change that affects a property value of the instance.
            </summary>
            <inheritdoc cref="F:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Event" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Expunged">
            <summary>
            Indicates whether the message exists on the server.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Envelope">
            <summary>
            Gets the IMAP ENVELOPE data of the message.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.envelope"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sent">
            <summary>
            Gets the sent date of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Subject">
            <summary>
            Gets the subject of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BaseSubject">
            <summary>
            Gets the base subject of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <remarks>
            The base subject is defined RFC 5256 and is the subject with the RE: FW: etc artifacts removed.
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.envelope"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.From">
            <summary>
            Gets the 'from' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sender">
            <summary>
            Gets the 'sender' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ReplyTo">
            <summary>
            Gets the 'reply-to' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.To">
            <summary>
            Gets the 'to' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.CC">
            <summary>
            Gets the 'CC' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BCC">
            <summary>
            Gets the 'BCC' addresses of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Envelope" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.InReplyTo">
            <summary>
            Gets the normalised 'in-reply-to' message-ids of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <remarks>
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.envelope"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.MessageId">
            <summary>
            Gets the normalised message-id of the message from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>. May be <see langword="null"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.InReplyTo" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flags">
            <summary>
            Gets the flags set for the message.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Answered">
            <summary>
            Indicates whether <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contains <see cref="F:work.bacome.imapclient.kMessageFlag.Answered"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetAnswered">
            <summary>
            Adds <see cref="F:work.bacome.imapclient.kMessageFlag.Answered"/> to the message's flags.
            </summary>
            <remarks>
            This method will throw if it detects that the underlying <see cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/> is likely to have failed.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flagged">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlag.Flagged"/> flag of the message.
            </summary>
            <remarks>
            When getting the value, if the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/> of the message, they will be fetched from the server.
            When setting the value, an exception will be raised if the underlying <see cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/> is suspected of failing.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Deleted">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/> flag of the message.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flagged" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Seen">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlag.Seen"/> flag of the message.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flagged" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Draft">
            <summary>
            Gets and sets the <see cref="F:work.bacome.imapclient.kMessageFlag.Draft"/> flag of the message.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flagged" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Recent">
            <summary>
            Indicates whether <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contains <see cref="F:work.bacome.imapclient.kMessageFlag.Recent"/>.
            </summary>
            <remarks>
            See RFC 3501 for a definition of recent.
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.flags"/> of the message, they will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Forwarded">
            <summary>
            Indicates whether <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contains <see cref="F:work.bacome.imapclient.kMessageFlag.Forwarded"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetForwarded">
            <summary>
            Adds the <see cref="F:work.bacome.imapclient.kMessageFlag.Forwarded"/> flag to the message's flags.
            </summary>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.SetAnswered" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.SubmitPending">
            <summary>
            Indicates whether <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contains <see cref="F:work.bacome.imapclient.kMessageFlag.SubmitPending"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetSubmitPending">
            <summary>
            Adds the <see cref="F:work.bacome.imapclient.kMessageFlag.SubmitPending"/> flag to the message's flags.
            </summary>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.SetAnswered" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Submitted">
            <summary>
            Indicates whether <see cref="P:work.bacome.imapclient.cMessage.Flags"/> contains <see cref="F:work.bacome.imapclient.kMessageFlag.Submitted"/>.
            </summary>
            <inheritdoc cref="P:work.bacome.imapclient.cMessage.Flags" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Received">
            <summary>
            Gets the IMAP INTERNALDATE of the message.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.received"/> date of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Size">
            <summary>
            Gets the size of the entire message in bytes.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.size"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.UID">
            <summary>
            Gets the UID of the message. May be <see langword="null"/>.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.uid"/> of the message, it will be fetched from the server.
            Will be <see langword="null"/> if the mailbox does not support unique identifiers.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ModSeq">
            <summary>
            Gets the mod-sequence of the message. May be zero.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.modseq"/> of the message, it will be fetched from the server.
            Will be zero if <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is not in use or if the mailbox does not support the persistent storage of mod-sequences.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BodyStructure">
            <summary>
            Gets the IMAP BODYSTRUCTURE of the message.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Attachments">
            <summary>
            Gets a list of message attachments. The list may be empty.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            The library defines an attachment as a single-part message body-part with a disposition of ‘attachment’.
            If there are alternate versions of an attachment only one of the alternates is included in the list (the first one).
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.PlainTextSizeInBytes">
            <summary>
            Gets the size in bytes of the plain text of the message. May be zero.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            The library defines plain text as being contained in message body-parts with a MIME type of text/plain and without a disposition of 'attachment'.
            If there are alternate versions of a body-part only one of the alternates is considered to be part of the plain text (the first one).
            The size returned is the encoded size of the body-parts.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.References">
            <summary>
            Gets the normalised message-ids from the references header field. May be <see langword="null"/>.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/> header field of the message, it will be fetched from the server.
            Normalised message-ids have the delimiters, quoting, comments and white space removed.
            Will be <see langword="null"/> if there is no references header field or if the references header field can not be parsed.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Importance">
            <summary>
            Gets the importance value from the importance header field. May be <see langword="null"/>.
            </summary>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/> header field of the message, it will be fetched from the server.
            Will be <see langword="null"/> if there is no importance header field or if the importance header field can not be parsed.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Ensures that the message cache contains the specified items for the message.
            </summary>
            <param name="pItems"></param>
            <returns>
            <see langword="true"/> if the fetch populated the cache with the requested items, <see langword="false"/> otherwise.
            <see langword="false"/> indicates that the message has been expunged.
            </returns>
            <remarks>
            The items that aren't currently cached will be fetched from the server.
            <note type="note"><see cref="T:work.bacome.imapclient.cMessageCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/>. This means that you can use values of those types as arguments to this method.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cMessageCacheItems)">
            <summary>
            Ansynchronously ensures that the message cache contains the specified items for the message.
            </summary>
            <param name="pItems"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cMessageCacheItems)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            Gets the fetch size of the specified <see cref="T:work.bacome.imapclient.cSinglePartBody"/>.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
            <remarks>
            Will throw if <paramref name="pPart"/> is not in <see cref="P:work.bacome.imapclient.cMessage.BodyStructure"/>.
            The result may be smaller than <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/> if <see cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/> isn't <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> and <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use.
            The size may have to be fetched from the server, but once fetched it will be cached.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytesAsync(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            Asynchronously gets the fetch size of the specified <see cref="T:work.bacome.imapclient.cSinglePartBody"/>.
            </summary>
            <param name="pPart"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cMessageCacheItems)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)">
            <summary>
            Returns a message sequence number offset for use in message filtering. See <see cref="F:work.bacome.imapclient.cFilter.MSN"/>.
            </summary>
            <param name="pOffset">The offset required from the message's sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainText">
            <summary>
            Returns the plain text of the message.
            </summary>
            <returns></returns>
            <remarks>
            If the message cache does not contain the <see cref="F:work.bacome.imapclient.fMessageCacheAttributes.bodystructure"/> of the message, it will be fetched from the server.
            The library defines plain text as being contained in message body-parts with a MIME type of text/plain and without a disposition of 'attachment'.
            If there are alternate versions of a body-part only one of the alternates is considered to be part of the plain text (the first one).
            The required body-parts are fetched from the server and concatented to yield the result.
            The text returned is the decoded text.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainTextAsync">
            <summary>
            Ansynchronously returns the plain text of the message.
            </summary>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.PlainText" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            Returns the content of the specified <see cref="T:work.bacome.imapclient.cTextBodyPart"/>.
            </summary>
            <param name="pPart"></param>
            <returns></returns>
            <remarks>
            Will throw if <paramref name="pPart"/> is not in <see cref="P:work.bacome.imapclient.cMessage.BodyStructure"/>.
            The content is decoded if required.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            Asynchronously returns the content of the specified <see cref="T:work.bacome.imapclient.cTextBodyPart"/>.
            </summary>
            <param name="pPart"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)">
            <summary>
            Returns the content of the specified <see cref="T:work.bacome.imapclient.cSection"/>.
            </summary>
            <param name="pSection"></param>
            <returns></returns>
            <remarks>
            The result is not decoded.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection)">
            <summary>
            Asynchronously returns the content of the specified <see cref="T:work.bacome.imapclient.cSection"/>.
            </summary>
            <param name="pSection"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches the content of the specified <see cref="T:work.bacome.imapclient.cSinglePartBody"/> into the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="pPart"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <remarks>
            Will throw if <paramref name="pPart"/> is not in <see cref="P:work.bacome.imapclient.cMessage.BodyStructure"/>.
            The content is decoded if required.
            To calculate the number of bytes that have to be fetched, use <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/>. 
            (This may be useful if you are intending to display a progress bar.)
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches the content of the specified <see cref="T:work.bacome.imapclient.cSinglePartBody"/> into the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="pPart"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Fetches the content of the specified <see cref="T:work.bacome.imapclient.cSection"/> into the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="pSection"></param>
            <param name="pDecoding">The decoding that should be applied.</param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <remarks>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Binary"/> is in use and the entire body-part (<see cref="F:work.bacome.imapclient.cSection.TextPart"/> is <see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then
            unless <paramref name="pDecoding"/> is <see cref="F:work.bacome.imapclient.eDecodingRequired.none"/> the server will do the decoding that it determines is required (i.e. the decoding specified is ignored).
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Asynchronously fetches the content of the specified <see cref="T:work.bacome.imapclient.cSection"/> into the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="pSection"></param>
            <param name="pDecoding"></param>
            <param name="pStream"></param>
            <param name="pConfiguration">An operation specific timeout, cancellation token, progress callback and write size controller.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Stores flags for the message. 
            </summary>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <remarks>
            <paramref name="pIfUnchangedSinceModSeq"/> may only be specified if the containing mailbox's <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/> is not zero. 
            (i.e. <see cref="P:work.bacome.imapclient.cCapabilities.CondStore"/> is in use and the mailbox supports the persistent storage of mod-sequences.)
            If the message has been modified since the specified value then the server will fail the store.
            This method will throw if it detects that the store is likely to have failed.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.StoreAsync(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})">
            <summary>
            Asynchronously stores flags for the message.
            </summary>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)">
            <summary>
            Copies the message to the specified mailbox.
            </summary>
            <param name="pDestination"></param>
            <returns>If the server provides an RFC 4315 UIDCOPY response, the UID of the message in the destination mailbox, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.CopyAsync(work.bacome.imapclient.cMailbox)">
            <summary>
            Asynchronously copies the message to the specified mailbox.
            </summary>
            <param name="pDestination"></param>
            <inheritdoc cref="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Equals(work.bacome.imapclient.cMessage)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMessage.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMessage.op_Equality(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.op_Inequality(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.kMessageFlag">
            <summary>
            Contains named message-flag contants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.CreateNewIsPossible">
            <summary>\*</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Recent">
            <summary>\Recent</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Answered">
            <summary>\Answered</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Flagged">
            <summary>\Flagged</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Deleted">
            <summary>\Deleted</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Seen">
            <summary>\Seen</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Draft">
            <summary>\Draft</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Forwarded">
            <summary>$Forwarded</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.SubmitPending">
            <summary>$SubmitPending</summary>
        </member>
        <member name="F:work.bacome.imapclient.kMessageFlag.Submitted">
            <summary>$Submitted</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlags">
            <summary>
            Represents an immutable message-flag collection.
            </summary>
            <remarks>
            Message flags are case insensitive and have a limited grammer - see RFC 3501.
            (Generally user-defined message-flags may only include <see cref="F:work.bacome.imapclient.support.cCharset.Atom"/> characters.)
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags"/>
            <seealso cref="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initialises a new instance with a copy of the specified flags.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String)">
            <summary>
            Determines whether the collection contains the specified flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.String[])">
            <summary>
            Determines whether the collection contains all the specified flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlags.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.SymmetricDifference(work.bacome.imapclient.cMessageFlags,System.String[])">
            <summary>
            Returns the symmetric difference between this and the specified collection ignoring an optional set of flags (case insensitive).
            </summary>
            <param name="pOther"></param>
            <param name="pExcept">The flags to ignore when doing the difference.</param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlags.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlags.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Equals(work.bacome.imapclient.cMessageFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.op_Equality(work.bacome.imapclient.cMessageFlags,work.bacome.imapclient.cMessageFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlags.op_Inequality(work.bacome.imapclient.cMessageFlags,work.bacome.imapclient.cMessageFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlags">
            <summary>
            An immutable storable-message-flag collection.
            </summary>
            <remarks>
            Message flags are case insensitive and have a limited grammar - see RFC 3501.
            (Generally user-defined message-flags may only include <see cref="F:work.bacome.imapclient.support.cCharset.Atom"/> characters.)
            <see cref="F:work.bacome.imapclient.kMessageFlag.Recent"/> is not a storable-message-flag.
            <see cref="F:work.bacome.imapclient.kMessageFlag.CreateNewIsPossible"/> is not a storable-message-flag.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cMessage.Store(work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>,
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Empty">
            <summary>An empty storable-message-flag collection.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Answered">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Answered"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Flagged">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Flagged"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Deleted">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Deleted"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Seen">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Seen"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Draft">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Draft"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Forwarded">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Forwarded"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.SubmitPending">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.SubmitPending"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cStorableFlags.Submitted">
            <summary>A storable-message-flag collection containing only <see cref="F:work.bacome.imapclient.kMessageFlag.Submitted"/>.</summary> 
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])">
            <summary>
            Initialises a new instance with a duplicate free (case insensitive) copy of the specified flags. Will throw if the specified flags aren't valid storable-message-flags.
            </summary>
            <param name="pFlags"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cStorableFlags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <summary>
            Initialises a new instance with a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.Equals(work.bacome.imapclient.cStorableFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlags.op_Implicit(work.bacome.imapclient.cStorableFlagList)~work.bacome.imapclient.cStorableFlags">
            <summary>
            Returns a new instance containing a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlags">
            <summary>
            An immutable fetchable-message-flag collection.
            </summary>
            <remarks>
            Message flags are case insensitive and have a limited grammar - see RFC 3501.
            (Generally user-defined message-flags may only include <see cref="F:work.bacome.imapclient.support.cCharset.Atom"/> characters.)
            <see cref="F:work.bacome.imapclient.kMessageFlag.CreateNewIsPossible"/> is not a fetchable-message-flag.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cMailbox.MessageFlags"/>
            <seealso cref="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])">
            <summary>
            Initialises a new instance with a duplicate free (case insensitive) copy of the specified flags. Will throw if the specified flags aren't valid fetchable-message-flags.
            </summary>
            <param name="pFlags"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cFetchableFlags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <summary>
            Initialises a new instance with a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.Equals(work.bacome.imapclient.cFetchableFlags)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlags.op_Implicit(work.bacome.imapclient.cFetchableFlagList)~work.bacome.imapclient.cFetchableFlags">
            <summary>
            Returns a new instance containing a copy of the specified list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlagList">
            <summary>
            Represents a message-flag list.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cMessageFlags" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initialises a new instance with the specified flag list.
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String)">
            <summary>
            Determines whether the list contains the specified flag (case insensitive).
            </summary>
            <param name="pFlag"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String[])">
            <summary>
            Determines whether the list contains all the specified flags (case insensitive).
            </summary>
            <param name="pFlags"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Contains(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String)">
            <summary>
            Adds the specified flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.String[])">
            <summary>
            Adds each specified flag to the list if it isn't already there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Add(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String)">
            <summary>
            Removes the specified flag from the list if it is there (case insensitive).
            </summary>
            <param name="pFlag"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String[])">
            <summary>
            Removes each specified flag from the list if it is there (case insensitive).
            </summary>
            <param name="pFlags"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cMessageFlagList.Remove(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlagList.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cMessageFlagList.Item(System.Int32)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Indexer(System.Int32)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageFlagList.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.imapclient.cStorableFlagList">
            <summary>
            A storable-message-flag list.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cStorableFlags" select="remarks"/>
            <seealso cref="T:work.bacome.imapclient.cStorableFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor">
            <summary>
            Initialises a new empty instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.String[])">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.#ctor(work.bacome.imapclient.cStorableFlagList)">
            <inheritdoc cref="M:work.bacome.imapclient.cStorableFlags.#ctor(work.bacome.imapclient.cStorableFlagList)"/>
        </member>
        <member name="M:work.bacome.imapclient.cStorableFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlagList">
            <summary>
            A fetchable-message-flag list.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cFetchableFlags" select="remarks"/>
            <seealso cref="T:work.bacome.imapclient.cFetchableFlags"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor">
            <summary>
            Initialises a new empty instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.String[])">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(System.String[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.#ctor(work.bacome.imapclient.cFetchableFlagList)">
            <inheritdoc cref="M:work.bacome.imapclient.cFetchableFlags.#ctor(work.bacome.imapclient.cFetchableFlagList)"/>
        </member>
        <member name="M:work.bacome.imapclient.cFetchableFlagList.YIsValidFlag(System.String)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageCacheItems">
            <summary>
            Represents a set of items that can be cached in a <see cref="T:work.bacome.imapclient.cIMAPClient"/> message cache.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.DefaultMessageCacheItems"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessageCacheItems.Empty">
            <summary>
            An empty set of items.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageCacheItems.Attributes">
            <summary>
            The IMAP message attributes to cache.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageCacheItems.Names">
            <summary>
            The header field names to cache.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.#ctor(work.bacome.imapclient.fMessageCacheAttributes,work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            Initialises a new instance using the specified IMAP message attributes and header field names.
            </summary>
            <param name="pAttributes"></param>
            <param name="pNames">Can't be <see langword="null"/>, may be empty.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.#ctor(work.bacome.imapclient.fMessageProperties)">
            <summary>
            Initialises a new instance using the specified <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
            <param name="pProperties">The message properties to cache the backing data for.</param>
        </member>
        <member name="P:work.bacome.imapclient.cMessageCacheItems.IsEmpty">
            <summary>
            Indicates whether the set is empty.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.Equals(work.bacome.imapclient.cMessageCacheItems)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.op_Equality(work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageCacheItems)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.op_Inequality(work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageCacheItems)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.op_Implicit(work.bacome.imapclient.fMessageCacheAttributes)~work.bacome.imapclient.cMessageCacheItems">
            <summary>
            Returns a new instance initialised with the specified IMAP message attributes.
            </summary>
            <param name="pAttributes"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.op_Implicit(work.bacome.imapclient.cHeaderFieldNames)~work.bacome.imapclient.cMessageCacheItems">
            <summary>
            Returns a new instance initialised with the specified header field names.
            </summary>
            <param name="pNames"></param>
        </member>
        <member name="M:work.bacome.imapclient.cMessageCacheItems.op_Implicit(work.bacome.imapclient.fMessageProperties)~work.bacome.imapclient.cMessageCacheItems">
            <summary>
            Returns a new instance initialised with the specified <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
            <param name="pProperties"></param>
        </member>
        <member name="T:work.bacome.imapclient.cMessagePropertyChangedEventArgs">
            <summary>
            Carries message property change event data.
            </summary>
            <seealso cref="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged"/>
        </member>
        <member name="F:work.bacome.imapclient.cMessagePropertyChangedEventArgs.MessageHandle">
            <summary>The message that changed.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessagePropertyChangedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.eSectionTextPart">
            <summary>
            Represents a text part of a message body-part.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSection"/>
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.all">
            <summary>All the text.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.header">
            <summary>All message headers.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfields">
            <summary>Specified message headers.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot">
            <summary>All message headers except for specified ones.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.text">
            <summary>The message text.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.mime">
            <summary>The mime headers.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cSection">
            <summary>
            Represents an IMAP message section specification.
            </summary>
            <seealso cref="F:work.bacome.imapclient.cBodyPart.Section"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cSection.All">
            <summary>
            The section specification for an entire message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Header">
            <summary>
            The section specification for the message headers of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Text">
            <summary>
            The section specification for the message text of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Part">
            <summary>
            The body-part of the section specification. May be <see langword="null"/>.
            </summary>
            <remarks>
            A dot separated list of integers specifying the body-part, or <see langword="null"/> for the whole message.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cSection.TextPart">
            <summary>
            The text part of the section specification.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Names">
            <summary>
            The header field subset of the section specification. May be <see langword="null"/>.
            </summary>
            <remarks>
            Will not be <see langword="null"/> nor empty if <see cref="F:work.bacome.imapclient.cSection.TextPart"/> is <see cref="F:work.bacome.imapclient.eSectionTextPart.headerfields"/> or <see cref="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot"/>.
            Will be <see langword="null"/> otherwise.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String)">
            <summary>
            Initialises a new instance so that it represents an entire body-part.
            </summary>
            <param name="pPart">A dot separated list of integers specifying the body-part, or <see langword="null"/> for the whole message</param>
            <remarks>
            <see cref="F:work.bacome.imapclient.cSection.TextPart"/> is set to <see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>, <see cref="F:work.bacome.imapclient.cSection.Names"/> to <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String,work.bacome.imapclient.eSectionTextPart)">
            <summary>
            Initialises a new instance so that it represents a whole text part.
            </summary>
            <param name="pPart">A dot separated list of integers specifying the body-part, or <see langword="null"/> for the whole message</param>
            <param name="pTextPart">May be <see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>, <see cref="F:work.bacome.imapclient.eSectionTextPart.header"/>, <see cref="F:work.bacome.imapclient.eSectionTextPart.text"/> or <see cref="F:work.bacome.imapclient.eSectionTextPart.mime"/> (<see cref="F:work.bacome.imapclient.eSectionTextPart.mime"/> only if <paramref name="pPart"/> is not <see langword="null"/>).</param>
        </member>
        <member name="M:work.bacome.imapclient.cSection.#ctor(System.String,work.bacome.imapclient.cHeaderFieldNames,System.Boolean)">
            <summary>
            Initialises a new instance so that it represents a subset of the <see cref="F:work.bacome.imapclient.eSectionTextPart.header"/>.
            </summary>
            <param name="pPart">A dot separated list of integers specifying the body-part, or <see langword="null"/> for the whole message</param>
            <param name="pNames">Must not be <see langword="null"/> nor empty.</param>
            <param name="pNot"><see langword="true"/> to represent all header fields except those specified, <see langword="false"/> to represent only the header fields specified.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSection.Equals(work.bacome.imapclient.cSection)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSection.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSection.op_Equality(work.bacome.imapclient.cSection,work.bacome.imapclient.cSection)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSection.op_Inequality(work.bacome.imapclient.cSection,work.bacome.imapclient.cSection)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eSortItem">
            <summary>
            Represents an item that messages can be sorted by.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSortItem"/>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.received">
            <summary>The IMAP INTERNALDATE of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.cc">
            <summary>The group-name or local-part of the first 'CC' address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.sent">
            <summary>The UTC normalised sent date of the message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.from">
            <summary>The group-name or local-part of the first 'from' address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.size">
            <summary>The size of the message in bytes.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.subject">
            <summary>The base subject. The base subject is defined in RFC 5256 and is the subject with the RE: FW: etc artifacts removed.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.to">
            <summary>The group-name or local-part of the first 'to' address.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.displayfrom">
            <summary>The display-name of the first 'from' address. Defined in RFC 5957.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eSortItem.displayto">
            <summary>The display-name of the first 'to' address. Defined in RFC 5957.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cSortItem">
            <summary>
            Represents an item in a message sort specification.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSort"/>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Received">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.received"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CC">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.cc"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Sent">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.sent"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.From">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.from"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Size">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.size"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Subject">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.subject"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.To">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.to"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFrom">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.displayfrom"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayTo">
            <summary>Sort ascending by <see cref="F:work.bacome.imapclient.eSortItem.displayto"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ReceivedDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.received"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CCDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.cc"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SentDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.sent"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.FromDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.from"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SizeDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.size"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SubjectDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.subject"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ToDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.to"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFromDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.displayfrom"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayToDesc">
            <summary>Sort descending by <see cref="F:work.bacome.imapclient.eSortItem.displayto"/>.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Item">
            <summary>
            The item being sorted by.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Attribute">
            <summary>
            The attribute that is required if the sorting is to be done client-side.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Desc">
            <summary>
            Indicates a descending sort.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.#ctor(work.bacome.imapclient.eSortItem,System.Boolean)">
            <summary>
            Initialises a new instance with the specified item and sort direction.
            </summary>
            <param name="pItem"></param>
            <param name="pDesc">Indicates a descending sort.</param>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.Equals(work.bacome.imapclient.cSortItem)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.op_Equality(work.bacome.imapclient.cSortItem,work.bacome.imapclient.cSortItem)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSortItem.op_Inequality(work.bacome.imapclient.cSortItem,work.bacome.imapclient.cSortItem)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cSort">
            <summary>
            Represents a message sort order.
            </summary>
            <remarks>
            You can use the <see langword="static"/> instances of <see cref="T:work.bacome.imapclient.cSortItem"/> when creating message sort orders.
            For example;
            <code>
            var lSort = new cSort(cSortItem.Subject, cSortItem.Sent);
            </code>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>
        </member>
        <member name="F:work.bacome.imapclient.cSort.None">
            <summary>
            Specifies that no sorting is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.Items">
            <summary>
            The items in this sort specification.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSort.#ctor(work.bacome.imapclient.cSortItem[])">
            <summary>
            Initialises a new instance with the specified items.
            </summary>
            <param name="pItems"></param>
        </member>
        <member name="M:work.bacome.imapclient.cSort.#ctor(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cSortItem})">
            <inheritdoc cref="M:work.bacome.imapclient.cSort.#ctor(work.bacome.imapclient.cSortItem[])"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.support.iMessageHandle)">
            <summary>
            Compares two messages using the comparision implied by the value of this instance.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
            <remarks>
            If the attributes required for the comparision are not in the message cache the result may be misleading.
            </remarks>
            <seealso cref="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.Attributes"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <summary>
            Compares two messages using the comparision implied by the value of this instance.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
            <remarks>
            If the attributes required for the comparision are not in the message cache they will be fetched from the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)">
            <summary>
            Gets the client-side and server-side requirements for this sort order.
            </summary>
            <param name="rSortDisplay">Gets set to <see langword="true"/> if <see cref="P:work.bacome.imapclient.cCapabilities.SortDisplay"/> must be in use for the server to do the sort.</param>
            <returns>The set of message attributes required for the comparison implied by the value of this instance.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Equals(work.bacome.imapclient.cSort)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSort.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.ToString">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cSort.op_Equality(work.bacome.imapclient.cSort,work.bacome.imapclient.cSort)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cSort.op_Inequality(work.bacome.imapclient.cSort,work.bacome.imapclient.cSort)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cUID">
            <summary>
            Represents an IMAP message UID
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.UID"/>
            <seealso cref="M:work.bacome.imapclient.cMessage.Copy(work.bacome.imapclient.cMailbox)"/>
            <seealso cref="F:work.bacome.imapclient.cFilter.UID"/>
            <seealso cref="P:work.bacome.imapclient.support.iMessageHandle.UID"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cMessageCacheItems)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMessageCacheItems,work.bacome.imapclient.cCacheItemFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
            <seealso cref="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cStorableFlags,System.Nullable{System.UInt64})"/>
        </member>
        <member name="F:work.bacome.imapclient.cUID.UIDValidity">
            <summary>The UIDValidity of the instance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cUID.UID">
            <summary>The UID of the instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cUID.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initialises a new instance with the specified UIDValidity and UID.
            </summary>
            <param name="pUIDValidity"></param>
            <param name="pUID"></param>
        </member>
        <member name="M:work.bacome.imapclient.cUID.CompareTo(work.bacome.imapclient.cUID)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.CompareTo(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.Equals(work.bacome.imapclient.cUID)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.op_Equality(work.bacome.imapclient.cUID,work.bacome.imapclient.cUID)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cUID.op_Inequality(work.bacome.imapclient.cUID,work.bacome.imapclient.cUID)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cNamespace">
            <summary>
            Represents an IMAP namespace.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>
        </member>
        <member name="F:work.bacome.imapclient.cNamespace.Client">
            <summary>The client that this instance was created by.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespace.NamespaceName">
            <summary>The namespace's name.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Prefix">
            <summary>
            Gets the name prefix of the namespace. May be <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cNamespace.Delimiter">
            <summary>
            Gets the hierarchy delimiter used in the namespace. May be <see langword="null"/>. 
            </summary>
            <remarks>
            Will be <see langword="null"/> if the server has no hierarchy in its names.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the mailboxes at the top level of hierarchy in the namespace.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the mailboxes at the top level of hierarchy in the namespace.
            </summary>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Gets the subscribed mailboxes in the namespace. 
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the namespace are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <remarks>
            Mailboxes that do not exist may be returned.
            Subscribed mailboxes and levels in the mailbox hierarchy do not necessarily exist as mailboxes on the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            Asynchronously gets the subscribed mailboxes in the namespace.
            </summary>
            <param name="pDescend">If <see langword="true"/> all subscribed mailboxes in the namespace are returned, if <see langword="false"/> only mailboxes at the top level of hierarchy are returned.</param>
            <param name="pDataSets">The sets of data to fetch into cache for the returned mailboxes.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cNamespace.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)" select="returns|remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.GetMailboxName(System.String)">
            <inheritdoc cref="M:work.bacome.imapclient.iMailboxContainer.GetMailboxName(System.String)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChild(System.String,System.Boolean)">
            <summary>
            Creates a mailbox at the top level of hierarchy in the namespace.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously creates a mailbox at the top level of hierarchy in the namespace.
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicates to the server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
            <inheritdoc cref="M:work.bacome.imapclient.cNamespace.CreateChild(System.String,System.Boolean)" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Equals(work.bacome.imapclient.cNamespace)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Equals(work.bacome.imapclient.iMailboxContainer)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.op_Equality(work.bacome.imapclient.cNamespace,work.bacome.imapclient.cNamespace)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespace.op_Inequality(work.bacome.imapclient.cNamespace,work.bacome.imapclient.cNamespace)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaceName">
            <summary>
            Represents an IMAP namespace name.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cNamespace"/>
            <seealso cref="T:work.bacome.imapclient.cNamespaces"/>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Prefix">
            <summary>
            The name prefix of the namespace. May be the empty string.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaceName.Delimiter">
            <summary>
            The hierarchy delimiter used in the namespace. May be <see langword="null"/>. 
            </summary>
            <remarks>
            Will be <see langword="null"/> if the server has no hierarchy in its names.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.Equals(work.bacome.imapclient.cNamespaceName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.op_Equality(work.bacome.imapclient.cNamespaceName,work.bacome.imapclient.cNamespaceName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaceName.op_Inequality(work.bacome.imapclient.cNamespaceName,work.bacome.imapclient.cNamespaceName)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.cNamespaces">
            <summary>
            An immutable collection of <see cref="T:work.bacome.imapclient.cNamespace"/>.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.Namespaces"/>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Personal">
            <summary>The 'personal' <see cref="T:work.bacome.imapclient.cNamespace"/> instances in the collection. May be <see langword="null"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.OtherUsers">
            <summary>The 'other user' <see cref="T:work.bacome.imapclient.cNamespace"/> instances in the collection. May be <see langword="null"/>.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cNamespaces.Shared">
            <summary>The 'shared' <see cref="T:work.bacome.imapclient.cNamespace"/> instances in the collection. May be <see langword="null"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cNamespaces.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.eCommandResultType">
            <summary>
            Represents the type of an IMAP command result.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCommandResult"/>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.ok">
            <summary>Successful completion.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.no">
            <summary>Unsuccessful completion.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eCommandResultType.bad">
            <summary>Protocol error.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCommandResult">
            <summary>
            Contains data relating to the result of an IMAP command.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cProtocolErrorException"/>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResultType">
            <summary>
            The type of the result.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResponseText">
            <summary>
            The response text associated with the result.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCommandResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedString">
            <summary>
            Represents a string that may include language information as per RFC 2231.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cMessage.Subject"/>
            <seealso cref="F:work.bacome.imapclient.cAddress.DisplayName"/>
            <seealso cref="P:work.bacome.imapclient.cAttachment.Description"/>
            <seealso cref="F:work.bacome.imapclient.cEnvelope.Subject"/>
            <seealso cref="F:work.bacome.imapclient.cSinglePartBody.Description"/>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedString.Parts">
            <summary>
            The parts of the string. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedString.ToString">
            <summary>Returns the string data sans the language information.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedString.op_Implicit(work.bacome.imapclient.cCulturedString)~System.String">
            <inheritdoc cref="M:work.bacome.imapclient.cCulturedString.ToString"/>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedStringPart">
            <summary>
            Represents part of a string that may include language information as per RFC 2231.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cCulturedString"/>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.String">
            <summary>
            The text of the part (after RFC 2231 decoding). 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.LanguageTag">
            <summary>
            The language of the part. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCulturedStringPart.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPException">
            <summary>
            The <see langword="abstract"/> base class for all of the library's custom exceptions.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnsuccessfulCompletionException">
            <summary>
            Thrown on a 'NO' command response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText">
            <summary>
            The response text associated with the 'NO'.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may prevent the problem.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cUnsuccessfulCompletionException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cProtocolErrorException">
            <summary>
            Thrown on a 'NO' or 'BAD' command response. (Only thrown on a 'NO' when the 'NO' is an unexpected possibility.)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.CommandResult">
            <summary>
            The command result associated with the response.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may prevent the problem.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cProtocolErrorException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cRequestedDataNotReturnedException">
            <summary>
            Thrown when the requested data is not returned by the server. This is most likely because the message has been expunged.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnexpectedServerActionException">
            <summary>
            Thrown when something happens that shouldn't (according to my reading of the RFCs).
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnexpectedServerActionException.TryIgnoring">
            <summary>
            Indicates that ignoring these capabilities may prevent the problem.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="M:work.bacome.imapclient.cUnexpectedServerActionException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cInternalErrorException">
            <summary>
            Thrown when something happens that shouldn't.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cConnectByeException">
            <summary>
            Thrown to indicate that <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> failure is due to the server rejecting the connection.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cConnectByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cConnectByeException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cHomeServerReferralException">
            <summary>
            Thrown to indicate that a <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> failure came with a <see cref="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral"/>.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText">
            <summary>
            The response text associated with the rejection.
            The home server referral will be in <see cref="F:work.bacome.imapclient.cResponseText.Arguments"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHomeServerReferralException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cCredentialsException">
            <summary>
            Thrown to indicate that <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> failure is due to the server rejecting the <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/>.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cCredentialsException.ResponseText">
            <summary>
            The response text if the server explicitly rejects the credentials by using <see cref="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed"/>, <see cref="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed"/> or <see cref="F:work.bacome.imapclient.eResponseTextCode.expired"/>, otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentialsException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cAuthenticationMechanismsException">
            <summary>
            Thrown to indicate that <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> failure is due to a lack of usable authentication mechanisms.
            </summary>
            <seealso cref="M:work.bacome.imapclient.cIMAPClient.Connect"/>
        </member>
        <member name="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue">
            <summary>
            Indicates whether the problem might be fixed by using TLS.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAuthenticationMechanismsException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cUnilateralByeException">
            <summary>
            Thrown to indicate that the server unilaterally disconnected.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnilateralByeException.ResponseText">
            <summary>
            The response text associated with the server's 'BYE'.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cUnilateralByeException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurityException">
            <summary>
            Thrown when the installed SASL security layer fails to encode or decode.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineConflictException">
            <summary>
            Thrown when there are two pipelined commands that conflict in some way. Indicates a bug in the library.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineStoppedException">
            <summary>
            Thrown when the internal command pipeline has stopped processing commands.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStreamClosedException">
            <summary>
            Thrown when the internal network stream has been closed.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDValidityException">
            <summary>
            Thrown when the UIDValidity is incorrect or changed while the library was doing something that depended on it not changing.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cContentTransferDecodingException">
            <summary>
            Thrown when the required content-transfer-decoding can't be done client-side.
            </summary>
            <remarks>
            Will be thrown either due to an error in the decoder or due to the library not having a suitable decoder to use.
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cMessageExpungedException">
            <summary>
            Thrown when a message's sequence number or server-side message data is required after the message has been expunged.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageExpungedException.MessageHandle">
            <summary>
            The message concerned.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessageExpungedException.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cSingleMessageStoreException">
            <summary>
            Thrown when a single message store operation fails.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBatchSizerConfiguration">
            <summary>
            Contains parameters to control batch sizes in long running operations.
            </summary>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration"/>
            <seealso cref="T:work.bacome.imapclient.cBodyFetchConfiguration"/>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Min">
            <summary>The minimum batch size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Max">
            <summary>The maximum batch size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.MaxTime">
            <summary>The maximum time that a batch should take, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBatchSizerConfiguration.Initial">
            <summary>The initial batch size.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance.
            </summary>
            <param name="pMin">The minimum batch size.</param>
            <param name="pMax">The maximum batch size.</param>
            <param name="pMaxTime">The maximum time that a batch should take, in milliseconds.</param>
            <param name="pInitial">The initial batch size.</param>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.Equals(work.bacome.imapclient.cBatchSizerConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.op_Equality(work.bacome.imapclient.cBatchSizerConfiguration,work.bacome.imapclient.cBatchSizerConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cBatchSizerConfiguration.op_Inequality(work.bacome.imapclient.cBatchSizerConfiguration,work.bacome.imapclient.cBatchSizerConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.iId">
            <summary>
            Represents an ID (RFC 2971) field/ value dictionary.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cId"/>
            <seealso cref="T:work.bacome.imapclient.cIdDictionary"/>
        </member>
        <member name="P:work.bacome.imapclient.iId.Name">
            <summary>Gets the name of the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Version">
            <summary>Gets the version number of the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OS">
            <summary>Gets the name of the operating system or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.OSVersion">
            <summary>Gets the version of the operating system or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Vendor">
            <summary>Gets the vendor of the client/server or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.SupportURL">
            <summary>Gets the URL to contact for support or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Address">
            <summary>Gets the postal address of contact/vendor or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Date">
            <summary>Gets the date program was released or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Command">
            <summary>Gets the command used to start the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Arguments">
            <summary>Gets the arguments supplied on the command line or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.iId.Environment">
            <summary>Gets the description of the environment or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kIdFieldName">
            <summary>
            Contains ID (RFC 2971) field name constants.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Name">
            <summary>name</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Version">
            <summary>version</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.OS">
            <summary>os</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.OSVersion">
            <summary>os-version</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Vendor">
            <summary>vendor</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.SupportURL">
            <summary>support-url</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Address">
            <summary>address</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Date">
            <summary>date</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Command">
            <summary>command</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Arguments">
            <summary>arguments</summary>
        </member>
        <member name="F:work.bacome.imapclient.kIdFieldName.Environment">
            <summary>environment</summary>
        </member>
        <member name="T:work.bacome.imapclient.cId">
            <summary>
            An immutable ID (RFC 2971) field/ value dictionary.
            </summary>
            <remarks>
            ID field names are case insensitive.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ServerId"/>
        </member>
        <member name="F:work.bacome.imapclient.cId.mDictionary">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialises a new instance, copying the specified dictionary.
            </summary>
            <param name="pDictionary"></param>
        </member>
        <member name="P:work.bacome.imapclient.cId.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="P:work.bacome.imapclient.cId.Values">
            <summary>Gets the values that are in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Keys">
            <summary>Gets the fields that are in the dictionary.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified field (case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the specified field's value (case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cId.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cId.Item(System.String)">
            <summary>
            Gets the specified field's value (case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cId.Name">
            <summary>Gets the name of the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Version">
            <summary>Gets the version number of the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OS">
            <summary>Gets the name of the operating system or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.OSVersion">
            <summary>Gets the version of the operating system or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Vendor">
            <summary>Gets the vendor of the client/server or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.SupportURL">
            <summary>Gets the URL to contact for support or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Address">
            <summary>Gets the postal address of contact/vendor or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Date">
            <summary>Gets the date program was released or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Command">
            <summary>Gets the command used to start the program or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Arguments">
            <summary>Gets the arguments supplied on the command line or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cId.Environment">
            <summary>Gets the description of environment or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cClientIdUTF8">
            <summary>
            An immutable ID (RFC 2971) field/ value dictionary.
            </summary>
            <remarks>
            <para>
            ID field names are case insensitive.
            </para>
            <para>
            This class enforces the limits of RFC 2971;
            <list type="bullet">
            <item>Field names no longer than 30 bytes.</item>
            <item>Values no longer than 1024 bytes.</item>
            <item>No more than 30 field/ value pairs.</item>
            </list>
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialises a new instance, copying the specified dictionary. 
            </summary>
            <param name="pDictionary"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cClientIdUTF8" select="remarks"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientIdUTF8.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientIdUTF8">
            <summary>
            Returns a new instance, copying the specified dictionary.
            </summary>
            <param name="pDictionary"></param>
            <returns></returns>
            <inheritdoc cref="T:work.bacome.imapclient.cClientIdUTF8" select="remarks"/>
        </member>
        <member name="T:work.bacome.imapclient.cClientId">
            <inheritdoc cref="T:work.bacome.imapclient.cClientIdUTF8" select="summary|remarks"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:work.bacome.imapclient.cClientIdUTF8.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:work.bacome.imapclient.cClientId.op_Implicit(work.bacome.imapclient.cIdDictionary)~work.bacome.imapclient.cClientId">
            <summary>
            Returns a new instance, copying the specified dictionary.
            </summary>
            <param name="pDictionary"></param>
            <returns></returns>
            <inheritdoc cref="T:work.bacome.imapclient.cClientIdUTF8" select="remarks"/>
        </member>
        <member name="T:work.bacome.imapclient.cIdDictionary">
            <summary>
            An ID (RFC 2971) field/ value dictionary.
            </summary>
            <remarks>
            ID field names are case insensitive.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cClientId"/>
            <seealso cref="T:work.bacome.imapclient.cClientIdUTF8"/>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance, empty or with default values.
            </summary>
            <param name="pDefault">Indicates whether the instance should be initialised with default values.</param>
            <remarks>
            A default dictionary contains details about the library.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Count">
            <inheritdoc cref="P:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Count"/>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.IsReadOnly">
            <summary>Gets the value <see langword="false"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Values">
            <summary>Gets the values that are in the dictionary.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Keys">
            <summary>Gets the fields that are in the dictionary.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified field (case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the specifed field's value (case insensitive).
            </summary>
            <param name="pKey"></param>
            <param name="rValue"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified field (case insensitive) and value to the dictionary.
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.String)">
            <summary>
            Removes the specified field from the dictionary (case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the dictionary contains the specified field/ value pair.
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds the specified field (case insensitive) and value to the dictionary.
            </summary>
            <param name="pEntry"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the specified field/ value pair from the dictionary.
            </summary>
            <param name="pEntry"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.Clear">
            <summary>
            Removes all field/ value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the field/ value pairs in the dictionary to an array.
            </summary>
            <param name="pArray"></param>
            <param name="pIndex"></param>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.GetEnumerator">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetEnumerator"/>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Item(System.String)">
            <summary>
            Gets the specifed field's value (case insensitive).
            </summary>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Name">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the name of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Version">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the version number of the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OS">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the name of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.OSVersion">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the version of the operating system.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Vendor">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the vendor of the client/server.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.SupportURL">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the URL to contact for support.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Address">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the postal address of contact/vendor.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Date">
            <summary>Gets the date program was released or <see langword="null"/> if it isn't specified.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.SetDate(System.DateTime)">
            <summary>
            Sets <see cref="P:work.bacome.imapclient.cIdDictionary.Date"/>. This method converts the supplied date to RFC 3501 date format.
            </summary>
            <param name="pDate"></param>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Command">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the command used to start the program.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Arguments">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the arguments supplied on the command line, if any.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIdDictionary.Environment">
            <summary>Gets (<see langword="null"/> if it isn't specified) and sets the description of the environment.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdDictionary.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cIdleConfiguration">
            <summary>
            Contains parameters that control the <see cref="T:work.bacome.imapclient.cIMAPClient"/> idle feature.
            </summary>
            <remarks>
            <para>
            The aim of idling is to keep the client in synch with the server, in particular the client's data about the currently selected mailbox.
            </para>
            <para>
            A <see cref="T:work.bacome.imapclient.cIMAPClient"/> instance can only idle while it <see cref="P:work.bacome.imapclient.cIMAPClient.IsConnected"/>.
            </para>
            <para>
            Idling starts after a configured length of quiet time on the underlying connection (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.StartDelay"/>).
            </para>
            <para>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Idle"/> is in use then the RFC 2177 IDLE command is used.
            The IDLE command has to be restarted periodically to avoid the connection being closed due to inactivity - RFC 2177 recommends at least once every 29 minutes (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval"/>).
            </para>
            <para>
            If <see cref="P:work.bacome.imapclient.cCapabilities.Idle"/> is not in use then the library does a periodic poll of the server using IMAP CHECK and/ or NOOP (see <see cref="F:work.bacome.imapclient.cIdleConfiguration.PollInterval"/>).
            </para>
            <para>
            The default values are;
            <list type="bullet">
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.StartDelay"/></term><description>2s</description></item>
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval"/></term><description>20 minutes</description></item>
            <item><term><see cref="F:work.bacome.imapclient.cIdleConfiguration.PollInterval"/></term><description>60s</description></item>
            </list>
            </para>
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration"/>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.StartDelay">
            <summary>The length of the quiet time that must pass before idling starts, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.IdleRestartInterval">
            <summary>The interval between RFC 2177 IDLE commands, in milliseconds.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cIdleConfiguration.PollInterval">
            <summary>The interval between polling commands, in milliseconds.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance with the specified start delay, restart interval and poll interval.
            </summary>
            <param name="pStartDelay">The length of the quiet time that must pass before idling starts, in milliseconds.</param>
            <param name="pIdleRestartInterval">The interval between RFC 2177 IDLE commands, in milliseconds.</param>
            <param name="pPollInterval">The interval between polling commands, in milliseconds.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.Equals(work.bacome.imapclient.cIdleConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.op_Equality(work.bacome.imapclient.cIdleConfiguration,work.bacome.imapclient.cIdleConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cIdleConfiguration.op_Inequality(work.bacome.imapclient.cIdleConfiguration,work.bacome.imapclient.cIdleConfiguration)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextContext">
            <summary>
            Represents the context in which response text was received.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cResponseTextEventArgs"/>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.greetingok">
            <summary>As part of an IMAP '* OK' greeting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.greetingpreauth">
            <summary>As part of an IMAP '* PREAUTH' greeting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.greetingbye">
            <summary>As part of an IMAP '* BYE' greeting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.continuerequest">
            <summary>As part of an IMAP continuation request.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.bye">
            <summary>As part of an IMAP '* BYE'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.information">
            <summary>As part of an IMAP '* OK'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.warning">
            <summary>As part of an IMAP '* NO'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.error">
            <summary>As part of an IMAP '* BAD'.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.success">
            <summary>As part of an IMAP command success.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.failure">
            <summary>As part of an IMAP command failure.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.authenticationcancelled">
            <summary>As part of an IMAP authentication cancellation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextContext.protocolerror">
            <summary>As part of an IMAP protocol error command termination.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eResponseTextCode">
            <summary>
            Represents the code associated with response text.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cResponseText"/>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.none">
            <summary>There was no code.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.other">
            <summary>There was a code, but there isn't a <see cref="T:work.bacome.imapclient.eResponseTextCode"/> value for it.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alert">
            <summary>RFC 3501 ALERT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.badcharset">
            <summary>RFC 3501 BADCHARSET.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.parse">
            <summary>RFC 3501 PARSE: there was an error parsing a message.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.trycreate">
            <summary>RFC 3501 TRYCREATE: try creating the mailbox.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unavailable">
            <summary>RFC 5530 UNAVAILABLE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authenticationfailed">
            <summary>RFC 5530 AUTHENTICATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.authorizationfailed">
            <summary>RFC 5530 AUTHORIZATIONFAILED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expired">
            <summary>RFC 5530 EXPIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.privacyrequired">
            <summary>RFC 5530 PRIVACYREQUIRED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.contactadmin">
            <summary>RFC 5530 CONTACTADMIN.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.noperm">
            <summary>RFC 5530 NOPERM.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.inuse">
            <summary>RFC 5530 INUSE.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.expungeissued">
            <summary>RFC 5530 EXPUNGEISSUED.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.corruption">
            <summary>RFC 5530 CORRUPTION.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.serverbug">
            <summary>RFC 5530 SERVERBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.clientbug">
            <summary>RFC 5530 CLIENTBUG.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.cannot">
            <summary>RFC 5530 CANNOT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.limit">
            <summary>RFC 5530 LIMIT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.overquota">
            <summary>RFC 5530 OVERQUOTA.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.alreadyexists">
            <summary>RFC 5530 ALREADYEXISTS.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.nonexistent">
            <summary>RFC 5530 NONEXISTENT.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.referral">
            <summary>RFC 2193 REFERRAL.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.useattr">
            <summary>RFC 6154 USEATTR.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eResponseTextCode.unknowncte">
            <summary>RFC 3516 UNKNOWNCTE: the server can't decode the content.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cResponseText">
            <summary>
            Contains IMAP response text.
            </summary>
            <remarks>
            If <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.badcharset"/> then <see cref="F:work.bacome.imapclient.cResponseText.Arguments"/> may contain a list of supported character sets.
            If <see cref="F:work.bacome.imapclient.cResponseText.Code"/> is <see cref="F:work.bacome.imapclient.eResponseTextCode.referral"/> then <see cref="F:work.bacome.imapclient.cResponseText.Arguments"/> should contain URI(s).
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cResponseTextEventArgs"/>
            <seealso cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>
            <seealso cref="T:work.bacome.imapclient.cConnectByeException"/>
            <seealso cref="T:work.bacome.imapclient.cHomeServerReferralException"/>
            <seealso cref="T:work.bacome.imapclient.cCredentialsException"/>
            <seealso cref="T:work.bacome.imapclient.cCommandResult"/>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.CodeText">
            <summary>
            The response code associated with the response text as a string, may be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.ArgumentsText">
            <summary>
            The response code arguments associated with the response text as a string, may be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Code">
            <summary>
            The response code associated with the response text as a code.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cResponseText" select="remarks"/>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Arguments">
            <summary>
            The response code arguments associated with the response text in list form, may be <see langword="null"/>.
            </summary>
            <inheritdoc cref="T:work.bacome.imapclient.cResponseText" select="remarks"/>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cResponseText.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cResponseTextEventArgs">
            <summary>
            Carries IMAP response text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Context">
            <summary>
            The context in which the response text was received.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Text">
            <summary>
            The response text.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cResponseTextEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cURL">
            <summary>
            Represents a parsed IMAP URL.
            </summary>
            <remarks>
            See RFC 5092 and RFC 5593.
            </remarks>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral"/>
            <seealso cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/>
        </member>
        <member name="F:work.bacome.imapclient.cURL.OriginalString">
            <summary>The string that was parsed to initialise this instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURL.#ctor(System.String)">
            <summary>
            Initialises a new instance from the specified string. Will throw if the string cannot be parsed.
            </summary>
            <param name="pURL"></param>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UserId">
            <summary>Gets the decoded 'enc-user' part of the 'iuserinfo' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MechanismName">
            <summary>Gets the decoded 'enc-auth-type' from the 'iauth' part of the URL (if iauth is ';AUTH=*' this returns <see langword="null"/>). May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Host">
            <summary>Gets the 'host' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Port">
            <summary>Gets the 'port' part of the URL. Will be 143 if the port isn't specified in the URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MailboxPath">
            <summary>Gets the decoded 'enc-mailbox' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UIDValidity">
            <summary>Gets the 'uidvalidity' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Search">
            <summary>Gets the decoded 'enc-search' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.UID">
            <summary>Gets the 'iuid' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Section">
            <summary>Gets the decoded 'isection' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.PartialOffset">
            <summary>Gets the 'offset' part of the 'partial-range' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.PartialLength">
            <summary>Gets the 'length' part of the 'partial-range' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Expire">
            <summary>Gets the parsed 'datetime' part of the 'expire' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Application">
            <summary>Gets the 'application' part of the 'access identifier' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.AccessUserId">
            <summary>Gets the decoded 'enc-user' part of the 'access identifier' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.TokenMechanism">
            <summary>Gets the 'uauth-mechanism' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.Token">
            <summary>Gets the 'enc-urlauth' part of the URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.MustUseAnonymous">
            <summary>Indicates whether the URL indicates that anonymous authentication must be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsHomeServerReferral">
            <summary>Indicates whether the URL is a home server referral URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsMailboxReferral">
            <summary>Indicates whether the URL is a mailbox referral URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsMailboxSearch">
            <summary>Indicates whether the URL is a mailbox search URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsMessageReference">
            <summary>Indicates whether the URL is a message reference URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsPartial">
            <summary>Indicates whether the URL refers to part of a message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsAuthorisable">
            <summary>Indicates whether the URL is suitable for use with RFC 4467 GENURLAUTH.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURL.IsAuthorised">
            <summary>Indicates whether the URL is an authorized URL.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURL.Equals(work.bacome.imapclient.cURL)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURL.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cURL.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cURL.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cURL.op_Equality(work.bacome.imapclient.cURL,work.bacome.imapclient.cURL)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURL.op_Inequality(work.bacome.imapclient.cURL,work.bacome.imapclient.cURL)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURL.TryParse(System.String,work.bacome.imapclient.cURL@)">
            <summary>
            Tries to parse a string as an IMAP URL.
            </summary>
            <param name="pURL"></param>
            <param name="rURL"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cSASLAnonymous">
            <summary>
            Contains arguments for use with the IMAP AUTHENTICATE ANONYMOUS command.
            </summary>
            <remarks>
            RFC 4505 specifies that the trace information must be a valid email address or 1 to 255 characters of text not including '@'.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAnonymous.#ctor(System.String,work.bacome.imapclient.eTLSRequirement)">
            <summary>
            Initialises a new instance with the specified trace information and TLS requirement. Will throw if the trace information isn't valid.
            </summary>
            <param name="pTrace"></param>
            <param name="pTLSRequirement"></param>
            <inheritdoc cref="T:work.bacome.imapclient.cSASLAnonymous" select="remarks"/>
        </member>
        <member name="P:work.bacome.imapclient.cSASLAnonymous.MechanismName">
            <summary>
            Gets the value "ANONYMOUS"
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSASLAnonymous.TLSRequirement">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAnonymous.GetAuthentication">
            <inheritdoc cref="M:work.bacome.imapclient.cSASL.GetAuthentication" select="summary"/>
        </member>
        <member name="T:work.bacome.imapclient.cSASL">
            <summary>
            Represents an object that can participate in the <see cref="T:work.bacome.imapclient.cIMAPClient"/> SASL mechanism.
            </summary>
            <seealso cref="T:work.bacome.imapclient.cSASLAuthentication"/>
            <seealso cref="T:work.bacome.imapclient.cSASLSecurity"/>
        </member>
        <member name="P:work.bacome.imapclient.cSASL.MechanismName">
            <summary>
            Gets the SASL mechanism name.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSASL.TLSRequirement">
            <summary>
            Gets the TSL requirement for the contained details to be used.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSASL.GetAuthentication">
            <summary>
            Returns an object that can participate in the <see cref="T:work.bacome.imapclient.cIMAPClient"/> authentication process.
            </summary>
            <returns></returns>
            <remarks>
            If authentication is successful the library will use <see cref="M:work.bacome.imapclient.cSASLAuthentication.GetSecurity"/> to get an object that implements any security layer negotiated as part of the authentication.
            <see cref="M:work.bacome.imapclient.cSASLAuthentication.GetSecurity"/> must return <see langword="null"/> if no security layer was negotiated.
            The <see cref="T:work.bacome.imapclient.cSASLAuthentication"/> object will be disposed once authentication is complete (upon either of success or failure).
            Any <see cref="T:work.bacome.imapclient.cSASLSecurity"/> object obtained will be disposed when the underlying network connection closes.
            </remarks>
        </member>
        <member name="P:work.bacome.imapclient.cSASL.LastAuthentication">
            <summary>
            Gets a reference to the <see cref="T:work.bacome.imapclient.cSASLAuthentication"/> object returned by <see cref="M:work.bacome.imapclient.cSASL.GetAuthentication"/> for use in the last <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> attempt. May be <see langword="null"/>.
            </summary>
            <remarks>
            This will return <see langword="null"/> if the instance was not used in the last <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> attempt.
            This property exists for mechanisms that have out of band error reporting (e.g. XOAUTH2) and provides a way for the out of band errors to be passed back to external code.
            <note type="note">Any object returned will almost certainly have been disposed.</note>
            </remarks>
        </member>
        <member name="T:work.bacome.imapclient.cSASLAuthentication">
            <summary>
            Represents an object that can participate in the <see cref="T:work.bacome.imapclient.cIMAPClient"/> SASL authentication process.
            </summary>
            <remarks>
            Instances will be disposed once authentication is complete (upon either of success or failure).
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cSASL"/>
            <seealso cref="T:work.bacome.imapclient.cSASLSecurity"/>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAuthentication.GetResponse(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Gets the client response to a server challenge.
            </summary>
            <param name="pChallenge"></param>
            <returns></returns>
            <remarks>
            <para>
            The library passes the BASE64 decoded challenge to this method and BASE64 encodes the returned response before sending it to the server.
            If the authentication exchange should be cancelled then this method should return <see langword="null"/>; the library will then gracefully cancel the exchange with the server.
            </para>
            <para>
            If <see cref="P:work.bacome.imapclient.cCapabilities.SASL_IR"/> is in use then the first challenge passed to this method will be <see langword="null"/>. 
            If the mechanism supports an initial response then the initial response should be returned, otherwise <see langword="null"/> should be returned. 
            If the initial response is 'empty' then a zero length response should be returned, not <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAuthentication.GetSecurity">
            <summary>
            Returns an object that can participate in the <see cref="T:work.bacome.imapclient.cIMAPClient"/> SASL security layer process.
            </summary>
            <returns></returns>
            <remarks>
            This will only be called (and will always be called) after a successful authentication exchange.
            If no security layer was negotiated through the authentication exchange, <see langword="null"/> must be returned.
            If an object is returned it will be disposed when the connection closes.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAuthentication.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cSASLAuthentication.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurity">
            <summary>
            Represents an object that can participate in the <see cref="T:work.bacome.imapclient.cIMAPClient"/> SASL security layer process.
            </summary>
            <remarks>
            Instances will be disposed when the connection closes.
            </remarks>
            <seealso cref="T:work.bacome.imapclient.cSASL"/>
            <seealso cref="T:work.bacome.imapclient.cSASLAuthentication"/>
        </member>
        <member name="M:work.bacome.imapclient.cSASLSecurity.Decode(System.Byte[])">
            <summary>
            Decodes data received from the server.
            </summary>
            <param name="pBuffer">The data received from the server.</param>
            <returns>A buffer of decoded data or <see langword="null"/> if decoding cannot be completed until more input arrives.</returns>
            <remarks>
            Input buffers of encoded bytes are delivered to this method as they arrive.
            Any bytes that cannot be decoded due to there being an 'uneven' number of bytes must be buffered.
            If there is a decoding error then this method must throw: this will immediately terminate the connection to the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLSecurity.Encode(System.Byte[])">
            <summary>
            Encodes client data for sending to the server.
            </summary>
            <param name="pBuffer">The un-encoded data to be sent.</param>
            <returns>The encoded data to be sent.</returns>
            <remarks>
            If there is a problem encoding the data this method should return <see langword="null"/> (or it may throw), this will immediately terminate the connection to the server.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLSecurity.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.imapclient.cSASLSecurity.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLPlain">
            <summary>
            Contains arguments for use with the IMAP AUTHENTICATE PLAIN command.
            </summary>
            <remarks>
            RFC 4616 specifies that the authentication-id and password must be at least 1 character long and that they may not include the NUL character.
            </remarks>
        </member>
        <member name="M:work.bacome.imapclient.cSASLPlain.#ctor(System.String,System.String,work.bacome.imapclient.eTLSRequirement)">
            <summary>
            Initialises a new instance with the specified authentication-id, password and TLS requirement. Will throw if the authentication-id or password are not valid.
            </summary>
            <param name="pAuthenticationId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
        </member>
        <member name="P:work.bacome.imapclient.cSASLPlain.MechanismName">
            <summary>
            Gets the value "PLAIN"
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSASLPlain.TLSRequirement">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cSASLPlain.GetAuthentication">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.imapclient.cURI">
            <summary>
            Represents a parsed URI.
            </summary>
            <remarks>
            See RFC 3986 and RFC 6874.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cURI.OriginalString">
            <summary>The string that was parsed to initialise this instance.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURI.#ctor(System.String)">
            <summary>
            Initialises a new instance from the specified string. Will throw if the string cannot be parsed.
            </summary>
            <param name="pURI"></param>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Scheme">
            <summary>Gets the 'scheme' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.UserInfo">
            <summary>Gets the decoded 'userinfo' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.UserId">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.UserId"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.MechanismName">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.MechanismName"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Host">
            <summary>Gets the 'host' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.PortString">
            <summary>Gets the 'port' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Port">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Port"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Path">
            <summary>Gets the decoded 'path' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.MailboxPath">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.MailboxPath"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.UIDValidity">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.UIDValidity"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.UID">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.UID"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Section">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Section"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.PartialOffset">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.PartialOffset"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.PartialLength">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.PartialLength"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Expire">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Expire"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Application">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Application"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.AccessUserId">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.AccessUserId"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.TokenMechanism">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.TokenMechanism"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Token">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Token"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Query">
            <summary>Gets the decoded 'query' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Search">
            <summary>Gets the <see cref="P:work.bacome.imapclient.cURL.Search"/> if the URI is a valid IMAP URL. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.Fragment">
            <summary>Gets the decoded 'fragment' part of the URI. May be <see langword="null"/>.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.MustUseAnonymous">
            <summary>Indicates whether the URI is an IMAP URL that indicates that anonymous authentication must be used.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsHomeServerReferral">
            <summary>Indicates whether the URI is an IMAP home server referral URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsMailboxReferral">
            <summary>Indicates whether the URI is an IMAP mailbox referral URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsMailboxSearch">
            <summary>Indicates whether the URI is an IMAP mailbox search URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsMessageReference">
            <summary>Indicates whether the URI is an IMAP message reference URL.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsPartial">
            <summary>Indicates whether the URI is an IMAP URL that refers to part of a message.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsAuthorisable">
            <summary>Indicates whether the URI is suitable for use with RFC 4467 GENURLAUTH.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cURI.IsAuthorised">
            <summary>Indicates whether the URI is an authorized IMAP URL.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cURI.Equals(work.bacome.imapclient.cURI)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equals(System.Object)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURI.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:work.bacome.imapclient.cURI.GetHashCode">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.GetHashCode"/>
        </member>
        <member name="M:work.bacome.imapclient.cURI.ToString">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.imapclient.cURI.op_Equality(work.bacome.imapclient.cURI,work.bacome.imapclient.cURI)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Equality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURI.op_Inequality(work.bacome.imapclient.cURI,work.bacome.imapclient.cURI)">
            <inheritdoc cref="M:work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate.Inequality(work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate,work.bacome.imapclient.apidocumentation.cAPIDocumentationTemplate)"/>
        </member>
        <member name="M:work.bacome.imapclient.cURI.TryParse(System.String,work.bacome.imapclient.cURI@)">
            <summary>
            Tries to parse a string as a URI.
            </summary>
            <param name="pURI"></param>
            <param name="rURI"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.async.cCancellationManager">
            <summary>
            Provides services for managing sets of <see cref="T:System.Threading.CancellationToken"/>. 
            </summary>
            <remarks>
            Instances manage a series of <see cref="T:System.Threading.CancellationTokenSource"/> instances.
            This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor">
            <summary>
            Initialises a new instance.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.#ctor(System.Action{work.bacome.trace.cTrace.cContext})">
            <summary>
            Initialises a new instance with the specified callback to be used when <see cref="P:work.bacome.async.cCancellationManager.Count"/> changes.
            </summary>
            <param name="pCountChanged"></param>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.GetToken(work.bacome.trace.cTrace.cContext)">
            <summary>
            Issues a disposable token object containing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
            <remarks>
            Issuing the token object increments <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            Use the <see cref="T:System.Threading.CancellationToken"/> wrapped by the token object to control <see langword="async"/> operation(s).
            Dispose the token object when the operation(s) complete.
            Disposing the token object 'returns' the token and decrements <see cref="P:work.bacome.async.cCancellationManager.Count"/>.
            </remarks>
        </member>
        <member name="P:work.bacome.async.cCancellationManager.Count">
            <summary>
            Gets the number of token objects currently issued.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.Cancel(work.bacome.trace.cTrace.cContext)">
            <summary>
            Cancels the current set of <see cref="T:System.Threading.CancellationToken"/> (if there are any token objects on issue) and starts a new set.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <remarks>
            The <see cref="P:work.bacome.async.cCancellationManager.Count"/> is reset to zero. 
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.Dispose">
            <summary></summary>
        </member>
        <member name="T:work.bacome.async.cCancellationManager.cToken">
            <summary>
            Contains a <see cref="T:System.Threading.CancellationToken"/> that can be used to control <see langword="async"/> operation(s).
            </summary>
            <remarks>
            Dispose instances of this class when the operation(s) being controlled complete.
            </remarks>
        </member>
        <member name="F:work.bacome.async.cCancellationManager.cToken.CancellationToken">
            <summary>
            The cancellation token.
            </summary>
        </member>
        <member name="M:work.bacome.async.cCancellationManager.cToken.Dispose">
            <summary></summary>
        </member>
        <member name="T:work.bacome.async.cCountdownTimer">
            <summary>
            Provides a sequence of countdown timer tasks.
            </summary>
            <remarks>
            Each task runs for the same length of time (set when the instance is created). Only one task can be running at a time.
            This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.#ctor(System.Int32,work.bacome.trace.cTrace.cContext)">
            <summary>
            Initialises a new instance with the specified timer duration. The first countdown starts immediately.
            </summary>
            <param name="pTimeout">The duration of each successive countdown, in milliseconds.</param>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.GetAwaitCountdownTask">
            <summary>
            Gets the currently running countdown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.Restart(work.bacome.trace.cTrace.cContext)">
            <summary>
            Starts a new countdown. 
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <remarks>
            If the current countdown is still running, this method will throw.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cCountdownTimer.Dispose">
            <summary></summary>
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess">
            <summary>
            Provides a mechanism to control exclusive access using tokens and blocks.
            </summary>
            <remarks>
            <para>The granting of exclusive access is done by issuing a token. Exclusive access is released by disposing the token object.</para>
            <para>The granting of exclusive access may be blocked by the previous issue of blocks. Several blocks can be on issue at the same time. Blocks are released by disposing the block objects.</para>
            <para>Blocks will not be issued while a token is on issue. Tokens will not be issued while blocks are on issue (nor will they be issued while a token is on issue).</para>
            <para>Instance sequence numbers (specified in the constructor) can be used by external code to ensure that the program's tokens are requested in a consistent order (to avoid deadlocks).</para>
            <para>Each instance of this class is allocated a unique instance number that is used in <see cref="T:work.bacome.trace.cTrace"/> messages to aid debugging.</para>
            <para>This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            </remarks>
        </member>
        <member name="E:work.bacome.async.cExclusiveAccess.Released">
            <summary>
            Raised when exclusive access is released by the disposal of a token object.
            </summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance with the specified name and sequence number.
            </summary>
            <param name="pName">The instance name to include in trace messages written by the instance.</param>
            <param name="pSequence">The sequence number to give the instance. Sequence numbers can be used by external code to ensure that the program's tokens are requested in a consistent order (to avoid deadlocks).</param>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetBlockAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a block on the granting of exclusive access.
            This method will not complete until the block is issued or it throws due to <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the returned object to release the block.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.TryGetBlock(work.bacome.trace.cTrace.cContext)">
            <summary>
            May return a disposable object that represents a block on the issue of exclusive access.
            This method will return a block if the exclusive access is not currently granted, otherwise it will return <see langword="null"/>.
            Dispose the returned object (if any) to release the block.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.GetTokenAsync(work.bacome.async.cMethodControl,work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets a disposable object that represents a grant of exclusive access.
            This method will not complete until the exclusive access is granted or it throws due to <see cref="T:work.bacome.async.cMethodControl"/>.
            Dispose the object to release the exclusive access.
            </summary>
            <param name="pMC">Controls the execution of the method.</param>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cBlock">
            <summary>
            Represents a block on the issue of excusive access.
            </summary>
            <remarks>
            Dispose the instance to release the block.
            </remarks>
            <seealso cref="T:work.bacome.async.cExclusiveAccess"/>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cBlock.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cBlock.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.async.cExclusiveAccess.cToken">
            <summary>
            Represents a grant of exclusive access.
            </summary>
            <remarks>
            Dispose the instance to release the exclusive access.
            </remarks>
            <seealso cref="T:work.bacome.async.cExclusiveAccess"/>
        </member>
        <member name="F:work.bacome.async.cExclusiveAccess.cToken.Sequence">
            <summary>The sequence number of the issuing <see cref="T:work.bacome.async.cExclusiveAccess"/>.</summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cToken.Dispose">
            <summary></summary>
        </member>
        <member name="M:work.bacome.async.cExclusiveAccess.cToken.ToString">
            <inheritdoc/>
        </member>
        <member name="T:work.bacome.async.cMethodControl">
            <summary>
            Represents controls on the execution of a potentially long running method. 
            </summary>
            <remarks>
            Any timeout specified runs from when the instance is created; each time the value of <see cref="P:work.bacome.async.cMethodControl.Timeout"/> is retrieved only the time remaining is returned. 
            This means that if the method being controlled itself makes several calls, the timeout can be applied to the total time that the method takes.
            </remarks>
        </member>
        <member name="F:work.bacome.async.cMethodControl.CancellationToken">
            <summary>The cancellation token being used.</summary>
        </member>
        <member name="M:work.bacome.async.cMethodControl.#ctor(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance with the specified timeout and cancellation token. 
            </summary>
            <param name="pTimeout">The timeout to use in milliseconds (or <see cref="F:System.Threading.Timeout.Infinite"/> for no timeout).</param>
            <param name="pCancellationToken">The cancellation token to use (or <see cref="P:System.Threading.CancellationToken.None"/> for no cancellation).</param>
            <inheritdoc cref="T:work.bacome.async.cMethodControl" select="remarks"/>
        </member>
        <member name="P:work.bacome.async.cMethodControl.Timeout">
            <summary>
            Gets the amount of time remaining (or <see cref="F:System.Threading.Timeout.Infinite"/> if there is no timeout for this instance).
            </summary>
        </member>
        <member name="M:work.bacome.async.cMethodControl.ToString">
            <inheritdoc />
        </member>
        <member name="T:work.bacome.async.cReleaser">
            <summary>
            Provides services for coordinating one worker task and many work creating tasks using coordinating tasks.
            </summary>
            <remarks>
            <para>The worker task should;
            <list type="number">
            <item>Call <see cref="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)"/> to indicate that it is about to start working.</item>
            <item>Look for and do all the work available.</item>
            <item><see langword="await"/> on the task returned by <see cref="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)"/>.</item>
            </list>
            </para>
            <para>The work creating tasks should;
            <list type="number">
            <item>Create item(s) of work.</item>
            <item>Call <see cref="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)"/>.</item>
            </list>
            </para>
            <para>This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            <note type="note">Before disposing an instance the <see cref="T:System.Threading.CancellationToken"/> provided to its constructor must be cancelled, otherwise the dispose may never complete.</note>
            </remarks>
        </member>
        <member name="M:work.bacome.async.cReleaser.#ctor(System.String,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance with the specified name and cancellation token.
            </summary>
            <param name="pName">A name to use when tracing.</param>
            <param name="pCancellationToken">A cancellation token to use on the coordinating tasks, may not be <see cref="P:System.Threading.CancellationToken.None"/>, must be capable of being cancelled.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.GetAwaitReleaseTask(work.bacome.trace.cTrace.cContext)">
            <summary>
            Gets the current coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Release(work.bacome.trace.cTrace.cContext)">
            <summary>
            Completes the current coordinating task.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.IsReleased(work.bacome.trace.cTrace.cContext)">
            <summary>
            Indicates whether the current coordinating task is complete.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.async.cReleaser.Reset(work.bacome.trace.cTrace.cContext)">
            <summary>
            Disposes the current coordinating task if it is complete, allowing a new coordinating task to be started.
            </summary>
            <param name="pParentContext">Context for trace messages.</param>
        </member>
        <member name="M:work.bacome.async.cReleaser.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            <note type="note">Before disposing an instance the <see cref="T:System.Threading.CancellationToken"/> provided to its constructor must be cancelled, otherwise the dispose may never complete.</note>
            </remarks>
        </member>
        <member name="T:work.bacome.async.cAwaiter">
            <summary>
            Provides services for waiting on a number of tasks with timeout and/or cancellation.
            </summary>
            <remarks>
            If a timeout is specified then it runs from when the instance is created.
            This class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(work.bacome.async.cMethodControl)">
            <summary>
            Initialises a new instance with the specified method control. 
            </summary>
            <param name="pMC"></param>
            <remarks>If a timeout is specified then it runs from when the instance is created.</remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance with the specified cancellation token but no timeout.
            </summary>
            <param name="pCancellationToken"></param>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAny(System.Threading.Tasks.Task,System.Threading.Tasks.Task[])">
            <summary>
            Returns the first task to complete from the set of passed tasks OR throws if the instance times-out or is cancelled.
            </summary>
            <param name="pTask">A task, can't be <see langword="null"/>.</param>
            <param name="pTasks">A set of tasks, any or all can be <see langword="null"/>.</param>
            <returns>The task that completed.</returns>
            <remarks>
            If the task that completes did so because it failed (timed-out, was cancelled, or threw) then this method throws.
            If the instance times-out or is cancelled before a task completes, then this method throws.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Threading.Tasks.Task[])">
            <summary>
            Returns a task that completes when all of the passed tasks complete OR when the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation.
            </summary>
            <param name="pMC"></param>
            <param name="pTasks">The set of tasks to wait for. Tasks in the set can be <see langword="null"/>.</param>
            <returns></returns>
            <remarks>
            If any of the passed tasks fail (times-out, was cancelled, or throws) then this method throws.
            If the <see cref="T:work.bacome.async.cMethodControl"/> indicates timeout or cancellation before all the tasks complete then this method throws.
            </remarks>
        </member>
        <member name="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <inheritdoc cref="M:work.bacome.async.cAwaiter.AwaitAll(work.bacome.async.cMethodControl,System.Threading.Tasks.Task[])"/>
        </member>
        <member name="M:work.bacome.async.cAwaiter.Dispose">
            <summary></summary>
        </member>
        <member name="T:work.bacome.trace.cTrace">
            <summary>
            Provides services for writing trace events with indenting and nested context information.
            </summary>
            <remarks>
            <para>
            Instances of this class wrap a <see cref="T:System.Diagnostics.TraceSource"/> and trace messages are written using its services.
            </para>
            <note type="note">
            The services provided by this class do not support the dynamic addition of trace listeners to the wrapped <see cref="T:System.Diagnostics.TraceSource"/>.
            The trace messages that will be written by an instance are determined at the time of construction (by inspecting the state of the <see cref="T:System.Diagnostics.TraceSource"/>).
            </note>
            <para>
            Trace messages are always written in a context.
            Context starts at an independent root-context.
            Sub-contexts can be established within root-contexts and within other sub-contexts.
            If a new sub-context is created for each call then call stack information can be built and included in the trace.
            </para>
            <para>
            Context creation itself can result in a trace message (the context-create trace message).
            Context-create trace messages can be written immediately (as the contexts are created),
            or they can be written only if, and only when, a non-context-create trace message is written in the context (or a sub-context of the context).
            This delayed context-create writing can minimise unnecessary and unhelpful tracing, whilst retaining the 
            benefits of tracing the full context when something interesting happens.
            </para>
            <note type="note" >
            If the writing of context-create trace messages is delayed then the generation of the trace message text is also delayed.
            If there are mutable objects to be included in the trace message text, this can lead to misleading context-create trace messages.
            </note>
            <para>
            Tracing can be disabled, either for an instance as a whole or for parts of the context tree.
            When tracing is disabled contexts are not created and trace messages are not written, so most of the tracing overhead is eliminated.
            Tracing is disabled under the following circumstances;
            <list type="bullet">
            <item>The assembly is compiled without the "TRACE" conditional attribute.</item>
            <item>There aren't any listeners attached to the wrapped <see cref="T:System.Diagnostics.TraceSource"/> when the instance is constructed.</item>
            <item>The wrapped <see cref="T:System.Diagnostics.TraceSource"/> isn't configured to emit <see cref="F:System.Diagnostics.TraceEventType.Critical"/> messages when the instance is constructed.</item>
            <item>The <see cref="F:work.bacome.trace.cTrace.cContext.None"/> context is used as a root-context.</item>
            </list>
            </para>
            <para>Root-contexts have a name and a number. The name is programmer assigned, the number is assigned by the class and is unique within the program.</para>
            <para>Trace messages are written in a tab delimited form, the tab delimited columns contain;
            <list type="number">
            <item>The <see cref="T:System.Diagnostics.TraceSource"/> defined data.</item>
            <item>The date and time that the message was written.</item>
            <item>The name and number of the root-context associated with the trace message.</item>
            <item>The thread number on which the trace message was written.</item>
            <item>The space indented (by a number of spaces equal to the context-depth) trace message.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.#ctor(System.String)">
            <summary>
            Initialises a new instance with the specified trace source name.
            </summary>
            <param name="pTraceSourceName">The <see cref="T:System.Diagnostics.TraceSource"/> name to use.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.NewRoot(System.String,System.Boolean)">
            <summary>
            Returns a new independent root-context.
            </summary>
            <param name="pInstanceName">The name to give the context.</param>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext">
            <summary>
            Represents a tracing context.
            </summary>
            <remarks>
            Instances will be either a root-context or a sub-context.
            </remarks>
            <seealso cref="T:work.bacome.trace.cTrace"/>
        </member>
        <member name="F:work.bacome.trace.cTrace.cContext.None">
            <summary>A tracing context that does not create contexts or emit messages. Can be used to suppress tracing.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRoot(System.String,System.Boolean)">
            <summary>
            Returns a new root-context tied (in name only) to the root-context of this instance.
            </summary>
            <param name="pInstanceName">A string to use when creating the name of the new context.</param>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a free format context-create trace message.
            </summary>
            <param name="pContextTraceDelay">Whether writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pMessage">The context-create trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the context-create trace message text.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
            <remarks>For use when creating a context for a constructor.</remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Returns a new sub-context with a context-create trace message in 'property setter' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns></returns>
            <remarks>For use when creating a context for a property setter.</remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a method.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.Boolean,System.String)">
            <summary>
            Returns a new root-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <returns></returns>
            <remarks>
            For use when creating a new root-context in a constructor.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.Boolean,System.String,System.String)">
            <summary>
            Returns a new root-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns></returns>
            <remarks>
            For use when creating a new root-context in a method.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewGeneric(System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a free format context-create trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the context-create trace message text.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a constructor.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObject(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a constructor.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewObjectV(System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pVersion">The version of the constructor.</param>
            <param name="pArgs">The parameters to the constructor that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a constructor.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewSetProp(System.String,System.String,System.Object)">
            <summary>
            Returns a new sub-context with a context-create trace message in 'property setter' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pProperty">The name of the property.</param>
            <param name="pValue">The value being set.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a property setter.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.String,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a method.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethod(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pContextTraceDelay">Whether the writing of context-create trace messages should be delayed for the context and its sub-contexts.</param>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a method.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewMethodV(System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Returns a new sub-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <param name="pVersion">The version of the method.</param>
            <param name="pArgs">The parameters to the method that should be in the trace message.</param>
            <returns></returns>
            <remarks>
            For use when creating a context for a method.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootObject(System.String)">
            <summary>
            Returns a new root-context with a context-create trace message in 'object constructor' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <returns></returns>
            <remarks>
            For use when creating a new root-context in a constructor.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.NewRootMethod(System.String,System.String)">
            <summary>
            Returns a new root-context with a context-create trace message in 'method' format.
            </summary>
            <param name="pClass">The name of the class.</param>
            <param name="pMethod">The name of the method.</param>
            <returns></returns>
            <remarks>
            For use when creating a new root-context in a method.
            </remarks>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.ContextTraceDelay">
            <summary>Indicates whether the writing of context-create trace messages is being delayed for the context and its sub-contexts.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceContext">
            <summary></summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace message.
            </summary>
            <param name="pTraceEventType">The trace event type.</param>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.EmitsVerbose">
            <summary>Indicates whether the underlying <see cref="T:System.Diagnostics.TraceSource"/> emits verbose trace messages. This value is determined at the time the containing <see cref="T:work.bacome.trace.cTrace"/> is constructed.</summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceCritical(System.String,System.Object[])">
            <summary>
            Writes a critcal trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose trace message.
            </summary>
            <param name="pMessage">The trace message in <see cref="M:System.String.Format(System.String,System.Object[])"/> format.</param>
            <param name="pArgs">The objects to place in the trace message text.</param>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)">
            <summary>
            Writes a trace message reporting an exception.
            </summary>
            <param name="pTraceEventType"></param>
            <param name="pMessage"></param>
            <param name="e"></param>
            <returns>Always returns <see langword="false"/>.</returns>
            <remarks>
            Designed for use in a conditional catch clause to trace the exception as it 'flies by': e.g.
            <code>catch (Exception e) when (lContext.TraceException(e)) { }</code>.
            </remarks>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Exception)">
            <param name="e"></param>
            <inheritdoc cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)" select="summary|returns|remarks"/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.String,System.Exception)">
            <param name="pMessage"></param>
            <param name="e"></param>
            <inheritdoc cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)" select="summary|returns|remarks"/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.Exception)">
            <param name="pTraceEventType"></param>
            <param name="e"></param>
            <inheritdoc cref="M:work.bacome.trace.cTrace.cContext.TraceException(System.Diagnostics.TraceEventType,System.String,System.Exception)" select="summary|returns|remarks"/>
        </member>
        <member name="T:work.bacome.trace.cTrace.cContext.cRoot">
            <summary>
            Represents a root-context.
            </summary>
            <seealso cref="T:work.bacome.trace.cTrace"/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRoot(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewGeneric(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewObjectV(System.Boolean,System.String,System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewSetProp(System.Boolean,System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewMethodV(System.Boolean,System.String,System.String,System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRootObject(System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.NewRootMethod(System.Boolean,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.cRoot.ContextTraceDelay">
            <inheritdoc/>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.TraceContext">
            <summary></summary>
        </member>
        <member name="M:work.bacome.trace.cTrace.cContext.cRoot.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="P:work.bacome.trace.cTrace.cContext.cRoot.EmitsVerbose">
            <inheritdoc/>
        </member>
    </members>
</doc>
