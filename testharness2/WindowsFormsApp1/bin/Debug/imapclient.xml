<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imapclient</name>
    </assembly>
    <members>
        <member name="T:work.bacome.imapclient.eConnectionState">
            <summary>
            Connection state values.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notconnected">
            <summary>The instance is not connected and never has been.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.connecting">
            <summary>The instance is in the process of connecting.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notauthenticated">
            <summary>The instance is in the process of connecting, it is currently not authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.authenticated">
            <summary>The instance is in the process of connecting, it is currently authenticated.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.enabled">
            <summary>The instance is in the process of connecting, it is has enabled all the server features it is going to.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.notselected">
            <summary>The instance connected, there is no mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.selected">
            <summary>The instance connected, there is a mailbox selected.</summary>
        </member>
        <member name="F:work.bacome.imapclient.eConnectionState.disconnected">
            <summary>
            <para>The instance is not connected, but it was connected, or tried to connect, once.</para>
            <para>In this state some <see cref="T:work.bacome.imapclient.cIMAPClient"/> properties retain their values from when the instance was connecting/ was connected.</para>
            <para>For example the <see cref="P:work.bacome.imapclient.cIMAPClient.Capabilities"/> property may have a value in this state, where it definitely won't have one in the <see cref="F:work.bacome.imapclient.eConnectionState.notconnected"/> state.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPClient">
            <summary>
            <para>Instances of this class can connect to an IMAP server.</para>
            <para>Before calling one of the <see cref="M:work.bacome.imapclient.cIMAPClient.Connect"/> methods set the <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.Credentials"/> properties at a minimum.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/> and <see cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>.</para>
            <para>Also consider setting the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/> property.</para>
            <para>Note that the class implements <see cref="T:System.IDisposable"/>, so you should dispose instances when you are finished with them.</para>
            <para>Event callbacks are made on the synchronization context set in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.InstanceName">
            <summary>
            <para>The instance name used to tag trace messages.</para>
            <para>Set using the constructor.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext">
            <summary>
            <para>The synchronisation context on which callbacks (including events) are made.</para>
            <para>If set to null callbacks are made by the thread that discovers the need to do the callback.</para>
            <para>Defaults to the synchronisation context of the constructing thread.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.PropertyChanged">
            <summary>
            <para>Fired when a property value changes.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.ResponseText">
            <summary>
            <para>Fired when the server sends response text.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            <para>The IMAP spec says that alerts MUST be brought to the users attention.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkReceive">
            <summary>
            <para>Fired when the server sends a response.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.NetworkSend">
            <summary>
            <para>Fired when the client sends a command.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxPropertyChanged">
            <summary>
            <para>Fired when a <see cref="T:work.bacome.imapclient.cMailbox"/> instance property changes.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MailboxMessageDelivery">
            <summary>
            <para>Fired when new messages appear in a <see cref="T:work.bacome.imapclient.cMailbox"/>.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.MessagePropertyChanged">
            <summary>
            <para>Fired when a <see cref="T:work.bacome.imapclient.cMessage"/> instance property changes.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cIMAPClient.CallbackException">
            <summary>
            <para>Fired when an exception is raised by a callback.</para>
            <para>Events are fired on the synchronization context specified in <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/>.</para>
            <para>The library ignores the exception other than raising this event.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Timeout">
            <summary>
            <para>Sets the timeout for calls that involve network access.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.CancellableCount">
            <summary>
            <para>Returns the number of currently running cancellable operations.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.Cancel"/>.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Cancel">
            <summary>
            <para>Cancels currently running cancellable operations.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectionState">
            <summary>The connection state of the instance.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsUnconnected">
            <summary>True if the instance is currently unconnected.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IsConnected">
            <summary>True if the instance is currently connected.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Capabilities">
            <summary>
            <para>Returns the capabilities of the connected (or most recently connected) server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EnabledExtensions">
            <summary>
            <para>Returns the extensions that the library enabled on the connected (or most recently connected) server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ConnectedAccountId">
            <summary>
            <para>Returns the accountid of the current (or most recent) connection.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.HomeServerReferral">
            <summary>
            <para>The login referral (rfc 2221), if received.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities">
            <summary>
            <para>Capabilities that you wish the instance to ignore.</para>
            <para>Must be set before connecting.</para>
            <para>Useful for testing or if your server (or the library) has a bug in its implementation of an IMAP extension.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Server">
            <summary>
            <para>The server that the instance should connect to.</para>
            <para>Must be set before connecting.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/> or <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String)">
            <summary>
            <para>Sets the server that the instance should connect to, defaulting the port to 143 and SSL to false.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)">
            <summary>
            <para>Sets the server that the instance should connect to, specifying whether SSL is required or not.</para>
            <para>If SSL is required the port is set to 993, otherwise it is set to 143.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)">
            <summary>
            <para>Sets the server that the instance should connect to, specifying the port and whether SSL is required or not.</para>
            <para>Can't be called while connected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Credentials">
            <summary>
            <para>The credentials to be used to connect to the server.</para>
            <para>Must be set before connecting.</para>
            <para>See <see cref="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetNoCredentials">
            <summary>
            <para>Sets no credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>Useful to retrieve the capabilities of the server without connecting or when there is external authentication.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetAnonymousCredentials(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            <para>Sets anonymous credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>May fall back to LOGIN if SASL ANONYMOUS isn't available.</para>
            </summary>
            <param name="pTrace">The trace information sent to the server.</param>
            <param name="pTLSRequirement"></param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try SASL ANONYMOUS mechanism even if it isn't advertised.</param>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SetPlainCredentials(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            <para>Sets plain credentials to be used to connect to the server.</para>
            <para>Can't be called while connected.</para>
            <para>May fall back to LOGIN if SASL PLAIN isn't available.</para>
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try SASL PLAIN mechanism even if it isn't advertised.</param>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals">
            <summary>
            <para>Indicates if the caller can handle mailbox referrals.</para>
            <para>If this is set to false the instance will not return remote mailboxes in mailbox lists.</para>
            <para>Being able to handle mailbox referrals means handling the exceptions that may be raised by the library when accessing remote mailboxes.</para>
            <para>See RFC 2193, <see cref="T:work.bacome.imapclient.cUnsuccessfulCompletionException"/>, <see cref="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText"/>, <see cref="F:work.bacome.imapclient.cResponseText.Strings"/>, <see cref="T:work.bacome.imapclient.cURL"/> and <see cref="T:work.bacome.imapclient.cURI"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData">
            <summary>
            <para>Determines what details about mailboxes are available from the mailbox cache.</para>
            <para>Can't be set while connected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.NetworkWriteConfiguration">
            <summary>
            <para>Controls the size of writes to the network.</para>
            <para>You might want to limit this to increase the speed with which you can terminate the instance.</para>
            <para>Higher values are presumably more efficient.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.IdleConfiguration">
            <summary>
            <para>Sets parameters that control what the instance does while idle.</para>
            <para>Set to null to stop the instance from doing anything.</para>
            <para>If set, the instance determines that it is idle after the specified time and then issues periodic IDLE (rfc 2177) or CHECK/ NOOP IMAP commands.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.AppendStreamReadConfiguration">
            <summary>
            <para>The default control on the size of reads from streams provided to append.</para>
            <para>You might want to limit this to increase the speed with which you can terminate the instance.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchCacheItemsConfiguration">
            <summary>
            <para>The configuration that controls the number of messages fetched at one time.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyReadConfiguration">
            <summary>
            <para>The configuration that controls the number of bytes fetched from the server at one time.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.FetchBodyWriteConfiguration">
            <summary>
            <para>The configuration that controls the number of bytes written to the output stream at one time when fetching.</para>
            <para>You might want to limit this to increase the speed with which you can cancel the fetch.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Encoding">
            <summary>
            <para>The encoding to use when UTF8 (rfc 6855) is not supported directly by the server.</para>
            <para>The default value is UTF8.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientId">
            <summary>
            <para>The ID details to send to the server if it supports the ID command (rfc 2971).</para>
            <para>This is the ASCII version of the details.</para>
            <para>If the server supports UTF8 and <see cref="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8"/> is set, those details will be used in preference to these.</para>
            <para>The default details are those of the library.</para>
            <para>Set to null to send nothing.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ClientIdUTF8">
            <summary>
            <para>The ID details to send to the server if it supports the ID command (rfc 2971).</para>
            <para>This is the UTF8 version of the details.</para>
            <para>If this is set to null or the server does not support UTF8 then the <see cref="P:work.bacome.imapclient.cIMAPClient.ClientId"/> details will be used instead.</para>
            <para>The default is null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.ServerId">
            <summary>
            <para>The ID details of the connected (or last connected) server, if it supports the ID command (rfc 2971).</para>
            <para>Set during connect.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Namespaces">
            <summary>
            <para>The namespace details for the connected (or last connected) account.</para>
            <para>Set during connect.</para>
            <para>If namespaces (rfc 2342) are not supported by the server the library creates one personal namespace using the delimiter retrieved using LIST.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.Inbox">
            <summary>
            <para>The inbox of the connected (or last connected) account.</para>
            <para>Set during connect.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailboxDetails">
            <summary>
            <para>Details of the currently selected mailbox, if any.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.SelectedMailbox">
            <summary>
            <para>The currently selected mailbox, if any.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailbox(work.bacome.imapclient.cMailboxName)">
            <summary>
            <para>Returns an object that represents the named mailbox.</para>
            </summary>
            <param name="pMailboxName">The mailbox name.</param>
            <returns>An object representing the named mailbox.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.EventSubscriptionCounts">
            <summary>
            <para>Intended for debugging use.</para>
            <para>Returns the number of subscriptions to the various events.</para>
            <para>Used to check that events are being 'unsubscribed' correctly.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Dispose">
            <summary>
            Instances contain a number of disposable resources. You should call dispose when you are finished with the instance.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            Creates a new mailbox on the connected server.
            </summary>
            <param name="pMailboxName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.CreateAsync(work.bacome.imapclient.cMailboxName,System.Boolean)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Create(work.bacome.imapclient.cMailboxName,System.Boolean)"/>.
            </summary>
            <param name="pMailboxName"></param>
            <param name="pAsFutureParent"></param>
            <returns></returns>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems">
            <summary>
            Specifies the cache items that are fetched by default when message lists are generated using <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cIMAPClient.DefaultSort">
            <summary>
            Specifies the sort that is used by default when message lists are generated using <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            <para>Store flags for a set of messages.</para>
            <para>The mailbox that the messages are in must be selected.</para>
            </summary>
            <param name="pMessages">The set of messages.</param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags">The flags to store.</param>
            <param name="pIfUnchangedSinceModSeq">
            <para>The modseq to use in the unchangedsince clause of a conditional store (RFC 7162).</para>
            <para>Can only be specified if the mailbox supports RFC 7162.</para>
            <para>If the message has been modified since the specified modseq the server should fail the update.</para>
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.StoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Store(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})"/>.
            </summary>
            <param name="pMessages"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>For a set of messages ensure that the specified items are cached.</para>
            </summary>
            <param name="pMessages">The set of messages.</param>
            <param name="pItems">The set of cache items.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where the cache does NOT contain the requested items (i.e. where the fetch failed).</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.FetchAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Fetch(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>
            </summary>
            <param name="pMessages"></param>
            <param name="pItems"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List subscribed mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards.</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter.</param>
            <param name="pHasSubscribedChildren">Include in the list mailboxes that are not themselves subscribed but that have subscribed children.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.SubscribedAsync(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Subscribed(System.String,System.Nullable{System.Char},System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>.
            </summary>
            <param name="pListMailbox"></param>
            <param name="pDelimiter"></param>
            <param name="pHasSubscribedChildren"></param>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            List mailboxes using an IMAP wildcard search.
            </summary>
            <param name="pListMailbox">The search string including IMAP wildcards.</param>
            <param name="pDelimiter">The mailbox name hierarchy delimiter.</param>
            <param name="pDataSets">The sets of data that should be cached in the mailbox cache for the returned mailboxes.</param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.MailboxesAsync(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cIMAPClient.Mailboxes(System.String,System.Nullable{System.Char},work.bacome.imapclient.fMailboxCacheDataSets)"/>.
            </summary>
            <param name="pListMailbox"></param>
            <param name="pDelimiter"></param>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.Poll">
            <summary>
            Poll the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for us.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient.PollAsync">
            <summary>
            Poll the server using IMAP CHECK (if a mailbox is selected) and IMAP NOOP to see if the server has pending notifications for us.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cIMAPClient._Tests(work.bacome.trace.cTrace.cContext)">
            <summary>
            Internal library tests.
            </summary>
            <param name="pParentContext"></param>
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheDataSets">
            <summary>
            <para>Sets of data that can be fetched about a mailbox.</para>
            <para>The exact data items fetched depend on what is being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.list">
            <summary>
            <para>Data returned by the IMAP LIST command.</para>
            <para>This data affects the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item><term>Always:</term><description><see cref="P:work.bacome.imapclient.cMailbox.Exists"/>, <see cref="P:work.bacome.imapclient.cMailbox.CanHaveChildren"/>, <see cref="P:work.bacome.imapclient.cMailbox.CanSelect"/>, <see cref="P:work.bacome.imapclient.cMailbox.IsMarked"/>, <see cref="P:work.bacome.imapclient.cMailbox.IsRemote"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.children"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.HasChildren"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.specialuse"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/>, <see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/>, <see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/> etc</description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.lsub">
            <summary>
            <para>Data returned by the IMAP LSUB command.</para>
            <para>This data affects the <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/> property.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheDataSets.status">
            <summary>
            <para>Data returned by the IMAP STATUS command.</para>
            <para>This data affects the following <see cref="T:work.bacome.imapclient.cMailbox"/> properties;
            <list type="bullet">
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.messagecount"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.recentcount"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidnext"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.unseencount"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/></description></item>
            <item><term>If caching <see cref="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq"/>:</term><description><see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eStoreOperation">
            <summary>
            The type of store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.add">
            <summary>Add flags to the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.remove">
            <summary>Remove flags from the flags already set.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eStoreOperation.replace">
            <summary>Replace the flags.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fCacheAttributes">
            <summary>
            A set of IMAP message attributes that can be cached in the internal message cache.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kHeaderFieldName">
            <summary>
            Contains named message header field name constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNames">
            <summary>
            <para>A unique header field name collection.</para>
            <para>Header field names are not case sensitive.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.None">
            <summary>An empty collection.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.References">
            <summary>A collection containing the <see cref="F:work.bacome.imapclient.kHeaderFieldName.References"/> header field name.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldNames.Importance">
            <summary>A collection containing the <see cref="F:work.bacome.imapclient.kHeaderFieldName.Importance"/> header field name.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String)">
            <summary>Returns true if the collection contains the name (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.String[])">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Union(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive union.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Intersect(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive intersect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNames.Except(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>Case insensitive except.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldNameList">
            <summary>
            <para>A unique header field name list.</para>
            <para>Header field names are not case sensitive and can only be formed from <see cref="F:work.bacome.imapclient.support.cCharset.FText"/> characters.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String)">
            <summary>Returns true if the collection contains the name (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.String[])">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Returns true if the collection contains all the names (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String)">
            <summary>Adds the name to the list if it isn't already on the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.String[])">
            <summary>Adds each name to the list if it isn't already on the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds each name to the list if it isn't already on the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String)">
            <summary>Removes the name from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.String[])">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Removes the names from the list (case insensitive).</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Union(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive union.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Intersect(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive intersect.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldNameList.Except(work.bacome.imapclient.cHeaderFieldNameList)">
            <summary>Case insensitive except.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderField">
            <summary>
            Represents a message header field.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Name">
            <summary>
            The header field name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderField.Value">
            <summary>
            The header field value.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgId">
            <summary>
            Represents a header field where the value is a message-id.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgId.MsgId">
            <summary>
            The value of the field as a normalised (delimiters, quoting, comments and white space removed) message-id.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldMsgIds">
            <summary>
            Represents a header field where the value is a set of message-ids.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldMsgIds.MsgIds">
            <summary>
            The value of the field as normalised (delimiters, quoting, comments and white space removed) message-ids.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFieldImportance">
            <summary>
            Represents a header field where the value is an importance.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Low">
            <summary>The string constant for low importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Normal">
            <summary>The string constant for normal importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.High">
            <summary>The string constant for high importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFieldImportance.Importance">
            <summary>The value of the field as an importance code.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFieldImportance.FieldValue(work.bacome.imapclient.eImportance)">
            <summary>Returns the string constant associated with the passed <see cref="T:work.bacome.imapclient.eImportance"/> value.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cHeaderFields">
            <summary>
            A collection of message header fields for a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHeaderFields.None">
            <summary>An empty collection.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(System.String)">
            <summary>
            <para>Returns true if the collection has been populated with all header fields of the name specified.</para>
            <para>Note that a true return value does not mean that the collection contains any fields with the name specified, as the message may not have any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>Whether the collection has been populated with the fields of the name specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Contains(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns true if the collection has been populated with all header fields of all the names specified.</para>
            <para>Note that a true return value does not mean that the collection contains any fields with the names specified, as the message may not have any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>Whether the collection has been populated with all the fields of the names specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.ContainsNone(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns false if the collection has been populated with any header fields of the names specified.</para>
            <para>Note that a false return value does not mean that the collection contains any fields with the names specified, as the message may not have had any of those headers.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>Whether the collection has not been populated with any fields of the names specified.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.Missing(work.bacome.imapclient.cHeaderFieldNames)">
            <summary>
            <para>Returns the header field names from the provided collection of names that this collection of fields has not been populated with.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pNames">The header field names.</param>
            <returns>The header field names from the provided collection of names that this collection of fields has not been populated with.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.FirstNamed(System.String)">
            <summary>
            <para>Returns one header field of the name specified, or null if there are no header fields of that name.</para>
            <para>If the collection has not been populated with the specified header field name then this method will throw.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>A header field instance with the name specified or null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cHeaderFields.AllNamed(System.String)">
            <summary>
            <para>Returns all header fields with the header field name specified. Will return zero fields if there are no header fields of that name.</para>
            <para>If the collection has not been populated with the specified header field name then this method will throw.</para>
            <para>Header field names are case insensitive.</para>
            </summary>
            <param name="pName">The header field name.</param>
            <returns>The set of header fields with the name specified.</returns>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.References">
            <summary>
            <para>Returns the normalised (delimiters, quoting, comments and white space removed) message-ids from the references header field, or null if there was no references header field or if the references header field could not be parsed.</para>
            <para>If the collection has not been populated with the references header field then this method will throw.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cHeaderFields.Importance">
            <summary>
            <para>Returns the importance value from the importance header field, or null if there was no importance header field or if the importance header field could not be parsed.</para>
            <para>If the collection has not been populated with the importance header field then this method will throw.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eImportance">
            <summary>The message importance.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedbackItem">
            <summary>
            <para>Returned from copy operations if the server supports the UIDCOPY response code of RFC 4315.</para>
            <para>Contains a pair of UIDs of messages involved in the copy.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCopyFeedback">
            <summary>
            <para>Returned from copy operations if the server supports the UIDCOPY response code of RFC 4315.</para>
            <para>Contains pairs of UIDs of messages involved in the copy.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPropertyFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.Timeout">
            <summary>The timeout for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cPropertyFetchConfiguration.Increment">
            <summary>
            <para>The progress increment callback for the operation</para>
            <para>Called many times with an integer specifying the number of messages fetched since the last call.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Timeout">
            <summary>The timeout for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.CancellationToken">
            <summary>The cancellation token for the operation.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Increment">
            <summary>
            <para>The progress increment callback for the operation</para>
            <para>Called many times with an integer specifying the number of messages fetched since the last call.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyFetchConfiguration.Write">
            <summary>The configuration for controlling the output stream batch/ buffer size.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFetchConfiguration">
            <summary>
            <para>Allows specification of operation specific controls and callbacks.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageFetchConfiguration.SetCount">
            <summary>
            <para>The progress initialisation callback for the operation</para>
            <para>Called once at the begining of the operation with an integer specifying the number of messages that will be fetched.</para>
            <para>If <see cref="P:work.bacome.imapclient.cIMAPClient.SynchronizationContext"/> is set, the callback will be made on that synchronisation context.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eAccountType">
            <summary>
            The type of account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.none">
            <summary>The library has no idea about the account.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.anonymous">
            <summary>The account is an anonymous one.</summary>"
        </member>
        <member name="F:work.bacome.imapclient.eAccountType.userid">
            <summary>The account has a userid.</summary>"
        </member>
        <member name="T:work.bacome.imapclient.cAccountId">
            <summary>
            Describes an IMAP account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Host">
            <summary>
            The host that contains the account.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.Type">
            <summary>
            <para>The account type.</para>
            <para>If the connection was IMAP PREAUTHed then this will be <see cref="F:work.bacome.imapclient.eAccountType.none"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAccountId.UserId">
            <summary>
            The account's userid, if any.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.fCapabilities">
            <summary>
            <para>A set of server capabilities.</para>
            <para>The elements of this enum are all the capabilities that the library understands in some way.</para>
            <para>The full list of server capabilities can be found in a <see cref="T:work.bacome.imapclient.cCapabilities"/> instance.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCapabilities">
            <summary>
            A set of server capabilities.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.Capabilities">
            <summary>
            The capabilities as presented by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.AuthenticationMechanisms">
            <summary>
            The authentication mechanisms supported by the server.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCapabilities.EffectiveCapabilities">
            <summary>
            <para>The set of server capabilities that the instance is assuming.</para>
            <para>This is the set of recognised capabilities less the set that the instance has been told to ignore (see <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>).</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentials">
            <summary>
            Describes a set of credentials.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Type">
            <summary>
            The account type that the credentials give access to.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.UserId">
            <summary>
            <para>The userid for the credentials.</para>
            <para>May be null for anonymous and NONE; must not be null otherwise.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.Login">
            <summary>
            The parameters to use with the IMAP LOGIN command for these credentials.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.TryAllSASLs">
            <summary>
            Whether all the contained SASL authentication mechanisms should be tried regardless of whether they are advertised by the server or not.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.mSASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCredentials.SASLs">
            <summary>
            The set of SASL objects to try when authenticating.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentials.None">
            <summary>
            <para>An empty set of credentials.</para>
            <para>Useful for testing, checking what capabilities the server offers without connecting and for pre-authorised connections.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Anonymous(System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Generates an anonymous set of credentials.
            </summary>
            <param name="pTrace">The trace information to be sent to the server when connecting.</param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfAnonymousIsntAdvertised">Try AUTHENTICATE ANONYMOUS even if it isn't advertised.</param>
            <returns>Anonymous credentials.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cCredentials.Plain(System.String,System.String,work.bacome.imapclient.eTLSRequirement,System.Boolean)">
            <summary>
            Generates a plain set of credentials.
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement">The TLS requirement for these credentials to be used.</param>
            <param name="pTryAuthenticateEvenIfPlainIsntAdvertised">Try AUTHENTICATE PLAIN even if it isn't advertised.</param>
            <returns>Plain credentials.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cLogin">
            <summary>
            Parameters to use with the IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cLogin.TLSRequirement">
            <summary>
            The TLS requirement for the IMAP LOGIN command to be used with this userid and password.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cLogin.TryConstruct(System.String,System.String,work.bacome.imapclient.eTLSRequirement,work.bacome.imapclient.cLogin@)">
            <summary>
            <para>IMAP LOGIN only allows ASCII userids and passwords, so this may fail.</para>
            </summary>
            <param name="pUserId"></param>
            <param name="pPassword"></param>
            <param name="pTLSRequirement"></param>
            <param name="rLogin"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cServer">
            <summary>
            Specifies an IMAP server.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String)">
            <summary>
            Port defaulted to 143 and SSL to false.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cServer.#ctor(System.String,System.Boolean)">
            <summary>
            Port defaulted to 143 if SSL is false, otherwise 993.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eTLSRequirement">
            <summary>
            <para>The TLS requirement.</para>
            <para>TLS can be established by specifying SSL in the server to be used or by the use of the IMAP STARTTLS command during connect if it is supported by the server.</para>
            <para>The library will automatically use IMAP STARTTLS if it is offered and the server does not specify SSL unless the instance has been told to ignore the STARTTLS capability.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.Server"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Boolean)"/>, <see cref="M:work.bacome.imapclient.cIMAPClient.SetServer(System.String,System.Int32,System.Boolean)"/> and <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.indifferent">
            <summary>Don't care whether TLS is active or not.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.required">
            <summary>TLS must be active.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eTLSRequirement.disallowed">
            <summary>TLS must not be active.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.eDecodingRequired">
            <summary>
            The decoding required for message data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.unknown">
            <summary>The decoding required is unknown.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.none">
            <summary>No decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.quotedprintable">
            <summary>Quoted-printable decoding is required.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.eDecodingRequired.base64">
            <summary>BASE64 decoding is required.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.fMailboxCacheData">
            <summary>
            A set of optionally cached mailbox attributes.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.subscribed">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.IsSubscribed"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.children">
            <summary>
            The backing data for <seea cref="P:work.bacome.imapclient.cMailbox.HasChildren"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.specialuse">
            <summary>
            The backing data for;
            <list type="bullet">
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsAll"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.IsArchive"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsDrafts"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsFlagged"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsJunk"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsSent"/></item>
            <item><see cref="P:work.bacome.imapclient.cMailbox.ContainsTrash"/></item>
            </list>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.messagecount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.MessageCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.recentcount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.RecentCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidnext">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.uidvalidity">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UIDValidity"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.unseencount">
            <summary>
            The backing data for <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.highestmodseq">
            <summary>
            <para>The backing data for <see cref="P:work.bacome.imapclient.cMailbox.HighestModSeq"/>.</para>
            <para>Note that the server or the mailbox may not support CONDSTORE (RFC 7162) so the cached value may not be meaningful.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.fMailboxCacheData.allstatus">
            <summary>
            The backing data retrieved by the IMAP STATUS command.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItemBase">
            <summary>
            Base class for feedback on one message from a store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.ReceivedFlagsUpdate">
            <summary>
            True if a fetch response containing the flags for this message was received during the store operation.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cStoreFeedbackItemBase.WasNotUnchangedSince">
            <summary>
            True if this message was mentioned in the RFC 7162 MODIFIED response code from the store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStoreFeedback">
            <summary>
            Contains feedback from a store operation.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback.
            </summary>
            <returns>The summary.</returns>
        </member>
        <member name="T:work.bacome.imapclient.sStoreFeedbackSummary">
            <summary>
            <para>A summary of a store operation.</para>
            <para>Each message counts towards ONE of;
            <list type="bullet">
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/></description></item>
            </list>
            </para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount"/> + <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> is the number of definite non-updates.</para>
            <para>Generally <see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount"/> > 0 indicates that a <see cref="M:work.bacome.imapclient.cIMAPClient.Poll"/> may be worth trying to get any pending updates (which should convert all the notreflects to expunged or reflects).</para>
            <para><see cref="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount"/> > 0 indicates that a blind update was done so there isn't enough information to say if the store happened or not.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UpdatedCount">
            <summary>The number where a an IMAP FETCH was received during the command execution and no IMAP MODIFIED response was received (=> _likely_ to have been updated by the command).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.WasNotUnchangedSinceCount">
            <summary>An IMAP MODIFIED response was received (=> _NOT_ updated by the command).</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ExpungedCount">
            <summary>The number where the message cache indicates that the message is expunged.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.UnknownCount">
            <summary>The number where the internal message handle isn't known (e.g. from a <see cref="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})"/>) or the message cache does not contain the flags.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.ReflectsOperationCount">
            <summary>The number where the flags in the message cache reflect the update.</summary>
        </member>
        <member name="F:work.bacome.imapclient.sStoreFeedbackSummary.NotReflectsOperationCount">
            <summary>The number where the flags in the message cache do not reflect the update.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedbackItem">
            <summary>
            Contains feedback on one message from a UID store operation.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDStoreFeedback">
            <summary>
            Contains feedback from a UID store operation.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cUIDStoreFeedback.Summary">
            <summary>
            Gets a summary of the feedback.
            </summary>
            <returns>The summary.</returns>
        </member>
        <member name="T:work.bacome.imapclient.support.cCharset">
            <summary>
            <para>Represents a set of characters that are valid in a parsing context.</para>
            <para>Each static member defines a different set of characters.</para>
            <para>Intended for internal use.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailbox">
            <summary>
            <para>Provides an API that allows interaction with an IMAP mailbox.</para>
            <para>Instances are only valid whilst the containing cIMAPClient remains connected. Reconnecting the client will not bring mailbox instances back to life.</para>
            </summary>
        </member>
        <member name="E:work.bacome.imapclient.cMailbox.MessageDelivery">
            <summary>
            <para>Fired when new messages arrive in the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Path">
            <summary>
            <para>The mailbox name including the full hierarchy.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in <see cref="P:work.bacome.imapclient.cMailbox.Path"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ParentPath">
            <summary>
            <para>The path of the parent mailbox.</para>
            <para>Will be null if there is no parent mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Name">
            <summary>
            <para>The name of the mailbox.</para>
            <para>As compared to <see cref="P:work.bacome.imapclient.cMailbox.Path"/> this does not include the hierarchy.</para>
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsInbox">
            <summary>
            <para>True if this instance represents the inbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.Exists">
            <summary>
            <para>True if the mailbox exists on the server.</para>
            <para>Subscribed mailboxes and levels in the mailbox hierarchy do not need to exist.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanHaveChildren">
            <summary>
            <para>False if the mailbox can definitely not contain child mailboxes.</para>
            <para>See the IMAP \Noinferiors flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.CanSelect">
            <summary>
            <para>True if the mailbox can be selected.</para>
            <para>See the IMAP \Noselect flag.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsMarked">
            <summary>
            <para>Indicates if the mailbox has been marked "interesting" by the server.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \Marked and \Unmarked flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsRemote">
            <summary>
            <para>If true the mailbox is definitely a remote mailbox.</para>
            <para>If the connected server supports rfc 5258, if this flag is false the mailbox is definitely not a remote mailbox, otherwise it still may be one.</para>
            <para>Remote mailboxes will never be returned by the library if the <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxReferrals"/> is set to false.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasChildren">
            <summary>
            <para>Indicates if the mailbox had children when the property was refreshed.</para>
            <para>Null indicates that the server didn't say either way.</para>
            <para>See the IMAP \HasChildren and \HasNoChildren flags.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsAll">
            <summary>
            <para>If true the mailbox was marked with the IMAP \All flag indicating that the mailbox contains all messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsArchive">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Archive flag indicating that the mailbox contains the message archive.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsDrafts">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Drafts flag indicating that the mailbox contains draft messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsFlagged">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Flagged flag indicating that the mailbox contains flagged messages.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsJunk">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Junk flag indicating that the mailbox contains junk mail.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsSent">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Sent flag indicating that the mailbox contains copies of messages that have been sent.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ContainsTrash">
            <summary>
            <para>If true the mailbox was marked with the IMAP \Trash flag indicating that the mailbox contains copies of messages that are deleted.</para>
            <para>Null indicates that the specialuse flags are not being cached, see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSubscribed">
            <summary>
            <para>Indicates if this mailbox is subscribed to.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageCount">
            <summary>
            <para>The number of messages in the mailbox.</para>
            <para>Null indicates that the messagecount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.RecentCount">
            <summary>
            <para>The number of recent messages in the mailbox.</para>
            <para>Null indicates that the recentcount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>This property always has an up-to-date value when the mailbox is selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNext">
            <summary>
            <para>The predicted UID that will be given to the next new message entering the mailbox.</para>
            <para>Null indicates that the uidnext is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected, zero indicates that the value is unknown.</para>
            <para>When the mailbox is selected this property may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount"/> for the potential inaccuracy in this property value.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNextUnknownCount">
            <summary>
            <para>This is the number of messages that arrived since the mailbox was opened for which the library has not seen the value of the UID.</para>
            <para>Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UIDNext"/> is.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDValidity">
            <summary>
            <para>The UIDValidity of the mailbox.</para>
            <para>Null indicates that the mailbox does not support UIDs or that the UIDValidity is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>).</para>
            <para>This property always has a value when the mailbox is selected, however zero indicates that the server does not support UIDs. (Also see <see cref="P:work.bacome.imapclient.cMailbox.UIDNotSticky"/>.)</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenCount">
            <summary>
            <para>The number of unseen messages in the mailbox.</para>
            <para>Null indicates that the unseencount is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but it may not be up-to-date: see the value of <see cref="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount"/> for the potential inaccuracy of this property value.</para>
            <para>To initialise the value of this property value when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/>.</para>
            <para>To maintain the value of this property when the mailbox is selected use <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/> on the new messages that arrive (see <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/>).</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UnseenUnknownCount">
            <summary>
            <para>This is the number of messages for which the library is unsure of the value of the IMAP \Seen flag.</para>
            <para>Indicates how inaccurate the <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/> is.</para>
            <para>To keep this value at zero see the technique outlined here: <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HighestModSeq">
            <summary>
            <para>See RFC 7162.</para>
            <para>Null indicates that the highestmodseq is not being cached (see <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>) or was not sent by the server when requested.</para>
            <para>When the mailbox is selected this property will always have a value but zero indicates that RFC 7162 is not supported on the mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelected">
            <summary>
            <para>Indicates if the mailbox has been selected once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox has been selected for update once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.HasBeenSelectedReadOnly">
            <summary>
            <para>Indicates if the mailbox has been selected readonly once in this session.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.UIDNotSticky">
            <summary>
            <para>Indicates if the mailbox does not have persistent UIDs.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.MessageFlags">
            <summary>
            <para>The defined flags in the mailbox.</para>
            <para>Null if the mailbox has never been selected.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ForUpdatePermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected for update.</para>
            <para>Null if the mailbox has never been selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.ReadOnlyPermanentFlags">
            <summary>
            <para>The flags that the client can change permanently in this mailbox when it is selected readonly.</para>
            <para>Null if the mailbox has never been selected readonly.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelected">
            <summary>
            <para>Indicates if the mailbox is currently the selected mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsSelectedForUpdate">
            <summary>
            <para>Indicates if the mailbox is currently selected for update.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailbox.IsAccessReadOnly">
            <summary>
            <para>Indicates if the mailbox is currently selected but the mailbox can't be modified.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Gets the mailbox's child mailboxes.</para>
            </summary>
            <param name="pDataSets">
            <para>The sets of data to retrieve when getting the child mailboxes.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MailboxesAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Mailboxes(work.bacome.imapclient.fMailboxCacheDataSets)"/>
            </summary>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Gets the mailbox's subscribed child mailboxes.</para>
            <para>Note that mailboxes that do not currently exist may be returned.</para>
            </summary>
            <param name="pDescend">If true all descendants are returned (not just children, also grandchildren ...)</param>
            <param name="pDataSets">
            <para>The sets of data to retrieve when getting the child mailboxes.</para>
            <para>See <see cref="P:work.bacome.imapclient.cIMAPClient.MailboxCacheData"/>.</para>
            </param>
            <returns>A list of mailboxes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribedAsync(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Subscribed(System.Boolean,work.bacome.imapclient.fMailboxCacheDataSets)"/>.
            </summary>
            <param name="pDescend"></param>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)">
            <summary>
            <para>Creates a child mailbox of this mailbox.</para>
            </summary>
            <param name="pName">The mailbox name to use.</param>
            <param name="pAsFutureParent">Indicate to the IMAP server that you intend to create child mailboxes in the new mailbox.</param>
            <returns>An object representing the newly created mailbox.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CreateChildAsync(System.String,System.Boolean)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.CreateChild(System.String,System.Boolean)"/>.
            </summary>
            <param name="pName"></param>
            <param name="pAsFutureParent"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Subscribe">
            <summary>
            <para>Subscribe to this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SubscribeAsync">
            <summary>
            <para>Subscribe to this mailbox.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Unsubscribe">
            <summary>
            <para>Unsubscribe from this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UnsubscribeAsync">
            <summary>
            <para>Unsubscribe from this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Rename(System.String)">
            <summary>
            <para>Change the name of this mailbox.</para>
            <para>Note that this leaves the mailbox in its containing mailbox, just changing the last part of the path hierarchy.</para>
            </summary>
            <param name="pName">The new mailbox name.</param>
            <returns>An object representing the newly created mailbox.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.RenameAsync(System.String)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Rename(System.String)"/>.
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Delete">
            <summary>
            <para>Delete this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.DeleteAsync">
            <summary>
            <para>Delete this mailbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)">
            <summary>
            <para>Select this mailbox.</para>
            <para>Selecting a mailbox un-selects the previously selected mailbox (if there was one).</para>
            </summary>
            <param name="pForUpdate">Indicates if the mailbox should be selected for update or not</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SelectAsync(System.Boolean)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Select(System.Boolean)"/>.
            </summary>
            <param name="pForUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)">
            <summary>
            <para>Expunge messages marked with the deleted flag (see <see cref="P:work.bacome.imapclient.cMessage.Deleted"/>) from the mailbox.</para>
            <para>Setting <paramref name="pAndUnselect"/> to true also un-selects the mailbox. This reduces the amount of network activity associated with the expunge.</para>
            </summary>
            <param name="pAndUnselect">Indicates if the mailbox should also be un-selected.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.ExpungeAsync(System.Boolean)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Expunge(System.Boolean)"/>.
            </summary>
            <param name="pAndUnselect"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            <para>Get a list of messages contained in the mailbox from the server.</para>
            </summary>
            <param name="pFilter">
            <para>The filter to use to restrict the set of messages returned.</para>
            <para>Use the static members and operators of the <see cref="T:work.bacome.imapclient.cFilter"/> class to create an optional message filter.</para>
            </param>
            <param name="pSort">
            <para>The sort to use to order the set of messages returned.</para>
            <para>Use the static members of the <see cref="T:work.bacome.imapclient.cSortItem"/> class as parameters to a <see cref="T:work.bacome.imapclient.cSort"/> constructor to create an optional sort specification.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultSort"/>) will be used.</para>
            </param>
            <param name="pItems">
            <para>The set of message cache items to ensure are cached for the returned messages.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</para>
            </param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Messages(work.bacome.imapclient.cFilter,work.bacome.imapclient.cSort,work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cMessageFetchConfiguration)"/>.
            </summary>
            <param name="pFilter"></param>
            <param name="pSort"></param>
            <param name="pItems"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>Get a list of messages from a set of handles.</para>
            <para>Useful when handling the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event.</para>
            </summary>
            <param name="pHandles">A set of message handles.</param>
            <param name="pItems">
            <para>The set of message cache items to ensure are cached for the returned messages.</para>
            <para>If not specified the default (<see cref="P:work.bacome.imapclient.cIMAPClient.DefaultCacheItems"/>) will be used.</para>
            </param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages where the cache does NOT contain the requested items (i.e. where the fetch failed).</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>.
            </summary>
            <param name="pHandles"></param>
            <param name="pItems"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCount">
            <summary>
            <para>When the mailbox is selected use this method to initialise the <see cref="P:work.bacome.imapclient.cMailbox.UnseenCount"/>.</para>
            <para>IMAP does not have a mechanism for getting the unseencount when the mailbox is selected.</para>
            <para>Once the value is initialised it needs to be maintained by fetching the flags of newly arrived messages.</para>
            <para>You need to handle the <see cref="E:work.bacome.imapclient.cMailbox.MessageDelivery"/> event and use the <see cref="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.support.iMessageHandle},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/> method to achieve this.</para>
            </summary>
            <returns>A list of unseen message handles.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.SetUnseenCountAsync">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.SetUnseenCount"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>
            <para>Resolve a UID to a message instance and ensure that the specified items are cached.</para>
            </summary>
            <param name="pUID">The UID to resolve.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <returns>An object representing the message.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessageAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Message(work.bacome.imapclient.cUID,work.bacome.imapclient.cCacheItems)"/>.
            </summary>
            <param name="pUID"></param>
            <param name="pItems"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Messages(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            <para>Resolve a set of UIDs to message instances and ensure that the specified items are cached.</para>
            </summary>
            <param name="pUIDs">The UIDs to resolve.</param>
            <param name="pItems">The set of message cache items to ensure are cached for the returned messages.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
            <returns>A list of messages.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.MessagesAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cCacheItems,work.bacome.imapclient.cPropertyFetchConfiguration)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pItems"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            <para>Refresh the mailbox cache data for this mailbox.</para>
            </summary>
            <param name="pDataSets">The sets of data to refresh.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.FetchAsync(work.bacome.imapclient.fMailboxCacheDataSets)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Fetch(work.bacome.imapclient.fMailboxCacheDataSets)"/>.
            </summary>
            <param name="pDataSets"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            <para>Copy a set of messages to this mailbox.</para>
            <para>The source messages must be in the currently selected mailbox.</para>
            <para>If the server provides the UIDCOPY response code of RFC 4315 pairs of UIDs of the copied messages are returned.</para>
            </summary>
            <param name="pMessages">The set of messages to copy.</param>
            <returns>If the server provides a UIDCOPY response: the pairs of UIDs for the copied messages; otherwise null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.CopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.Copy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cMessage})"/>.
            </summary>
            <param name="pMessages"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetch a section of a message into a stream.</para>
            <para>This mailbox must be selected.</para>
            <para>Will throw if the <paramref name="pUID"/> does not exist in the mailbox.</para>
            </summary>
            <param name="pUID">The UID of the message.</param>
            <param name="pSection">The section of the message to fetch.</param>
            <param name="pDecoding">
            <para>What decoding should be applied to the fetched data.</para>
            <para>If the connected server supports RFC 3516 and the entire part (<see cref="F:work.bacome.imapclient.eSectionTextPart.all"/>) is being fetched then this may be <see cref="F:work.bacome.imapclient.eDecodingRequired.unknown"/> to get the server to do the decoding.</para>
            </param>
            <param name="pStream">The stream to write the (decoded) data into.</param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDFetchAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUID"></param>
            <param name="pSection"></param>
            <param name="pDecoding"></param>
            <param name="pStream"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            <para>Store flags for a message.</para>
            <para>This mailbox must be selected.</para>
            </summary>
            <param name="pUID">The UID of the message.</param>
            <param name="pOperation">The type of store operation.</param>
            <param name="pFlags">The flags to store.</param>
            <param name="pIfUnchangedSinceModSeq">
            <para>The modseq to use in the unchangedsince clause of a conditional store (RFC 7162).</para>
            <para>Can only be specified if the mailbox supports RFC 7162.</para>
            <para>If the message has been modified since the specified modseq the server should fail the update.</para>
            </param>
            <returns>Feedback on the success (or otherwise) of the store.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUID"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStore(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            The multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDStoreAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.eStoreOperation,work.bacome.imapclient.cSettableFlags,System.Nullable{System.UInt64})">
            <summary>
            The async multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDFetch(work.bacome.imapclient.cUID,work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pOperation"></param>
            <param name="pFlags"></param>
            <param name="pIfUnchangedSinceModSeq"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            <para>Copy a message to another mailbox.</para>
            <para>This mailbox must be selected.</para>
            <para>If the server provides the UIDCOPY response code of RFC 4315 pairs of UIDs of the copied messages are returned.</para>
            </summary>
            <param name="pUID">The UID of the message to copy.</param>
            <param name="pDestination">The destination mailbox.</param>
            <returns>If the server provides a UIDCOPY response: the pairs of UIDs for the copied messages; otherwise null.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.
            </summary>
            <param name="pUID"></param>
            <param name="pDestination"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopy(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            The multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMailbox.UIDCopyAsync(System.Collections.Generic.IEnumerable{work.bacome.imapclient.cUID},work.bacome.imapclient.cMailbox)">
            <summary>
            The async multiple message version of <see cref="M:work.bacome.imapclient.cMailbox.UIDCopy(work.bacome.imapclient.cUID,work.bacome.imapclient.cMailbox)"/>.
            </summary>
            <param name="pUIDs"></param>
            <param name="pDestination"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.fMessageProperties">
            <summary>
            Specifies a set of <see cref="T:work.bacome.imapclient.cMessage"/> properties.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMailboxName">
            <summary>
            Represents an IMAP mailbox name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Path">
            <summary>
            <para>The mailbox name including the full hierarchy.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMailboxName.Delimiter">
            <summary>
            <para>The hierarchy delimiter used in <see cref="F:work.bacome.imapclient.cMailboxName.Path"/>.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.ParentPath">
            <summary>
            <para>The path of the parent mailbox.</para>
            <para>Will be null if there is no parent mailbox.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.Name">
            <summary>
            <para>The name of the mailbox.</para>
            <para>As compared to <see cref="F:work.bacome.imapclient.cMailboxName.Path"/> this does not include the hierarchy.</para>
            </summary>
            
        </member>
        <member name="P:work.bacome.imapclient.cMailboxName.IsInbox">
            <summary>
            <para>True if this instance represents the inbox.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMailboxName.TryConstruct(System.String,System.Nullable{System.Char},work.bacome.imapclient.cMailboxName@)">
            <summary>
            <para>IMAP mailbox names have few restrictions, but this may fail.</para>
            </summary>
            <param name="pPath"></param>
            <param name="pDelimiter"></param>
            <param name="rResult"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cAddress">
            <summary>
            <para>Represents one email address.</para>
            <para>May be an individual address (<see cref="T:work.bacome.imapclient.cEmailAddress"/>) or a group address (<see cref="T:work.bacome.imapclient.cGroupAddress"/>).</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddress.DisplayName">
            <summary>
            The display name for this address.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAddresses">
            <summary>
            <para>Represents a set of <see cref="T:work.bacome.imapclient.cAddress"/>.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.SortString">
            <summary>
            The RFC 5256 sort string for the set of addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAddresses.DisplaySortString">
            <summary>
            The RFC 5957 display sort string for the set of addresses.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cEmailAddress">
            <summary>
            Represents an individual email address.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.Address">
            <summary>
            The raw address, with the punycode (RFC 3492) encoded host name.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEmailAddress.DisplayAddress">
            <summary>
            The display version of the address (currently this is the same as the raw address).
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cGroupAddress">
            <summary>
            Represents a named group of email addresses.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cGroupAddress.Addresses">
            <summary>
            The collection of group members (may be empty).
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAttachment">
            <summary>
            Provides an API that allows interaction with an IMAP attachment.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAttachment.Part">
            <summary>
            The message body part that this attachment refers to.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Type">
            <summary>
            The MIME type of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.TypeCode">
            <summary>
            The MIME type of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.SubType">
            <summary>
            The MIME subtype of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Parameters">
            <summary>
            The MIME type parameters of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentId">
            <summary>
            The MIME content-id of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Description">
            <summary>
            The MIME content description of the attachment.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ContentTransferEncoding">
            <summary>
            The MIME content transfer encoding of the attachment in text form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.DecodingRequired">
            <summary>
            The MIME content transfer encoding of the attachment in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.PartSizeInBytes">
            <summary>
            The size in bytes of the encoded attachement.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.FileName">
            <summary>
            The suggested filename if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.CreationDate">
            <summary>
            The creation date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ModificationDate">
            <summary>
            The modification date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ReadDate">
            <summary>
            The last read date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.ApproximateFileSizeInBytes">
            <summary>
            The approximate size in bytes if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cAttachment.Languages">
            <summary>
            The language(s) of the attachment.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes">
            <summary>
            <para>Gets the number of bytes that will have to come over the network to save this attachment.</para>
            <para>If the server can do the decoding this may be smaller than the <see cref="P:work.bacome.imapclient.cAttachment.PartSizeInBytes"/>.</para>
            </summary>
            <returns>The number of bytes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveSizeInBytesAsync">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            Saves the attachment to the specified file.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration">Operation specific timeout, cancellation token and progress callbacks.</param>
        </member>
        <member name="M:work.bacome.imapclient.cAttachment.SaveAsAsync(System.String,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            The async version of <see cref="M:work.bacome.imapclient.cAttachment.SaveAs(System.String,work.bacome.imapclient.cBodyFetchConfiguration)"/>.
            </summary>
            <param name="pPath"></param>
            <param name="pConfiguration"></param>
            <returns></returns>
        </member>
        <member name="T:work.bacome.imapclient.cBinarySizes">
            <summary>
            <para>A mapping from a message part to a size in bytes for message parts that can be fetched using the IMAP BINARY command (RFC 3516).</para>
            <para>Using the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> or <see cref="M:work.bacome.imapclient.cAttachment.SaveSizeInBytes"/> methods may create values in this map.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBinarySizes.None">
            <summary>
            An empty mapping.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eBodyPartTypeCode">
            <summary>
            The MIME type of a message part. RFC 2045.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eDispositionTypeCode">
            <summary>
            The disposition type of a message part. RFC 2183.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eTextBodyPartSubTypeCode">
            <summary>
            The MIME subtype of a text message part. RFC 2045.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eMultiPartBodySubTypeCode">
            <summary>
            The MIME subtype of a multipart message part. RFC 2045.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeType">
            <summary>
            Contains named MIME type constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.kMimeSubType">
            <summary>
            Contains named MIME subtype constants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPart">
            <summary>
            <para>Represents a message part.</para>
            <para>Will be one of;
            <list type="bullet">
            <item><description><see cref="T:work.bacome.imapclient.cMultiPartBody"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cSinglePartBody"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cMessageBodyPart"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cTextBodyPart"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Type">
            <summary>
            The MIME type of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.SubType">
            <summary>
            The MIME subtype of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.Section">
            <summary>
            The IMAP section identifier of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPart.TypeCode">
            <summary>
            The MIME type of the part in code form.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPart.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValue">
            <summary>
            <para>Represents an additional extension data element.</para>
            <para>Will be one of;
            <list type="bullet">
            <item><description><see cref="T:work.bacome.imapclient.cBodyPartExtensionString"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cBodyPartExtensionNumber"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cBodyPartExtensionValues"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionString">
            <summary>
            A string extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionNumber">
            <summary>
            A numeric extension data element.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionValues">
            <summary>
            A collection of extension data elements
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyParts">
            <summary>
            A collection of message parts.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartExtensionData">
            <summary>
            <para>IMAP bodystructure extension data.</para>
            <para>Will be one of;
            <list type="bullet">
            <item><description><see cref="T:work.bacome.imapclient.cMultiPartExtensionData"/></description></item>
            <item><description><see cref="T:work.bacome.imapclient.cSinglePartExtensionData"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartExtensionData.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a multipart part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartExtensionData.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartExtensionData">
            <summary>
            The IMAP bodystructure extension data of a single part message part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMultiPartBody">
            <summary>
            Represents a multipart message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.Parts">
            <summary>
            The contained parts.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMultiPartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMultiPartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyPartDisposition">
            <summary>
            RFC 2183 disposition data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Type">
            <summary>
            The disposition type in text form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.TypeCode">
            <summary>
            The disposition type in code form. 
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyPartDisposition.Parameters">
            <summary>
            The disposition parameters.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.FileName">
            <summary>
            The suggested filename if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.CreationDate">
            <summary>
            The creation date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ModificationDate">
            <summary>
            The modification date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.ReadDate">
            <summary>
            The last read date if provided. May be null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyPartDisposition.Size">
            <summary>
            The approximate size in bytes if provided. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSinglePartBody">
            <summary>
            Represents a single part message part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Parameters">
            <summary>
            The MIME type parameters of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentId">
            <summary>
            The MIME content-id of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.Description">
            <summary>
            The MIME content description of the part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ContentTransferEncoding">
            <summary>
            The MIME content transfer encoding of the part in text form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired">
            <summary>
            The MIME content transfer encoding of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes">
            <summary>
            The size in bytes of the encoded part.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSinglePartBody.ExtensionData">
            <summary>
            The IMAP bodystructure extension data for the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Disposition">
            <summary>
            The disposition of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Languages">
            <summary>
            The language(s) of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.Location">
            <summary>
            The location URI of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cSinglePartBody.ExtensionValues">
            <summary>
            Any additional extension data for the part.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageBodyPart">
            <summary>
            Represents a message part that contains a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.Envelope">
            <summary>
            The IMAP envelope of the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.BodyStructure">
            <summary>
            The IMAP bodystructure information for the encapsulated message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cMessageBodyPart.SizeInLines">
            <summary>
            The size in text lines of the encapsulated message.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessageBodyPart.Body">
            <summary>
            The IMAP body or bodystructure information for the encapsulated message, whichever is available.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cTextBodyPart">
            <summary>
            Represents a message part that contains text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SubTypeCode">
            <summary>
            The MIME subtype of the part in code form.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cTextBodyPart.SizeInLines">
            <summary>
            The size in text lines of the part.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cTextBodyPart.Charset">
            <summary>
            The character set of the text data.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameter">
            <summary>
            <para>A message part parameter.</para>
            <para>Parameters are attribute value pairs.</para>
            <para>The value may have a language associated with it.</para>
            <para>See RFC 2184.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.Name">
            <summary>
            The name of the attribute.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.RawValue">
            <summary>
            The un-decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.StringValue">
            <summary>
            The decoded value.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cBodyStructureParameter.LanguageTag">
            <summary>
            The language tag of the value (if any).
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.UIntValue">
            <summary>
            Parse the un-decoded value as a UInt.
            If the value is not a valid UInt, returns null.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cBodyStructureParameter.DateTimeValue">
            <summary>
            Parse the un-decoded value as an RFC 822 date and time.
            If the value is not a valid RFC 822 date and time, returns null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cBodyStructureParameters">
            <summary>
            Message part parameters.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cBodyStructureParameters.First(System.String)">
            <summary>
            Returns the first parameter with the specified attribute name.
            </summary>
            <param name="pName">The attribute name.</param>
            <returns>The parameter if there is at least one with a matching name, otherwise null.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cEnvelope">
            <summary>
            IMAP message envelope data.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sent">
            <summary>The message sent date. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Subject">
            <summary>The message subject. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BaseSubject">
            <summary>
            <para>The base subject as defined in RFC 5256.</para>
            <para>(i.e. with the RE: FWD: etc stripped off)</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.From">
            <summary>The message 'from' address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.Sender">
            <summary>The message sender address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.ReplyTo">
            <summary>The message repy-to address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.To">
            <summary>The message 'to' address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.CC">
            <summary>The message CC address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.BCC">
            <summary>The message BCC address(s). May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.InReplyTo">
            <summary>The normalised (delimiters, quoting, comments and white space removed) in-reply-to message-ids. May be null.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cEnvelope.MessageId">
            <summary>The normalised (delimiters, quoting, comments and white space removed) message-id of the message. May be null.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cFilter">
            <summary>
            <para>Represents a filter that can be passed to the server to restrict the set of messages returned.</para>
            <para>Use the static members of the class to create cFilter instances and the &amp;, | and ! operators to combine the filters together.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.All">
            <summary>A filter that passes everything through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.MSN">
            <summary>Use this member to generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.UID">
            <summary>Use this member to generate UID filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.First">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Last">
            <summary>Use this member to help generate message sequence number filters.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Answered">
            <summary>A filter that passes only answered messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Flagged">
            <summary>A filter that passes only flagged messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Deleted">
            <summary>A filter that passes only deleted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Seen">
            <summary>A filter that passes only seen messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Draft">
            <summary>A filter that passes only draft messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Recent">
            <summary>A filter that passes only recent messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Forwarded">
            <summary>A filter that passes only forwarded messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.SubmitPending">
            <summary>A filter that passes only submitpending messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Submitted">
            <summary>A filter that passes only submitted messages through.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.BCC">
            <summary>Use this member to generate filters on the content of the message's BCC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Body">
            <summary>Use this member to generate filters on the content of the message's 'body' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.CC">
            <summary>Use this member to generate filters on the content of the message's CC data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.From">
            <summary>Use this member to generate filters on the content of the message's 'from' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Subject">
            <summary>Use this member to generate filters on the content of the message's 'subject' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Text">
            <summary>Use this member to generate filters on the content of the message's 'text' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.To">
            <summary>Use this member to generate filters on the content of the message's 'to' data.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Received">
            <summary>Use this member to generate filters on the message's internal date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Sent">
            <summary>Use this member to generate filters on the message's sent date.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Size">
            <summary>Use this member to generate filters on the message's size.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.Importance">
            <summary>Use this member to generate filters on the message's importance.</summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilter.False">
            <summary>A filter that passes nothing through.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])">
            <summary>Use this member to generate filters on the message's flags.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)">
            <summary>Use this member to generate filters on the message's flags.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)">
            <summary>Use this member to generate filters on the contents of a specified header field.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.HasHeaderField(System.String)">
            <summary>Use this member to generate filters on the existence of a specified header field.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseAnd(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>Use this operator to combine two filters.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_BitwiseOr(work.bacome.imapclient.cFilter,work.bacome.imapclient.cFilter)">
            <summary>Use this operator to combine two filters.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilter.op_LogicalNot(work.bacome.imapclient.cFilter)">
            <summary>Use this operator to negate a filter.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilter.sCTorParams">
            <summary>Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterHandleRelativity">
            <summary>The type of message sequence number comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterPart">
            <summary>The message attribute being filtered by. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterDate">
            <summary>The message date being filtered by. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterDateCompare">
            <summary>The type of date comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterSizeCompare">
            <summary>The type of size comparison. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.eFilterEnd">
            <summary>The end of the message sequence. Intended for internal use.</summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNRelativity">
            <summary>
            <para>Represents a message sequence number message filter.</para>
            <para>Use the static member <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNOffset">
            <summary>
            <para>Specifies an offset from a specific message or from the first message in the mailbox or from the last message in the mailbox.</para>
            <para>Use <see cref="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)"/> or the static members <see cref="F:work.bacome.imapclient.cFilter.First"/> or <see cref="F:work.bacome.imapclient.cFilter.Last"/> to generate instances of this class.</para>
            <para>Use instances of this class with the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> static member to generate message sequence number filters.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterEnd">
            <summary>
            <para>Represents either the first message in the mailbox or the last message in the mailbox.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.First"/> and <see cref="F:work.bacome.imapclient.cFilter.Last"/> static instances of this class to generate offsets to use with the static <see cref="F:work.bacome.imapclient.cFilter.MSN"/> to generate message sequence number filters.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterEnd.MSNOffset(System.Int32)">
            <summary>
            Generates an offset from the end of the mailbox that the instance represents.
            </summary>
            <param name="pOffset">The number of messages to offset by.</param>
            <returns>The offset.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSN">
            <summary>
            <para>The operators defined on this class generate message sequence number filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.MSN"/> static instance of this class to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;= and &gt;=.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.cMessage"/> or to a <see cref="T:work.bacome.imapclient.cFilterMSNOffset"/>.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUIDIn">
            <summary>
            <para>Represents a UID message filter.</para>
            <para>Use the static member <see cref="F:work.bacome.imapclient.cFilter.UID"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterUID">
            <summary>
            <para>The operators defined on this class generate message UID filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.UID"/> static instance of this class to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;=, &gt;=, == and !=.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.cUID"/> instance.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterFlagsContain">
            <summary>
            <para>Represents a message flag filter.</para>
            <para>Use the static methods <see cref="M:work.bacome.imapclient.cFilter.FlagsContain(work.bacome.imapclient.cFetchableFlags)"/> or <see cref="M:work.bacome.imapclient.cFilter.FlagsContain(System.String[])"/> to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPartContains">
            <summary>
            <para>Represents a filter on the content of a message part.</para>
            <para>Use the <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method on the following static members of <see cref="T:work.bacome.imapclient.cFilter"/> to generate these;
            <list type="bullet">
            <item><description><see cref="F:work.bacome.imapclient.cFilter.BCC"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Body"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.CC"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.From"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Subject"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Text"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.To"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterPart">
            <summary>
            <para>The <see cref="M:work.bacome.imapclient.cFilterPart.Contains(System.String)"/> method of this class generates a message content filter.</para>
            <para>Use the following static instances of this class to do this;
            <list type="bullet">
            <item><description><see cref="F:work.bacome.imapclient.cFilter.BCC"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Body"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.CC"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.From"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Subject"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Text"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.To"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cFilterPart.Contains(System.String)">
            <summary>
            Generates an object that represents a filter on message content.
            </summary>
            <param name="pContains"></param>
            <returns>An object that represents a filter on message content.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDateCompare">
            <summary>
            <para>Represents a filter on a message date.</para>
            <para>Use the following static members of <see cref="T:work.bacome.imapclient.cFilter"/> to generate these;
            <list type="bullet">
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Received"/></description></item>
            <item><description><see cref="F:work.bacome.imapclient.cFilter.Sent"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterDate">
            <summary>
            <para>The operators defined on this class generate message date filters.</para>
            <para>Use the static instances of this class, <see cref="F:work.bacome.imapclient.cFilter.Received"/> and <see cref="F:work.bacome.imapclient.cFilter.Sent"/>, to do this.</para>
            <para>The operators defined are; &lt;, &gt;, &lt;=, &gt;=, == and !=.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterHeaderFieldContains">
            <summary>
            <para>Represents a message header field content filter.</para>
            <para>Use the <see cref="M:work.bacome.imapclient.cFilter.HeaderFieldContains(System.String,System.String)"/> static method to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSizeCompare">
            <summary>
            <para>Represents a message size filter.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Size"/> static member to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterSize">
            <summary>
            <para>The operators defined on this class generate message size filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Size"/> static instance of this class to do this.</para>
            <para>The &lt; and &gt; operators are defined.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterImportance">
            <summary>
            <para>The operators defined on this class generate message importance filters.</para>
            <para>Use the <see cref="F:work.bacome.imapclient.cFilter.Importance"/> static instance of this class to do this.</para>
            <para>The == and != operators are defined.</para>
            <para>Use the operators to compare to a <see cref="T:work.bacome.imapclient.eImportance"/> value.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterAnd">
            <summary>
            <para>Represents the logical and combination of a number of filters.</para>
            <para>Use the &amp; operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterOr">
            <summary>
            <para>Represents the logical or combination of two filters.</para>
            <para>Use the | operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterNot">
            <summary>
            <para>Represents the negation of a filter.</para>
            <para>Use the ! operator defined on the <see cref="T:work.bacome.imapclient.cFilter"/> class to generate these.</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessage">
            <summary>
            <para>Provides an API that allows interaction with an IMAP message.</para>
            <para>Instances are only valid whilst the containing mailbox remains selected. Re-selecting a mailbox will not bring the message instances back to life.</para>
            <para>Instances are only valid whilst the containing mailbox has the same UIDValidity.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Expunged">
            <summary>
            True if the server has told us that the message has been expunged.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Envelope">
            <summary>
            <para>The IMAP envelope data of the message.</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sent">
            <summary>
            <para>The sent date of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Subject">
            <summary>
            <para>The subject of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BaseSubject">
            <summary>
            <para>The base subject (as defined in RFC 5256: with the RE: FWD: etc stripped off) of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.From">
            <summary>
            <para>The 'from' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Sender">
            <summary>
            <para>The 'sender' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ReplyTo">
            <summary>
            <para>The 'reply-to' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.To">
            <summary>
            <para>The 'to' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.CC">
            <summary>
            <para>The 'CC' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BCC">
            <summary>
            <para>The 'BCC' addresses of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.InReplyTo">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) 'in-reply-to' message-ids of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.MessageId">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) message-id of the message (from the <see cref="P:work.bacome.imapclient.cMessage.Envelope"/>).</para>
            <para>If the internal message cache does not contain the envelope data of the message, it will be fetched from the server.</para>
            <para>May be null.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flags">
            <summary>
            <para>The flags set for the message.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Answered">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetAnswered">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.Answered"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Flagged">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Flagged"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Deleted">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Deleted"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Seen">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Seen"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Draft">
            <summary>
            <para>Get and set the <see cref="F:work.bacome.imapclient.kMessageFlagName.Draft"/> flag on the message.</para>
            <para>When getting the value, if the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Recent">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Recent"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Forwarded">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetForwarded">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.Forwarded"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.SubmitPending">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.SetSubmitPending">
            <summary>Add the <see cref="F:work.bacome.imapclient.kMessageFlagName.SubmitPending"/> flag to the message flags.</summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Submitted">
            <summary>
            <para>True if the flags contain the <see cref="F:work.bacome.imapclient.kMessageFlagName.Submitted"/> flag.</para>
            <para>If the internal message cache does not contain flags for the message, they will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Received">
            <summary>
            <para>The IMAP internaldate for the message.</para>
            <para>If the internal message cache does not contain the internaldate of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Size">
            <summary>
            <para>The size of the entire message in bytes.</para>
            <para>If the internal message cache does not contain the size of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.UID">
            <summary>
            <para>The IMAP UID of the message.</para>
            <para>If the internal message cache does not contain the UID of the message, it will be fetched from the server.</para>
            <para>May be null if the server does not support unique identifiers.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.ModSeq">
            <summary>
            <para>The modification sequence number of the message.</para>
            <para>If the internal message cache does not contain a modseq for the message, it will be fetched from the server.</para>
            <para>Will be 0 if the mailbox does not support CONDSTORE.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.BodyStructure">
            <summary>
            <para>The IMAP bodystructure of the message.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Attachments">
            <summary>
            <para>Returns the list of message attachments.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines an attachment as a message part with a disposition of ‘attachment’.</para>
            <para>If there are alternate versions of an attachment only one of the alternates is included in the returned list (the first one).</para>
            <para>The returned list may be empty.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.PlainTextSizeInBytes">
            <summary>
            <para>The size in bytes of the plain text parts of the message.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.</para>
            <para>If there are alternate versions of a part only one of the alternates is used in calculating the size (the first one).</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.References">
            <summary>
            <para>The normalised (delimiters, quoting, comments and white space removed) message-ids from the references header field, or null if there was no references header field or if the references header field could not be parsed.</para>
            <para>If the internal message cache does not contain the references header field of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cMessage.Importance">
            <summary>
            <para>The importance value from the importance header field, or null if there was no importance header field or if the importance header field could not be parsed.</para>
            <para>If the internal message cache does not contain the importance header field of the message, it will be fetched from the server.</para>
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)">
            <summary>
            <para>Ensures that the internal message cache contains the specified items for this message instance.</para>
            <para>The missing items will be fetched from the server.</para>
            </summary>
            <param name="pItems">
            <para>The items required in the cache.</para>
            <para>Note that the <see cref="T:work.bacome.imapclient.cCacheItems"/> has implicit conversions from other types including <see cref="T:work.bacome.imapclient.fMessageProperties"/> (so you can use values of those types as parameters to this method).</para>
            </param>
            <returns>
            <para>True if the fetch populated the cache with the requested items, false otherwise.</para>
            <para>False indicates that the message is expunged.</para>
            </returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cCacheItems)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cCacheItems)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)">
            <summary>
            <para>Returns the fetch size in bytes of a <see cref="T:work.bacome.imapclient.cSinglePartBody"/> part of this message.</para>
            <para>This may be smaller than the <see cref="F:work.bacome.imapclient.cSinglePartBody.SizeInBytes"/> if the part needs decoding (<see cref="F:work.bacome.imapclient.cSinglePartBody.DecodingRequired"/>) and the server supports RFC 3516.</para>
            <para>This method may have to fetch the size from the server. (The size will be cached in the internal message cache.)</para>
            <para></para>
            </summary>
            <param name="pPart">The part to get the size for.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchSizeInBytesAsync(work.bacome.imapclient.cSinglePartBody)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.MSNOffset(System.Int32)">
            <summary>
            <para>Generates message sequence number offset for use in message filtering.</para>
            <para>See <see cref="F:work.bacome.imapclient.cFilter.MSN"/> - a static instance of <see cref="T:work.bacome.imapclient.cFilterMSN"/>.</para>
            </summary>
            <param name="pOffset">The offset from this message's sequence number.</param>
            <returns>A message sequence number offset.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainText">
            <summary>
            <para>Fetches the message's plain text parts from the server, decodes them, and concatenates them yielding the returned value.</para>
            <para>If the internal message cache does not contain the bodystructure of the message, it will be fetched from the server.</para>
            <para>The library defines plain text parts as parts with a MIME type of text/plain and without a disposition of 'attachment'.</para>
            <para>If there are alternate versions of a part only one of the alternates is used in generating the plain text (the first one).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.PlainTextAsync">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.PlainText"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)">
            <summary>
            <para>Fetches the specified part from the server, decodes, and returns the data in a string.</para>
            </summary>
            <param name="pPart">The part to fetch.</param>
            <returns>The decoded data of the message part.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cTextBodyPart)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cTextBodyPart)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)">
            <summary>
            <para>Fetches the specified message section from the server as text (without any content-transfer-decoding) and attempts to return the data as a string.</para>
            </summary>
            <param name="pSection">The section to fetch.</param>
            <returns>The raw data of the section as a string.</returns>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetches the specified part from the server and writes the (possibly decoded) bytes into the provided stream.</para>
            <para>Any decoding required may be done client-side or server-side (if the server supports RFC 3516).</para>
            <para>To calculate the number of bytes that have to be fetched, use the <see cref="M:work.bacome.imapclient.cMessage.FetchSizeInBytes(work.bacome.imapclient.cSinglePartBody)"/> method. (This is useful if you are intending to display a progress bar.)</para>
            <para>Optionally you may specify an operation specific timeout, cancellation token, progress callback and write size controller in the <paramref name="pConfiguration"/> parameter.</para>
            </summary>
            <param name="pPart">The part to fetch.</param>
            <param name="pStream">The stream to write into.</param>
            <param name="pConfiguration">Optionally use this parameter to specify an operation specific timeout, cancellation token, progress callback and write size controller.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSinglePartBody,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.Fetch(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>
            <para>Fetches the specified section from the server, applying the specified decoding, and writing the resulting bytes into the provided stream.</para>
            <para>Any decoding required may be done client-side or server-side (if the server supports RFC 3516).</para>
            <para>Optionally you may specify an operation specific timeout, cancellation token, progress callback and write size controller in the <paramref name="pConfiguration"/> parameter.</para>
            </summary>
            <param name="pSection">The section to fetch.</param>
            <param name="pDecoding">The content-transfer-decoding to apply.</param>
            <param name="pStream">The stream to write to</param>
            <param name="pConfiguration">Optionally use this parameter to specify an operation specific timeout, cancellation token, progress callback and write size controller.</param>
        </member>
        <member name="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)">
            <summary>The async version of <see cref="M:work.bacome.imapclient.cMessage.FetchAsync(work.bacome.imapclient.cSection,work.bacome.imapclient.eDecodingRequired,System.IO.Stream,work.bacome.imapclient.cBodyFetchConfiguration)"/>.</summary>
        </member>
        <member name="T:work.bacome.imapclient.kMessageFlagName">
            <summary>
            Contains named IMAP flag name contants.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlags">
            <summary>
            A read only collection of IMAP message flags.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSettableFlags">
            <summary>
            <para>A read only collection of settable IMAP message flags.</para>
            <para>(e.g. It is not possible to set the \Recent flag.)</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.None">
            <summary>An empty set of flags.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Answered">
            <summary>A set of flags containing just the \Answered flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Flagged">
            <summary>A set of flags containing just the \Flagged flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Deleted">
            <summary>A set of flags containing just the \Deleted flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Seen">
            <summary>A set of flags containing just the \Seen flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Draft">
            <summary>A set of flags containing just the \Draft flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Forwarded">
            <summary>A set of flags containing just the $Forwarded flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.SubmitPending">
            <summary>A set of flags containing just the $SubmitPending flag.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSettableFlags.Submitted">
            <summary>A set of flags containing just the $Submitted flag.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlags">
            <summary>
            <para>A read only collection of fetchable IMAP message flags.</para>
            <para>(e.g. It is not possible to set \Recent flag however it is possible to receive it set on a message.)</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPermanentFlags">
            <summary>
            <para>A read only collection of IMAP message flags that it is possible to set permanently on messages in a mailbox.</para>
            <para>(e.g. This may include the \* flag indicating that it is possible to create new flags by setting them.)</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cMessageFlagList">
            <summary>
            A list of IMAP message flags.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSettableFlagList">
            <summary>
            <para>A list of settable IMAP message flags.</para>
            <para>(e.g. It is not possible to set the \Recent flag.)</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFetchableFlagList">
            <summary>
            <para>A list of fetchable IMAP message flags.</para>
            <para>(e.g. It is not possible to set \Recent flag however it is possible to receive it set on a message.)</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPermanentFlagList">
            <summary>
            <para>A list of IMAP message flags that it is possible to set permanently on messages in a mailbox.</para>
            <para>(e.g. This may include the \* flag indicating that it is possible to create new flags by setting them.)</para>
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCacheItems">
            <summary>
            <para>A set of items that can be cached in the internal message cache.</para>
            <para>Note that the class has three implicit conversions;
            <list type="bullet">
            <item><description> from <see cref="T:work.bacome.imapclient.fMessageProperties"/></description></item>
            <item><description> from <see cref="T:work.bacome.imapclient.fCacheAttributes"/></description></item>
            <item><description> from <see cref="T:work.bacome.imapclient.cHeaderFieldNames"/></description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.None">
            <summary>
            An empty set of items.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Attributes">
            <summary>
            A set of IMAP message attributes.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCacheItems.Names">
            <summary>
            A collection of header field names.
            </summary>
        </member>
        <member name="P:work.bacome.imapclient.cCacheItems.IsNone">
            <summary>
            Indicates if the set is empty.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eSectionTextPart">
            <summary>
            <para>Describes a text part of an IMAP message section (see <see cref="T:work.bacome.imapclient.cSection"/>).</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.all">
            <sumary>The entire part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.header">
            <sumary>The entire header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfields">
            <sumary>Specified headers from the header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot">
            <sumary>All headers other than the specified headers from the header part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.text">
            <sumary>The entire text part.</sumary> 
        </member>
        <member name="F:work.bacome.imapclient.eSectionTextPart.mime">
            <sumary>The mime headers of the part.</sumary> 
        </member>
        <member name="T:work.bacome.imapclient.cSection">
            <summary>
            <para>Describes a section of an IMAP message.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.All">
            <summary>
            Describes the section of a message that includes the entire message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Header">
            <summary>
            Describes the entire header fields section of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Text">
            <summary>
            Describes the entire text section of a message.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Part">
            <summary>
            <para>The part of the message that this section describes.</para>
            <para>A dot separated set of integers e.g. 1, 2, 1.3, 1.1.4.5</para>
            <para>May be null if the section refers to the whole message.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.TextPart">
            <summary>
            The text part of the <see cref="F:work.bacome.imapclient.cSection.Part"/> that this section describes.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSection.Names">
            <summary>
            The header fields included (<see cref="F:work.bacome.imapclient.eSectionTextPart.headerfields"/>) or excluded (<see cref="F:work.bacome.imapclient.eSectionTextPart.headerfieldsnot"/>) from this section.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.eSortItem">
            <summary>Items that can be sorted by.</summary> 
        </member>
        <member name="T:work.bacome.imapclient.cSortItem">
            <summary>
            <para>An item to sort messages by.</para>
            <para>Use the static instances that are members of the class to improve readability of your sort specification.</para>
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Received">
            <summary>Ascending by message internal date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CC">
            <summary>Ascending by the first address in the message CC.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Sent">
            <summary>Ascending by the message sent date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.From">
            <summary>Ascending by the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Size">
            <summary>Ascending by the message size.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Subject">
            <summary>Ascending by the message subject.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.To">
            <summary>Ascending by the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFrom">
            <summary>Ascending by the display version (see RFC 5957) of the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayTo">
            <summary>Ascending by the display version (see RFC 5957) of the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ReceivedDesc">
            <summary>Descending by message internal date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.CCDesc">
            <summary>Descending by the first address in the message CC.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SentDesc">
            <summary>Descending by the message sent date.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.FromDesc">
            <summary>Descending by the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SizeDesc">
            <summary>Descending by the message size.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.SubjectDesc">
            <summary>Descending by the message subject.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.ToDesc">
            <summary>Descending by the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayFromDesc">
            <summary>Descending by the display version (see RFC 5957) of the first address in the message 'from'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.DisplayToDesc">
            <summary>Descending by the display version (see RFC 5957) of the first address in the message 'to'.</summary> 
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Item">
            <summary>
            The item being sorted by.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Attribute">
            <summary>
            If sorting is to be done client-side this is the message cache attribute that is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSortItem.Desc">
            <summary>
            Indicates descending sort.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSort">
            <summary>
            Defines a sort order for message lists.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.None">
            <summary>
            An instance representing that no sorting is required.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cSort.Items">
            <summary>
            A collection of the items in this sort.
            </summary>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.support.iMessageHandle,work.bacome.imapclient.support.iMessageHandle)">
            <summary>
            Compares two message handles according to the sort definition.
            If the attributes required for the comparision are not in the message cache the results are undefined.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Compare(work.bacome.imapclient.cMessage,work.bacome.imapclient.cMessage)">
            <summary>
            Compares two messages according to the sort definition.
            If the attributes required for the comparision are not in the message cache the attributes are fetched.
            </summary>
            <param name="pX"></param>
            <param name="pY"></param>
            <returns></returns>
        </member>
        <member name="M:work.bacome.imapclient.cSort.Attributes(System.Boolean@)">
            <summary>
            Returns the set of message attributes required by this sort and whether SORT=DISPLAY (RFC 5957) support is required for the server to do the sort.
            </summary>
            <param name="rDisplay">Returns true if SORT=DISPLAY (RFC 5957) support is required for the server to do the sort.</param>
            <returns>The set of message attributes required by this sort.</returns>
        </member>
        <member name="T:work.bacome.imapclient.cUID">
            <summary>
            An IMAP message UID
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResultType">
            <summary>
            The IMAP command completion type
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCommandResult.ResponseText">
            <summary>
            The IMAP response text associated with the command completion
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedString">
            <summary>
            Represents a string that includes language information as per RFC 2231.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedString.Parts">
            <summary>
            The parts of the string. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCulturedStringPart">
            <summary>
            Represents part of a string that includes language information as per RFC 2231.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.String">
            <summary>
            The decoded text.
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCulturedStringPart.LanguageTag">
            <summary>
            Optional language of the text. May be null.
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cIMAPException">
            <summary>
            Base class for all of the library's custom exceptions
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnsuccessfulCompletionException">
            <summary>
            Thrown on a 'NO' command response
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.ResponseText">
            <summary>
            The response text associated with the 'NO'
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnsuccessfulCompletionException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cProtocolErrorException">
            <summary>
            Thrown on a 'NO' or 'BAD' command response
            </summary>
            <remarks>
            Thrown on a 'NO' only when the 'NO' is an unexpected possibility
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.CommandResult">
            <summary>
            The command result associated with the response
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cProtocolErrorException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cUnexpectedServerActionException">
            <summary>
            thrown when something happens that shouldn't (according to my reading of the rfcs)
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnexpectedServerActionException.TryIgnoring">
            <summary>
            If set an indication that ignoring these capabilities may have prevented the exception
            </summary>
            <see cref="P:work.bacome.imapclient.cIMAPClient.IgnoreCapabilities"/>
        </member>
        <member name="T:work.bacome.imapclient.cInternalErrorException">
            <summary>
            thrown when something happens that shouldn't
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cConnectByeException">
            <summary>
            thrown when the server said bye at connect
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cConnectByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cHomeServerReferralException">
            <summary>
            thrown when the server rejects connection but suggests that we try a different server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cHomeServerReferralException.ResponseText">
            <summary>
            The response text associated with the rejection
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cCredentialsException">
            <summary>
            thrown when the server didn't accept the credentials provided
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cCredentialsException.ResponseText">
            <summary>
            Filled in if there was an explicit rejection of the credetials by the server
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cAuthenticationMechanismsException">
            <summary>
            thrown to indicate that the inability to connect is related to the lack of usable authentication mechanisms offered by the server
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cAuthenticationMechanismsException.TLSIssue">
            <summary>
            This is set to true if the problem might be fixed by using TLS
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUnilateralByeException">
            <summary>
            thrown to indicate that a server initiated 'BYE' occurred
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cUnilateralByeException.ResponseText">
            <summary>
            The response text associated with the 'BYE'
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cSASLSecurityException">
            <summary>
            thrown when SASL security layer encoding or decoding fails
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineConflictException">
            <summary>
            thrown when there are two pipelined commands that conflict in some way
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cPipelineStoppedException">
            <summary>
            thrown when the internal command pipeline has stopped processing commands
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cStreamClosedException">
            <summary>
            thrown when the internal network stream has been closed
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cUIDValidityChangedException">
            <summary>
            thrown when the UIDValidity changed while doing something that depended on it not changing
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cContentTransferDecodingException">
            <summary>
            thrown when the CTE can't be handled
            </summary>
        </member>
        <member name="T:work.bacome.imapclient.cFilterMSNException">
            <summary>
            thrown when a handle can't resolved when building the filter
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cFilterMSNException.Handle">
            <summary>
            The handle that couldn't be resolved to an MSN
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Code">
            <summary>
            The IMAP response text code associated with the response text
            </summary>
            <remarks>
            If there was no code 'none' is used. 
            If there was a code but it wasn't recognised then 'unknown' is used here and the text of the code is stored in UnknownCodeAtom.
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Strings">
            <summary>
            Data associated with the response text code
            </summary>
            <remarks>
            For badcharset it may contain the list of valid charsets.
            For referral it should contain the URL(s).
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeAtom">
            <summary>
            If the response text code was unrecognised the text of the code is made available here
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.UnknownCodeText">
            <summary>
            If the unrecognised response text code had text following it the text is made available here
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseText.Text">
            <summary>
            The response text
            </summary>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.TextType">
            <summary>
            The response text type
            </summary>
            <remarks>
            Indicates the situation in which the response text was received
            </remarks>
        </member>
        <member name="F:work.bacome.imapclient.cResponseTextEventArgs.Text">
            <summary>
            The response text
            </summary>
        </member>
    </members>
</doc>
